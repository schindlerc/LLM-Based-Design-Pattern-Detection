You are a skilled software architect. Your task is to identify design patterns in source code snippets and create XML annotations for them.

### Instructions:
1. Wait for a **subsequent prompt** that will contain the source code to analyze.
2. Once the source code is provided, **analyze** it for the presence of the specific design pattern **Composite**.
3. **If the design pattern is found**, create a **valid** XML annotation for **each instance** within the snippet.
4. **If no pattern is found**, simply respond with the text: `"No instance found."`

**Important:** 
- Do not provide any additional explanations, outputs, or analyses beyond what is requested.
- If the pattern is found, only output the XML annotation(s).
- If the pattern is not found, only output `"No instance found."`

### Example:
**Source Code Snippet:**
File: com.taursys.servlet.ServletForm
```java
package com.taursys.servlet;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.taursys.dom.AbstractWriter;
import com.taursys.dom.DocumentAdapter;
import com.taursys.dom.XMLWriter;
import com.taursys.dom.DOM_1_20000929_DocumentAdapter;
import com.taursys.xml.event.*;
import com.taursys.servlet.respond.Responder;
import com.taursys.servlet.respond.HTMLResponder;
import com.taursys.debug.Debug;
import com.taursys.xml.Container;
import com.taursys.xml.Form;
import java.util.Map;
import java.util.HashMap;
import java.util.Enumeration;
import java.util.Collections;

public class ServletForm extends Form {
  private HttpServletRequest request;
  private HttpServletResponse response;
  private boolean enableInput = true;
  private boolean enableActions = true;
  private com.taursys.servlet.respond.Responder responder;


  public ServletForm() {
    setResponder(createDefaultResponder());
  }

  public boolean recycle() {
    try {
      ((RecycleDispatcher)getDispatcher(RecycleEvent.class.getName())).dispatch();
      return true;
    } catch (RecycleException ex) {
      com.taursys.debug.Debug.error("Problem during recycling",ex);
      return false;
    }
  }


  public void doGet(HttpServletRequest req, HttpServletResponse resp) throws Exception {
    try {
      response = resp;
      request = req;
      if (!isInitialized())
        initForm();
      if (req.getContentType() != null && req.getContentType().startsWith(
          HttpMultiPartServletRequest.MULTIPART_FORM_DATA)) {
        request = createRequestWrapper(req);
      }
      setParameterMap(createParameterMap());
      dispatchInitContext();
      dispatchInitForm();
      dispatchParameters();
      openForm();
      dispatchOpenForm();
      if (enableInput) {
        dispatchInput();
      }
      if (enableActions) {
        dispatchActions();
      }
      sendResponse();
    } catch (Exception ex) {
      handleException(ex);
    } finally {
      dispatchCloseForm();
      closeForm();
    }
  }


  protected void dispatchInitContext() throws Exception {
    HashMap newContext = new HashMap(getFormContext());
    newContext.put(HttpServletRequest.class.getName(), request);
    newContext.put(HttpServletResponse.class.getName(), response);
    newContext.put(PARAMETER_MAP, getParameterMap());
    getDispatcher(InitContextEvent.class.getName()).dispatch(newContext);
  }

  protected void sendResponse() throws Exception {
    responder.respond();
  }

  protected void handleException(Exception ex) throws Exception {
    throw ex;
  }


  protected HttpServletRequest createRequestWrapper(HttpServletRequest rq)
      throws Exception {
    HttpMultiPartServletRequest multi = new HttpMultiPartServletRequest(rq);
    multi.parseRequest();
    return multi;
  }

  protected Responder createDefaultResponder() {
    return new HTMLResponder();
  }

  public Map createParameterMap() {
    HashMap map = new HashMap();
    Enumeration enum = request.getParameterNames();
    while (enum.hasMoreElements()) {
      String key = (String)enum.nextElement();
      map.put(key, request.getParameterValues(key));
    }
    return Collections.unmodifiableMap(map);
  }


  protected void processInitContextEvent(InitContextEvent e) throws Exception {
    request = (HttpServletRequest)
        e.getContext().get(HttpServletRequest.class.getName());
    response = (HttpServletResponse)
        e.getContext().get(HttpServletResponse.class.getName());
    super.processInitContextEvent(e);
  }


  public void setRequest(HttpServletRequest newRequest) {
    request = newRequest;
  }

  public HttpServletRequest getRequest() {
    return request;
  }

  public void setResponse(HttpServletResponse newResponse) {
    response = newResponse;
  }

  public HttpServletResponse getResponse() {
    return response;
  }

  public void setEnableInput(boolean newEnableInput) {
    enableInput = newEnableInput;
  }

  public boolean isEnableInput() {
    return enableInput;
  }

  public void setEnableActions(boolean newEnableActions) {
    enableActions = newEnableActions;
  }

  public boolean isEnableActions() {
    return enableActions;
  }

  public void setResponder(Responder newResponder) {
    responder = newResponder;
    responder.setServletForm(this);
  }

  public Responder getResponder() {
    return responder;
  }

  private ServletParameterDispatcher spd;
  private AbstractWriter xmlWriter;
  private ServletInputDispatcher sid;
  private ServletTriggerDispatcher std;

  protected AbstractWriter createDefaultWriter() {
    return new XMLWriter();
  }

  public void setXmlWriter(AbstractWriter newXmlWriter) {
    xmlWriter = newXmlWriter;
  }

  public AbstractWriter getXmlWriter() {
    return xmlWriter;
  }

  protected ServletParameterDispatcher createDefaultServletParameterDispatcher() {
    return new ServletParameterDispatcher();
  }

  protected ServletInputDispatcher createDefaultServletInputDispatcher() {
    return new ServletInputDispatcher();
  }

  protected ServletTriggerDispatcher createDefaultServletTriggerDispatcher() {
    return new ServletTriggerDispatcher();
  }

  public void setServletParameterDispatcher(ServletParameterDispatcher d) {
    spd = d;
  }

  public ServletParameterDispatcher getServletParameterDispatcher() {
    return spd;
  }

  public void setServletInputDispatcher(ServletInputDispatcher dispatcher) {
    sid = dispatcher;
  }

  public ServletInputDispatcher getServletInputDispatcher() {
    return sid;
  }


  public void setServletTriggerDispatcher(ServletTriggerDispatcher newTriggerDispatcher) {
    std = newTriggerDispatcher;
  }

  public ServletTriggerDispatcher getServletTriggerDispatcher() {
    return std;
  }

}
```

File: com.taursys.servlet.MultiPartRequestSizeException
```java
package com.taursys.servlet;

public class MultiPartRequestSizeException extends Exception {

  public MultiPartRequestSizeException(String message) {
    super(message);
  }
}
```

File: com.taursys.servlet.DefaultMessageForm
```java
package com.taursys.servlet;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletRequest;
import java.io.PrintWriter;


public class DefaultMessageForm extends ServletForm {

  public DefaultMessageForm() {
  }
  public void doGet(HttpServletRequest req, HttpServletResponse resp) throws java.lang.Exception {
    resp.setContentType("text/html");
    PrintWriter pw = resp.getWriter();
    pw.println("<html><head></head><body><h1>Mapper Message</h1><p>"
        + message + "</p></body></html>");
    pw.flush();
  }
  public void setMessage(String newMessage) {
    message = newMessage;
  }
  public String getMessage() {
    return message;
  }
  private String message = "Your message goes here";
  public boolean recycle() {
    return true;
  }
}
```

File: com.taursys.servlet.ServletApp
```java
package com.taursys.servlet;

import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.util.*;
import com.taursys.servlet.ServletForm;
import com.taursys.servlet.ServletFormFactory;

public class ServletApp extends HttpServlet {
  private ServletFormFactory factory = new ServletFormFactory();

  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    try {
      ServletForm form = factory.createServletForm(request.getPathInfo());
      try {
        form.doGet(request, response);
      }
      catch (Exception ex) {
        throw new ServletException("Unhandled Exception in ServletForm: "
            + ex.getMessage(), ex);
      } finally {
        factory.recycle(form);
      }
    }
    catch (ServletFormNotFoundException ex) {
      response.sendError(HttpServletResponse.SC_NOT_FOUND,
        "The requested ServletForm was not found.  If you typed the url, please "
        + "check to be sure it is correct.  It is also possible that the system "
        + "that provides this resource is temporarily unavailable.<br/><hr/>"
        + "Internal error message: " + ex.getMessage() + ").");
    }
  }

  public void doPost(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
    doGet(request, response);
  }

  public ServletFormFactory getFactory() {
    return factory;
  }

  public void setFactory(ServletFormFactory factory) {
    this.factory = factory;
  }
}
```

File: com.taursys.servlet.ServletFormNotFoundException
```java
package com.taursys.servlet;

public class ServletFormNotFoundException extends Exception {

  public ServletFormNotFoundException(String message) {
    super(message);
  }
}
```

File: com.taursys.servlet.ServletInputDispatcher
```java
package com.taursys.servlet;

import com.taursys.xml.event.Dispatcher;
import com.taursys.xml.Parameter;
import com.taursys.xml.Component;
import com.taursys.xml.DocumentElement;
import com.taursys.xml.event.InputEvent;
import javax.servlet.ServletRequest;
import java.util.Iterator;
import com.taursys.debug.Debug;

public class ServletInputDispatcher extends Dispatcher {
  private ServletRequest request;

  public ServletInputDispatcher() {
  }

  public void dispatchToComponent(Component c) throws Exception {
    if (request != null) {
      if (c instanceof Parameter) {
        dispatchToParameter((Parameter)c);
      } else if (c instanceof DocumentElement) {
        c.dispatchEvent(new InputEvent(c, null, null));
      }
    } else {
      Debug.error(
          "ServletInputDispatcher.dispatchToComponent: request is null");
    }
  }

  private void dispatchToParameter(Parameter field) throws Exception {
    String pname = field.getParameter();
    if (pname != null && pname.length()>0) {
      String value = request.getParameter(pname);
      if (value == null)
        value = field.getDefaultValue();
      if (value != null) {
        field.dispatchEvent(
            new InputEvent(field, field.getParameter(), value));
      }
    }
  }

  public void dispatch(ServletRequest request) throws Exception {
    this.request = request;
    Iterator iter = components.iterator();
    while (iter.hasNext()) {
      dispatchToComponent((Component)iter.next());
    }
  }
}
```

File: com.taursys.servlet.MultiPartRequestContentException
```java
package com.taursys.servlet;

public class MultiPartRequestContentException extends Exception {

  public MultiPartRequestContentException(String message) {
    super(message);
  }
}
```

File: com.taursys.servlet.ServletParameterDispatcher
```java
package com.taursys.servlet;

import com.taursys.xml.event.Dispatcher;
import com.taursys.xml.Parameter;
import com.taursys.xml.Component;
import com.taursys.xml.DocumentElement;
import com.taursys.xml.event.ParameterEvent;
import javax.servlet.ServletRequest;
import java.util.Iterator;
import com.taursys.debug.Debug;
import java.util.*;

public class ServletParameterDispatcher extends Dispatcher {
  private ServletRequest request;

  public ServletParameterDispatcher() {
  }

  public void dispatchToComponent(Component c) throws Exception {
    if (request != null) {
      if (c instanceof Parameter) {
        dispatchToParameter((Parameter)c);
      } else if (c instanceof DocumentElement) {
        c.dispatchEvent(new ParameterEvent(c, null, null));
      }
    } else {
      Debug.error(
          "ServletParameterDispatcher.dispatchToComponent: request is null");
    }
  }

  private void dispatchToParameter(Parameter field) throws Exception {
    String pname = field.getParameter();
    if (pname != null && pname.length()>0) {
      String value = request.getParameter(pname);
      if (value == null)
        value = field.getDefaultValue();
      if (value != null) {
        field.dispatchEvent(
            new ParameterEvent(field, field.getParameter(), value));
      }
    }
  }

  public void dispatch(ServletRequest request) throws Exception {
    this.request = request;
    Iterator iter = components.iterator();
    while (iter.hasNext()) {
      dispatchToComponent((Component)iter.next());
    }
  }
}
```

File: com.taursys.servlet.HttpMultiPartServletRequest
```java
package com.taursys.servlet;

import java.util.*;
import java.text.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.security.Principal;

public class HttpMultiPartServletRequest implements HttpServletRequest {
  private HashMap map = new HashMap();
  private String boundary;
  private StringTokenizer tokens;
  private boolean endOfData;
  private ServletInputStream servletInputStream;
  private int maxLineLength = 4096;
  private int maxBufferSize = 1024 * 64;
  private int bufferSize = maxBufferSize;
  private int bufferPosition = maxBufferSize;
  private byte[] buffer = new byte[maxBufferSize];
  private int maxFileSize = 1024 * 1024; // default 1M
  private HttpServletRequest request;
  private static final String QUOTE = "\"";
  private static final String TOKEN_DELIM_DEFAULT = " :;=" + QUOTE;
  private String startBoundary;
  private String endBoundary;
  private String currentDelimiters = TOKEN_DELIM_DEFAULT;
  public static final String PARM_BYTE_ARRAY_SUFFIX = "_ByteArray";
  public static final String PARM_FILE_NAME_SUFFIX = "_FileName";
  public static final String PARM_CONTENT_TYPE_SUFFIX = "_ContentType";
  public static final String BASIC_AUTH = "BASIC";
  public static final String FORM_AUTH = "FORM";
  public static final String CLIENT_CERT_AUTH = "CLIENT_CERT";
  public static final String DIGEST_AUTH = "DIGEST";
  public static final String MULTIPART_FORM_DATA = "multipart/form-data";

  public HttpMultiPartServletRequest(HttpServletRequest request) {
    this.request = request;
  }


  public void parseRequest() throws MultiPartRequestSizeException,
      MultiPartRequestContentException, IOException {
    try {
      endOfData = false;
      setupBoundary();
      expectLine(startBoundary);
      while(!endOfData)
        processBlock();
    } finally {
      if (servletInputStream != null) {
        servletInputStream.skip(Long.MAX_VALUE);
        servletInputStream.close();
      }
    }
  }

  public void setupBoundary() throws MultiPartRequestContentException {
    if (request.getContentType() == null)
      throw new MultiPartRequestContentException("Unknown Content Type");
    StringTokenizer contentType = new StringTokenizer(
        request.getContentType(), " ;=");
    try {
      if (contentType.nextToken().equals(MULTIPART_FORM_DATA)) {
        if (contentType.nextToken().equals("boundary")) {
          boundary = contentType.nextToken();
          startBoundary = "--" + boundary;
          endBoundary = startBoundary + "--";
        } else {
          throw new MultiPartRequestContentException("Content type is missing boundary attribute");
        }
      } else {
        throw new MultiPartRequestContentException("Content type is not multipart/form-data");
      }
    } catch (NoSuchElementException ex) {
      throw new MultiPartRequestContentException("Content type or boundary attribute is missing");
    }
  }

  public void processBlock()
      throws MultiPartRequestSizeException, MultiPartRequestContentException, IOException {
    String contentType = "text/plain"; // default
    tokenizeLine();
    expectToken("Content-Disposition");
    expectToken("form-data");
    expectToken("name");
    String key = fetchRequiredToken();
    if (checkForToken("filename")) {
      storeParameter(key + PARM_FILE_NAME_SUFFIX, fetchRequiredToken());
      tokenizeLine();
      expectToken("Content-Type");
      contentType = fetchRequiredToken();
      storeParameter(key + PARM_CONTENT_TYPE_SUFFIX, contentType);
      String line;
      while ((line = readLine()) != null && line.length() > 0) {}
      if (line == null)
        throw new MultiPartRequestContentException("Unexpected end of input");
    } else {
      expectLine("");
    }
    fetchContent(key, contentType);
  }


  public Enumeration getParameterNames() {
    return Collections.enumeration(map.keySet());
  }

  public String getParameter(String name) {
    Object[] values = (Object[])map.get(name);
    if (values != null)
      return (String)values[0];
    else
      return null;
  }

  public String[] getParameterValues(String name) {
    Object[] values = (Object[])map.get(name);
    if (values != null) {
      String[] results = new String[values.length];
      for (int i = 0; i < results.length; i++) {
        results[i] = (String)values[i];
      }
      return results;
    } else {
      return null;
    }
  }

  public Map getParameterMap() {
    return Collections.unmodifiableMap(map);
  }

  public byte[] getParameterByteArray(String name) {
    Object[] values = (Object[])map.get(name);
    if (values != null)
      return (byte[])values[0];
    else
      return null;
  }

  public Object[] getParameterByteArrays(String name) {
    return (Object[])map.get(name);
  }

  public ServletInputStream getInputStream() throws IOException {
    if (servletInputStream == null)
      servletInputStream = request.getInputStream();
    return servletInputStream;
  }

  public BufferedReader getReader() throws IOException {
    throw new IllegalStateException(
        "Cannot get Reader for multipart/form-data type request");
  }


  public HttpServletRequest getRequest() {
    return request;
  }

  public String getBoundary() {
    return boundary;
  }

  public boolean isEndOfData() {
    return endOfData;
  }

  public void setMaxFileSize(int newMaxFileSize) {
    maxFileSize = newMaxFileSize;
  }

  public int getMaxFileSize() {
    return maxFileSize;
  }

  public void setMaxLineLength(int newMaxLineLength) {
    maxLineLength = newMaxLineLength;
  }

  public int getMaxLineLength() {
    return maxLineLength;
  }


  private void fetchContent(String key, String contentType)
      throws MultiPartRequestSizeException, MultiPartRequestContentException, IOException {
    if (contentType.startsWith("text/"))
      fetchTextPlainContent(key);
    else if (contentType.startsWith("application/"))
      fetchApplicationOctetStreamContent(key);
    else if (contentType.startsWith("image/"))
      fetchApplicationOctetStreamContent(key);
    else if (contentType.startsWith("audio/"))
      fetchApplicationOctetStreamContent(key);
    else if (contentType.startsWith("video/"))
      fetchApplicationOctetStreamContent(key);
    else
      throw new MultiPartRequestContentException("Content type: " + contentType + " not supported");
  }

  private boolean equalsSubArray(char[] find, char[] target, int start, int len) {
    if (len != find.length)
      return false;
    for (int i = 0; i < find.length; i++) {
      if (find[i] != target[i+start])
        return false;
    }
    return true;
  }

  private void fetchTextPlainContent(String key)
      throws MultiPartRequestSizeException, MultiPartRequestContentException, IOException {
    char[] work = new char[maxFileSize];
    int offset = 0;
    int size = 0;
    char[] start = startBoundary.toCharArray();
    char[] end = endBoundary.toCharArray();
    try {
      while (true) {
        size = readChars(work, offset, key);
        if (equalsSubArray(start, work, offset, size)
            || (endOfData = equalsSubArray(end, work, offset, size))) {
            offset -= 2;
            storeParameter(key, new String(work, 0, offset));
            return;
        }
        offset += size;
        work[offset] = '\r';
        offset++;
        work[offset] = '\n';
        offset++;
      }
    } catch (ArrayIndexOutOfBoundsException ex) {
      throw new MultiPartRequestSizeException(
        "Maximum file size exceeded for value named: " + key);
    }
  }

  private void fetchApplicationOctetStreamContent(String key)
      throws MultiPartRequestSizeException, MultiPartRequestContentException, IOException {
    byte[] work = new byte[maxFileSize];
    int offset = 0;
    int size = 0;
    boolean done = false;
    int boundarySize = startBoundary.length() + 1;
    try {
      while (!done) {
        size = readBytes(work, offset);
        if (new String(work, offset, size - 1).startsWith(startBoundary)) {
          endOfData = new String(work, offset, size - 1).startsWith(endBoundary);
          done = true;
          offset -= 2; // remove last return/newline from results
        } else {
          offset += size;
        }
      }
    } catch (ArrayIndexOutOfBoundsException ex) {
      throw new MultiPartRequestSizeException(
        "Maximum file size exceeded for value named: " + key);
    }
    byte[] results = new byte[offset];
    System.arraycopy(work,0,results,0,offset);
    storeParameter(key, "");
    storeParameter(key + PARM_BYTE_ARRAY_SUFFIX, results);
  }

  private byte readByte() throws MultiPartRequestContentException, IOException {
    if (bufferPosition >= bufferSize) {
      bufferSize =
          getInputStream().read(buffer, 0, maxBufferSize);
      if (bufferSize == -1)
        throw new MultiPartRequestContentException("Unexpected end of data stream");
      bufferPosition = 0;
    }
    return buffer[bufferPosition++];
  }

  private String readLine() throws MultiPartRequestContentException, IOException {
    byte[] results = new byte[maxLineLength];
    int i = 0;
    byte b;
    while ((b = readByte()) != '\n') {
      if (b != '\r') { // ignore carriage return
        results[i] = b;
        i++;
      }
    }
    return new String(results, 0, i);
  }

  public int readChars(char[] results, int offset, String key)
      throws MultiPartRequestSizeException, MultiPartRequestContentException,
      IOException {
    byte[] bytes = new byte[maxLineLength];
    int i = 0;
    byte b;
    try {
      while ((b = readByte()) != '\n') {
        if (b != '\r') { // ignore carriage return
          bytes[i] = b;
          i++;
        }
      }
    } catch (ArrayIndexOutOfBoundsException ex) {
      throw new MultiPartRequestSizeException(
        "Maximum line length exceeded for value named: " + key);
    }
    String s = new String(bytes, 0, i);
    System.arraycopy(s.toCharArray(), 0, results, offset, i);
    return i;
  }

  private int readBytes(byte[] results, int offset)
      throws MultiPartRequestContentException, IOException {
    int originalOffset = offset;
    byte b;
    while ((b = readByte()) != '\n') {
      results[offset] = b;
      offset++;
    }
    if (b == '\n') {
      results[offset] = b;
      offset++;
    }
    return offset - originalOffset;
  }

  private void expectToken(String expected)
      throws MultiPartRequestContentException {
    try {
      String value = fetchRequiredToken();
      if (!value.equals(expected))
        throw new MultiPartRequestContentException("Expected: >>" + expected
            + "<< Received >>" + value + "<<");
    } catch (NoSuchElementException ex) {
      throw new MultiPartRequestContentException("Out of elements. Expected: " + expected);
    }
  }

  private boolean checkForToken(String expected) {
    try {
      expectToken(expected);
      return true;
    } catch (MultiPartRequestContentException ex) {
      return false;
    }
  }

  private String fetchToken()
      throws MultiPartRequestContentException {
    try {
      String value = tokens.nextToken(currentDelimiters);
      if (currentDelimiters.indexOf(value) != -1) {
        if (value.equals(QUOTE)) {
          if (currentDelimiters.equals(QUOTE)) {
            currentDelimiters = TOKEN_DELIM_DEFAULT;
          } else {
            currentDelimiters = QUOTE;
            value = tokens.nextToken(QUOTE);
            if (value.equals(QUOTE)) {
              currentDelimiters = TOKEN_DELIM_DEFAULT;
              return "";
            } else {
              return value;
            }
          }
        }
        return fetchToken();
      } else {
        return value;
      }
    } catch (NoSuchElementException ex) {
      throw new MultiPartRequestContentException("Out of elements. Expected a value");
    }
  }

  private String fetchRequiredToken() throws MultiPartRequestContentException {
    String value = fetchToken();
    if (value == null)
      throw new MultiPartRequestContentException("Out of elements. Expected a value");
    return value;
  }

  private void tokenizeLine()
      throws MultiPartRequestContentException, IOException {
    String line = readLine();
    if (line == null)
      throw new MultiPartRequestContentException("Unexpected end of input");
    tokens = new StringTokenizer(line, TOKEN_DELIM_DEFAULT, true);
    currentDelimiters = TOKEN_DELIM_DEFAULT;
  }

  private void expectLine(String expected)
      throws MultiPartRequestContentException, IOException {
    String line = readLine();
    if (line == null)
      throw new MultiPartRequestContentException("Unexpected end of input");
    if (!line.equals(expected))
      throw new MultiPartRequestContentException("\nExpected: >>" + expected + "<<(length="
          + expected.length() + ")\nReceived: >>" + line + "<<(length="
          + line.length() + ")");
  }

  private void storeParameter(String key, Object value) {
    if (map.containsKey(key)) {
      Object[] values = (Object[])map.get(key);
      Object[] newValues = new Object[values.length + 1];
      System.arraycopy(values, 0, newValues, 0, values.length);
      newValues[values.length] = value;
      map.put(key, newValues);
    } else {
      map.put(key, new Object[] {value});
    }
  }


  public String getAuthType() {
    return request.getAuthType();
  }

  public Cookie[] getCookies() {
    return request.getCookies();
  }

  public long getDateHeader(String name) {
    return request.getDateHeader(name);
  }

  public String getHeader(String name) {
    return request.getHeader(name);
  }

  public Enumeration getHeaders(String name) {
    return request.getHeaders(name);
  }

  public Enumeration getHeaderNames() {
    return request.getHeaderNames();
  }

  public int getIntHeader(String name) {
    return request.getIntHeader(name);
  }

  public String getMethod() {
    return request.getMethod();
  }

  public String getPathInfo() {
    return request.getPathInfo();
  }

  public String getPathTranslated() {
    return request.getPathTranslated();
  }

  public String getContextPath() {
    return request.getContextPath();
  }

  public String getQueryString() {
    return request.getQueryString();
  }

  public String getRemoteUser() {
    return request.getRemoteUser();
  }

  public boolean isUserInRole(String role) {
    return request.isUserInRole(role);
  }

  public Principal getUserPrincipal() {
    return request.getUserPrincipal();
  }

  public String getRequestedSessionId() {
    return request.getRequestedSessionId();
  }

  public String getRequestURI() {
    return request.getRequestURI();
  }

  public String getServletPath() {
    return request.getServletPath();
  }

  public HttpSession getSession(boolean create) {
    return request.getSession(create);
  }

  public HttpSession getSession() {
    return request.getSession();
  }

  public boolean isRequestedSessionIdValid() {
    return request.isRequestedSessionIdValid();
  }

  public boolean isRequestedSessionIdFromCookie() {
    return request.isRequestedSessionIdFromCookie();
  }

  public boolean isRequestedSessionIdFromURL() {
    return request.isRequestedSessionIdFromURL();
  }

  public boolean isRequestedSessionIdFromUrl() {
    return request.isRequestedSessionIdFromUrl();
  }

  public Object getAttribute(String name) {
    return request.getAttribute(name);
  }

  public Enumeration getAttributeNames() {
    return request.getAttributeNames();
  }

  public String getCharacterEncoding() {
    return request.getCharacterEncoding();
  }

  public int getContentLength() {
    return request.getContentLength();
  }

  public String getContentType() {
    return request.getContentType();
  }

  public String getProtocol() {
    return request.getProtocol();
  }

  public String getScheme() {
    return request.getScheme();
  }

  public String getServerName() {
    return request.getServerName();
  }

  public int getServerPort() {
    return request.getServerPort();
  }

  public String getRemoteAddr() {
    return request.getRemoteAddr();
  }

  public String getRemoteHost() {
    return request.getRemoteHost();
  }

  public void setAttribute(String name, Object o) {
    request.setAttribute(name, o);
  }

  public void removeAttribute(String name) {
    request.removeAttribute(name);
  }

  public Locale getLocale() {
    return request.getLocale();
  }

  public Enumeration getLocales() {
    return request.getLocales();
  }

  public boolean isSecure() {
    return request.isSecure();
  }

  public RequestDispatcher getRequestDispatcher(String path) {
    return request.getRequestDispatcher(path);
  }

  public String getRealPath(String path) {
    return request.getRealPath(path);
  }

  public StringBuffer getRequestURL() {
    return request.getRequestURL();
  }

  public void setCharacterEncoding(String encoding) throws java.io.UnsupportedEncodingException {
    request.setCharacterEncoding(encoding);
  }

  static public void main(String[] args) {
    try {
      HttpMultiPartServletRequest rq = new HttpMultiPartServletRequest(null);
      String testString = "xxxx zzz; yyy-yy=\"aaa/:bbb\"; delim=---YYY  ;;\"\"";
      rq.tokens = new StringTokenizer(testString,rq.TOKEN_DELIM_DEFAULT, true);
      while (rq.tokens.hasMoreTokens())
        System.out.println(">>" + rq.fetchToken() + "<<");
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }
}
```

File: com.taursys.servlet.ServletTriggerDispatcher
```java
package com.taursys.servlet;

import com.taursys.xml.event.Dispatcher;
import com.taursys.xml.Trigger;
import com.taursys.xml.Component;
import com.taursys.xml.DocumentElement;
import com.taursys.xml.event.TriggerEvent;
import javax.servlet.ServletRequest;
import java.util.Iterator;
import com.taursys.debug.Debug;

public class ServletTriggerDispatcher extends Dispatcher {
  private ServletRequest request;

  public ServletTriggerDispatcher() {
  }

  public void dispatchToComponent(Component c) throws Exception {
    if (request != null) {
      if (c instanceof Trigger) {
        dispatchToTrigger((Trigger)c);
      } else if (c instanceof DocumentElement) {
        c.dispatchEvent(new TriggerEvent(c, null, null));
      }
    } else {
      Debug.error(
          "ServletTriggerDispatcher.dispatchToComponent: request is null");
    }
  }

  private void dispatchToTrigger(Trigger button) throws Exception {
    String pname = button.getParameter();
    if (pname != null && pname.length()>0) {
      String value = request.getParameter(pname);
      if (value == null && button.isDefaultTrigger()) {
        value = button.getText();
        TriggerEvent e = new TriggerEvent(button, button.getParameter(), value);
        button.dispatchEvent(e);
      } else if (value != null && value.equals(button.getText())) {
        TriggerEvent e = new TriggerEvent(button, button.getParameter(), value);
        button.dispatchEvent(e);
      }
    }
  }

  public void dispatch(ServletRequest request) throws Exception {
    this.request = request;
    Iterator iter = components.iterator();
    while (iter.hasNext()) {
      dispatchToComponent((Component)iter.next());
    }
  }
}
```

File: com.taursys.servlet.ServletFormFactory
```java
package com.taursys.servlet;

import java.util.Hashtable;
import java.util.Vector;

public class ServletFormFactory {
  private Hashtable packages = new Hashtable();
  private Hashtable servletForms = new Hashtable();
  private String defaultFormName;
  private String servletFormSuffix = ".sf";
  private ClassLoader defaultClassLoader;

  public ServletFormFactory() {
    defaultFormName = "com.taursys.servlet.DefaultMessageForm";
    defaultClassLoader = getClass().getClassLoader();
  }

  public synchronized ServletForm createServletForm(String url)
      throws ServletFormNotFoundException {
    String servletFormName = parseClassName(url);
    Vector instances = (Vector)servletForms.get(servletFormName);
    ServletForm newForm = null;
    if (instances != null && instances.size() > 0) {
        newForm = (ServletForm)instances.remove(0);
    }
    if (newForm == null ) {
      try {
        newForm = (ServletForm)defaultClassLoader.loadClass(servletFormName).newInstance();
      } catch (Exception ex) {
        throw new ServletFormNotFoundException("Cannot create requested form: "
            + ex);
      }
    }
    return newForm;
  }

  public synchronized void recycle(ServletForm usedServletForm) {
    if (usedServletForm.recycle()) {
      Vector instances = (Vector)servletForms.get(
          usedServletForm.getClass().getName());
      if (instances == null) {
        instances = new Vector();
        servletForms.put(usedServletForm.getClass().getName(), instances);
      }
      instances.add(usedServletForm);
    }
  }

  public String parseClassName(String url) throws ServletFormNotFoundException {
    if (url != null && !url.equals("/")) {
      int lastSlash = url.lastIndexOf("/");
      String urlPrefix = url.substring(0,lastSlash +1 );
      String packageName = (String)packages.get(urlPrefix);
      if (packageName == null)
        throw new ServletFormNotFoundException(
            "Prefix " + urlPrefix + " not registered");
      String formName = url.substring(lastSlash + 1);
      int sLen = servletFormSuffix.length();
      if (formName.length() < sLen + 1 || !formName.endsWith(servletFormSuffix))
        throw new ServletFormNotFoundException("Name of ServletForm does not end in "
            + servletFormSuffix + ". url=" + url);
      return packageName + "."
          + formName.substring(0, formName.length() - sLen);
    } else {
      return defaultFormName;
    }
  }

  public void addPackage(String path, String packageName) {
    if (path.endsWith("/"))
      packages.put(path, packageName);
    else
      packages.put(path + "/", packageName);
  }

  public void setDefaultFormName(String newDefaultFormName) {
    defaultFormName = newDefaultFormName;
  }

  public String getDefaultFormName() {
    return defaultFormName;
  }

  public void setServletFormSuffix(String newServletFormSuffix) {
    if (newServletFormSuffix == null)
      throw new java.lang.IllegalArgumentException(
        "servletFormSuffix cannot be null - use blank to indicate no suffix");
    servletFormSuffix = newServletFormSuffix;
  }

  public String getServletFormSuffix() {
    return servletFormSuffix;
  }

  public void setDefaultClassLoader(ClassLoader newDefaultClassLoader) {
    defaultClassLoader = newDefaultClassLoader;
  }

  public ClassLoader getDefaultClassLoader() {
    return defaultClassLoader;
  }
}
```

File: com.taursys.servlet.test.TestServletInputStream
```java
package com.taursys.servlet.test;

import javax.servlet.ServletInputStream;
import java.io.*;

public class TestServletInputStream extends ServletInputStream {
  private int position = -1;
  private ByteArrayInputStream stream;

  public TestServletInputStream() {
  }

  public void setData(byte[] newData) {
    stream = new ByteArrayInputStream(newData);
  }

  public int read() throws java.io.IOException {
    return stream.read();
  }

  public long skip(long n) throws java.io.IOException {
    return stream.skip( n);
  }

  public synchronized void mark(int readlimit) {
    stream.mark( readlimit);
  }

  public boolean markSupported() {
    return stream.markSupported();
  }

  public int read(byte[] parm1, int parm2, int parm3) throws java.io.IOException {
    return stream.read( parm1,  parm2,  parm3);
  }

  public int available() throws java.io.IOException {
    return stream.available();
  }

  public synchronized void reset() throws java.io.IOException {
    stream.reset();
  }

  public void close() throws java.io.IOException {
    stream.close();
  }

  public int read(byte[] parm1) throws java.io.IOException {
    return stream.read( parm1);
  }
}
```

File: com.taursys.servlet.test.ServletTriggerDispatcherTest
```java
package com.taursys.servlet.test;

import junit.framework.TestCase;
import com.taursys.servlet.ServletTriggerDispatcher;
import com.taursys.xml.Trigger;
import com.taursys.xml.event.TriggerEvent;
import java.text.ParseException;

public class ServletTriggerDispatcherTest extends TestCase {
  protected TestComponent testComponent;
  protected TestServletRequest testRequest;
  protected ServletTriggerDispatcher dispatcher;

  public ServletTriggerDispatcherTest(String _name) {
    super(_name);
  }

  protected void setUp() {
    testComponent = new TestComponent();
    testComponent.setParameter("parm1");
    testComponent.setText("red");
    dispatcher = new ServletTriggerDispatcher();
    testRequest = new TestServletRequest();
  }

  protected void tearDown() {
  }

  public void testDispatchWithMatchValue() throws Exception {
    testRequest.addParameter("parm1", "red");
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(testRequest);
    assertEquals("red",testComponent.getSavedEvent().getValue());
  }

  public void testDispatchWithBlankValue() throws Exception {
    testRequest.addParameter("parm1", "");
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(testRequest);
    assertEquals(null,testComponent.getSavedEvent());
  }

  public void testDispatchWithNonMatchValue() throws Exception {
    testRequest.addParameter("parm1", "blue");
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(testRequest);
    assertEquals(null,testComponent.getSavedEvent());
  }

  public void testDispatchWithNullValue() throws Exception {
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(testRequest);
    assertEquals(null,testComponent.getSavedEvent());
  }

  public void testDispatchDefaultWithMatchValue() throws Exception {
    testRequest.addParameter("parm1", "red");
    testComponent.setDefaultTrigger(true);
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(testRequest);
    assertEquals("red",testComponent.getSavedEvent().getValue());
  }

  public void testDispatchDefaultWithNonMatchValue() throws Exception {
    testRequest.addParameter("parm1", "green");
    testComponent.setDefaultTrigger(true);
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(testRequest);
    assertEquals(null,testComponent.getSavedEvent());
  }

  public void testDispatchDefaultWithNoValueNoText() throws Exception {
    testComponent.setDefaultTrigger(true);
    testComponent.setText(null);
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(testRequest);
    assertNotNull("Saved event",testComponent.getSavedEvent());
  }

  public void testDispatchDefaultWithNullValue() throws Exception {
    dispatcher.addNotify(testComponent);
    testComponent.setDefaultTrigger(true);
    dispatcher.dispatch(testRequest);
    assertEquals("red",testComponent.getSavedEvent().getValue());
  }

  public static void main(String[] argv) {
    String[] testCaseList = {ServletTriggerDispatcherTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }


  public class TestComponent extends Trigger {
    private TriggerEvent savedEvent = null;
    protected void processTriggerEvent(TriggerEvent e) throws ParseException {
      savedEvent = e;
    }
    public TriggerEvent getSavedEvent() {
      return savedEvent;
    }
  }
}
```

File: com.taursys.servlet.test.HttpMultiPartServletRequestTest
```java
package com.taursys.servlet.test;

import junit.framework.TestCase;
import com.taursys.servlet.HttpMultiPartServletRequest;
import com.taursys.servlet.MultiPartRequestSizeException;
import com.taursys.servlet.MultiPartRequestContentException;
import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.util.*;

public class HttpMultiPartServletRequestTest extends TestCase {
  public static final String TEST_BOUNDARY =
      "---------------------------14693480941749698586855636226";
  public static final String TEST_START_BOUNDARY = "--" + TEST_BOUNDARY;
  public static final String TEST_CONTENT_TYPE = "multipart/form-data; boundary=" +
      TEST_BOUNDARY;

  public HttpMultiPartServletRequestTest(String _name) {
    super(_name);
  }

  protected void setUp() {
  }

  protected void tearDown() {
  }

  public void testSetupBoundaryGoodContentType() throws Exception {
    TestHttpServletRequest request = new TestHttpServletRequest();
    request.setContentType(TEST_CONTENT_TYPE);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    parser.setupBoundary();
    assertEquals(TEST_BOUNDARY, parser.getBoundary());
  }

  public void testSetupBoundaryExtraSpaceContentType() throws Exception {
    TestHttpServletRequest request = new TestHttpServletRequest();
    request.setContentType(
        "  multipart/form-data ;   boundary =   " + TEST_BOUNDARY);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    parser.setupBoundary();
    assertEquals(TEST_BOUNDARY, parser.getBoundary());
  }

  public void testSetupBoundaryBadContentType() throws Exception {
    TestHttpServletRequest request = new TestHttpServletRequest();
    request.setContentType("multipart/x-www-form-urlencoded; boundary=" + TEST_BOUNDARY);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    try {
      parser.setupBoundary();
      fail("Expected Servlet Exception");
    } catch (MultiPartRequestContentException ex) {
      assertEquals("Content type is not multipart/form-data", ex.getMessage());
    }
  }

  public void testSetupBoundaryNoBoundary() throws Exception {
    TestHttpServletRequest request = new TestHttpServletRequest();
    request.setContentType("multipart/form-data");
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    try {
      parser.setupBoundary();
      fail("Expected Servlet Exception");
    } catch (MultiPartRequestContentException ex) {
      assertEquals("Content type or boundary attribute is missing", ex.getMessage());
    }
  }

  public void testSetupBoundaryDifferentAttribute() throws Exception {
    TestHttpServletRequest request = new TestHttpServletRequest();
    request.setContentType("multipart/form-data; something=xxx");
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    try {
      parser.setupBoundary();
      fail("Expected Servlet Exception");
    } catch (MultiPartRequestContentException ex) {
      assertEquals("Content type is missing boundary attribute", ex.getMessage());
    }
  }

  public void testSetupBoundaryEmpty() throws Exception {
    TestHttpServletRequest request = new TestHttpServletRequest();
    request.setContentType("");
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    try {
      parser.setupBoundary();
      fail("Expected Servlet Exception");
    } catch (MultiPartRequestContentException ex) {
      assertEquals("Content type or boundary attribute is missing", ex.getMessage());
    }
  }

  public void testSetupBoundaryNull() throws Exception {
    TestHttpServletRequest request = new TestHttpServletRequest();
    request.setContentType(null);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    try {
      parser.setupBoundary();
      fail("Expected Servlet Exception");
    } catch (MultiPartRequestContentException ex) {
      assertEquals("Unknown Content Type", ex.getMessage());
    }
  }

  public void testProcessBlockBadParameter() throws Exception {
    String testRequest =
      "Content-Disposition: form-data; name=\"email\"\r\n" +
      "\r\n" +
      "anyone@anywhere.com\r\n" +
      TEST_START_BOUNDARY + "\r\n";
    TestHttpServletRequest request = new TestHttpServletRequest();
    TestServletInputStream stream = new TestServletInputStream();
    request.setContentType(TEST_CONTENT_TYPE);
    stream.setData(testRequest.getBytes());
    request.setInputStream(stream);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    parser.setupBoundary();

    parser.processBlock();
    assertTrue("Expected NOT end of data", !parser.isEndOfData());
    assertNull("Retrieving invalid parameter", parser.getParameter("bad"));
    assertNull("Retrieving invalid parameter String array", parser.getParameterValues("bad"));
    assertNull("Retrieving invalid parameter Object array", parser.getParameterByteArrays("bad"));
  }

  public void testProcessBlockNotLastParameter() throws Exception {
    String testRequest =
      "Content-Disposition: form-data; name=\"email\"\r\n" +
      "\r\n" +
      "anyone@anywhere.com\r\n" +
      TEST_START_BOUNDARY + "\r\n";
    TestHttpServletRequest request = new TestHttpServletRequest();
    TestServletInputStream stream = new TestServletInputStream();
    request.setContentType(TEST_CONTENT_TYPE);
    stream.setData(testRequest.getBytes());
    request.setInputStream(stream);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    parser.setupBoundary();

    parser.processBlock();
    assertTrue("Expected NOT end of data", !parser.isEndOfData());
    Enumeration enum = parser.getParameterNames();
    while (enum.hasMoreElements()) {
      if (((String)enum.nextElement()).equals("email"))
        return; //found
    }
    fail("Email parameter is not present");
  }

  public void testProcessBlockNotLastContent() throws Exception {
    String testRequest =
      "Content-Disposition: form-data; name=\"email\"\r\n" +
      "\r\n" +
      "anyone@anywhere.com\r\n" +
      TEST_START_BOUNDARY + "\r\n";
    TestHttpServletRequest request = new TestHttpServletRequest();
    TestServletInputStream stream = new TestServletInputStream();
    request.setContentType(TEST_CONTENT_TYPE);
    stream.setData(testRequest.getBytes());
    request.setInputStream(stream);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    parser.setupBoundary();
    parser.processBlock();
    assertEquals("anyone@anywhere.com", parser.getParameter("email"));
    assertTrue("Expected NOT end of data", !parser.isEndOfData());
  }

  public void testProcessBlockLastContent() throws Exception {
    String testRequest =
      "Content-Disposition: form-data; name=\"email\"\r\n" +
      "\r\n" +
      "anyone@anywhere.com\r\n" +
      TEST_START_BOUNDARY + "--\r\n";
    TestHttpServletRequest request = new TestHttpServletRequest();
    TestServletInputStream stream = new TestServletInputStream();
    request.setContentType(TEST_CONTENT_TYPE);
    stream.setData(testRequest.getBytes());
    request.setInputStream(stream);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    parser.setupBoundary();
    parser.processBlock();
    assertEquals("anyone@anywhere.com", parser.getParameter("email"));
    assertTrue("Expected IS end of data", parser.isEndOfData());
  }

  public void testProcessBlockEmptyFile() throws Exception {
    byte[] byteData = new byte[] {};
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    String testRequest =
      "Content-Disposition: form-data; name=\"theFile\"; filename=\"\"\r\n" +
      "Content-Type: application/octet-stream\r\n" +
      "\r\n";

    bos.write(testRequest.getBytes());
    bos.write(byteData);
    bos.write('\r');
    bos.write('\n');
    bos.write(TEST_START_BOUNDARY.getBytes());
    bos.write('\r');
    bos.write('\n');

    TestHttpServletRequest request = new TestHttpServletRequest();
    TestServletInputStream stream = new TestServletInputStream();
    request.setContentType(TEST_CONTENT_TYPE);
    stream.setData(bos.toByteArray());
    request.setInputStream(stream);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    parser.setupBoundary();
    parser.processBlock();
    assertEquals("", parser.getParameter("theFile_FileName"));
    assertEquals("application/octet-stream", parser.getParameter("theFile_ContentType"));
    assertEquals("", parser.getParameter("theFile"));
    assertTrue("Expected NOT end of data", !parser.isEndOfData());
    byte[] byteResult = parser.getParameterByteArray("theFile_ByteArray");
    assertEquals("Byte Array Size", byteData.length, byteResult.length);
    for (int i = 0; i < byteData.length; i++) {
      assertEquals("Byte @" + i, byteData[i], byteResult[i]);
    }
  }

  public void testProcessBlockFilenameSpecialChars() throws Exception {
    byte[] byteData = new byte[] {};
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    String fileName = "My: File; =Name.xls";
    String testRequest =
      "Content-Disposition: form-data; name=\"theFile\"; filename=\"" + fileName + "\"\r\n" +
      "Content-Type: application/octet-stream\r\n" +
      "\r\n";

    bos.write(testRequest.getBytes());
    bos.write(byteData);
    bos.write('\r');
    bos.write('\n');
    bos.write(TEST_START_BOUNDARY.getBytes());
    bos.write('\r');
    bos.write('\n');

    TestHttpServletRequest request = new TestHttpServletRequest();
    TestServletInputStream stream = new TestServletInputStream();
    request.setContentType(TEST_CONTENT_TYPE);
    stream.setData(bos.toByteArray());
    request.setInputStream(stream);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    parser.setupBoundary();
    parser.processBlock();
    assertEquals(fileName, parser.getParameter("theFile_FileName"));
  }

  public void testProcessBlockSmallBinaryFile() throws Exception {
    byte[] byteData = new byte[] {
      20,0,55,-127,115,22,15,12,10,-102,26,-98,82,-126,-127,0,0,10,10,0
    };
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    String testRequest =
      "Content-Disposition: form-data; name=\"theFile\"; filename=\"\"\r\n" +
      "Content-Type: application/octet-stream\r\n" +
      "\r\n";

    bos.write(testRequest.getBytes());
    bos.write(byteData);
    bos.write('\r');
    bos.write('\n');
    bos.write(TEST_START_BOUNDARY.getBytes());
    bos.write('\r');
    bos.write('\n');

    TestHttpServletRequest request = new TestHttpServletRequest();
    TestServletInputStream stream = new TestServletInputStream();
    request.setContentType(TEST_CONTENT_TYPE);
    stream.setData(bos.toByteArray());
    request.setInputStream(stream);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    parser.setupBoundary();
    parser.processBlock();
    assertEquals("", parser.getParameter("theFile_FileName"));
    assertEquals("application/octet-stream", parser.getParameter("theFile_ContentType"));
    assertEquals("", parser.getParameter("theFile"));
    assertTrue("Expected NOT end of data", !parser.isEndOfData());
    byte[] byteResult = parser.getParameterByteArray("theFile_ByteArray");
    assertEquals("Byte Array Size", byteData.length, byteResult.length);
    for (int i = 0; i < byteData.length; i++) {
      assertEquals("Byte @" + i, byteData[i], byteResult[i]);
    }
  }

  public void testProcessBlockLargeBinaryFile() throws Exception {
    byte[] byteData = new byte[250000];
    Random random = new Random(6995);
    random.nextBytes(byteData);

    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    String testRequest =
      "Content-Disposition: form-data; name=\"theFile\"; filename=\"\"\r\n" +
      "Content-Type: application/octet-stream\r\n" +
      "\r\n";

    bos.write(testRequest.getBytes());
    bos.write(byteData);
    bos.write('\r');
    bos.write('\n');
    bos.write(TEST_START_BOUNDARY.getBytes());
    bos.write('\r');
    bos.write('\n');

    TestHttpServletRequest request = new TestHttpServletRequest();
    TestServletInputStream stream = new TestServletInputStream();
    request.setContentType(TEST_CONTENT_TYPE);
    stream.setData(bos.toByteArray());
    request.setInputStream(stream);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    parser.setupBoundary();
    parser.processBlock();
    assertEquals("", parser.getParameter("theFile_FileName"));
    assertEquals("application/octet-stream", parser.getParameter("theFile_ContentType"));
    assertEquals("", parser.getParameter("theFile"));
    assertTrue("Expected NOT end of data", !parser.isEndOfData());
    byte[] byteResult = parser.getParameterByteArray("theFile_ByteArray");
    assertEquals("Byte Array Size", byteData.length, byteResult.length);
    for (int i = 0; i < byteData.length; i++) {
      assertEquals("Byte @" + i, byteData[i], byteResult[i]);
    }
  }

  public void testProcessBlockNotLastFilename() throws Exception {
    String testValue =
        "R & B Project\r\n" +
        "-------------\r\n" +
        "\r\n" +
        "History of project\r\n" +
        "        Development of SRS TO-02-0259 $34K\r\n" +
        "        System Design & Mentoring TO-02-0440 $40K\r\n" +
        "        Implementation & Mentoring Phase I TO-02-0491 $51K\r\n" +
        "        Implementation & Mentoring Phase II TO-02-0513 $55K\r\n" +
        "   Future of Project\r\n" +
        "        Implementation & Mentoring Phase III TO-02-0000 $50K (estimate)\r\n" +
        "\r\n";
    String testRequest =
      "Content-Disposition: form-data; name=\"theFile\"; filename=\"RBProjectPresentation.txt\"\r\n" +
      "Content-Type: text/plain\r\n" +
      "\r\n" +
      testValue + "\r\n" +
      TEST_START_BOUNDARY + "\r\n";
    TestHttpServletRequest request = new TestHttpServletRequest();
    TestServletInputStream stream = new TestServletInputStream();
    request.setContentType(TEST_CONTENT_TYPE);
    stream.setData(testRequest.getBytes());
    request.setInputStream(stream);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    parser.setupBoundary();

    parser.processBlock();
    assertEquals("RBProjectPresentation.txt", parser.getParameter("theFile_FileName"));
    assertEquals("text/plain", parser.getParameter("theFile_ContentType"));
    assertEquals(testValue, parser.getParameter("theFile"));
    assertTrue("Expected NOT end of data", !parser.isEndOfData());
  }

  public void testProcessBlockSmallHtmlFile() throws Exception {
    String testValue =
        "<html>\r\n" +
        "<head><title>Retirement and Benefits SBS Project</title></head>\r\n" +
        "<body>\r\n" +
        "  <h1>History of project</h1>\r\n" +
        "  <ul>\r\n" +
        "    <li>Development of SRS TO-02-0259 $34K</li>\r\n" +
        "    <li>System Design & Mentoring TO-02-0440 $40K</li>\r\n" +
        "    <li>Implementation & Mentoring Phase I TO-02-0491 $51K</li>\r\n" +
        "    <li>Implementation & Mentoring Phase II TO-02-0513 $55K</li>\r\n" +
        "  </ul>\r\n" +
        "  <h1>Future of Project</h1>\r\n" +
        "  <ul>\r\n" +
        "    <li>Implementation & Mentoring Phase III TO-02-0000 $50K (estimate)</li>\r\n" +
        "  </ul>\r\n" +
        "</body>\r\n" +
        "</html>\r\n" +
        "\r\n";
    String testRequest =
      "Content-Disposition: form-data; name=\"theFile\"; filename=\"RBProjectPresentation.html\"\r\n" +
      "Content-Type: text/html\r\n" +
      "\r\n" +
      testValue + "\r\n" +
      TEST_START_BOUNDARY + "\r\n";
    TestHttpServletRequest request = new TestHttpServletRequest();
    TestServletInputStream stream = new TestServletInputStream();
    request.setContentType(TEST_CONTENT_TYPE);
    stream.setData(testRequest.getBytes());
    request.setInputStream(stream);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    parser.setupBoundary();

    parser.processBlock();
    assertEquals("RBProjectPresentation.html", parser.getParameter("theFile_FileName"));
    assertEquals("text/html", parser.getParameter("theFile_ContentType"));
    assertEquals(testValue, parser.getParameter("theFile"));
    assertTrue("Expected NOT end of data", !parser.isEndOfData());
  }

  public void testParseRequest() throws Exception {
    String testValue =
        "R & B Project\r\n" +
        "-------------\r\n" +
        "\r\n" +
        "History of project\r\n" +
        "        Development of SRS TO-02-0259 $34K\r\n" +
        "        System Design & Mentoring TO-02-0440 $40K\r\n" +
        "        Implementation & Mentoring Phase I TO-02-0491 $51K\r\n" +
        "        Implementation & Mentoring Phase II TO-02-0513 $55K\r\n" +
        "   Future of Project\r\n" +
        "        Implementation & Mentoring Phase III TO-02-0000 $50K (estimate)\r\n" +
        "\r\n";
    String testRequest =
      TEST_START_BOUNDARY + "\r\n" +
      "Content-Disposition: form-data; name=\"email\"\r\n" +
      "\r\n" +
      "anyone@anywhere.com\r\n" +
      TEST_START_BOUNDARY + "\r\n" +
      "Content-Disposition: form-data; name=\"theFile\"; filename=\"RBProjectPresentation.txt\"\r\n" +
      "Content-Type: text/plain\r\n" +
      "\r\n" +
      testValue + "\r\n" +
      TEST_START_BOUNDARY + "\r\n" +
      "Content-Disposition: form-data; name=\"action\"\r\n" +
      "\r\n" +
      "Send\r\n" +
      TEST_START_BOUNDARY + "--\r\n";
    TestHttpServletRequest request = new TestHttpServletRequest();
    TestServletInputStream stream = new TestServletInputStream();
    request.setContentType(TEST_CONTENT_TYPE);
    stream.setData(testRequest.getBytes());
    request.setInputStream(stream);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    parser.setupBoundary();

    parser.parseRequest();
    assertEquals("anyone@anywhere.com", parser.getParameter("email"));
    assertEquals("RBProjectPresentation.txt", parser.getParameter("theFile_FileName"));
    assertEquals("text/plain", parser.getParameter("theFile_ContentType"));
    assertEquals(testValue, parser.getParameter("theFile"));
    assertEquals("Send", parser.getParameter("action"));
    assertTrue("Expected end of data", parser.isEndOfData());
  }

  public void testParseRequestExceedMaxLineLength() throws Exception {
    char[] longLine = new char[4099];
    Arrays.fill(longLine, 'x');
    longLine[4097] = '\r';
    longLine[4098] = '\n';
    String testValue = String.valueOf(longLine);
    testValue += testValue + testValue + testValue + testValue + "\r\n";
    String testRequest =
      TEST_START_BOUNDARY + "\r\n" +
      "Content-Disposition: form-data; name=\"theFile\"; filename=\"LongLines.txt\"\r\n" +
      "Content-Type: text/plain\r\n" +
      "\r\n" +
      testValue + "\r\n" +
      TEST_START_BOUNDARY + "--\r\n";
    TestHttpServletRequest request = new TestHttpServletRequest();
    TestServletInputStream stream = new TestServletInputStream();
    request.setContentType(TEST_CONTENT_TYPE);
    stream.setData(testRequest.getBytes());
    request.setInputStream(stream);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    try {
      parser.parseRequest();
      fail("Expected to exceed max line length");
    } catch (MultiPartRequestSizeException ex) {
      assertEquals("Exception message",
          "Maximum line length exceeded for value named: theFile",
          ex.getMessage());
    }
  }

  public void testParseRequestExceedMaxFileSize() throws Exception {
    byte[] byteData = new byte[64000];
    Random random = new Random(6995);
    random.nextBytes(byteData);

    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    String testRequest =
      TEST_START_BOUNDARY + "\r\n";
    bos.write(testRequest.getBytes());

    testRequest =
      "Content-Disposition: form-data; name=\"theFile\"; filename=\"data.dat\"\r\n" +
      "Content-Type: application/octet-stream\r\n" +
      "\r\n";
    bos.write(testRequest.getBytes());
    bos.write(byteData);
    bos.write('\r');
    bos.write('\n');

    testRequest =
      TEST_START_BOUNDARY + "\r\n" +
      "Content-Disposition: form-data; name=\"action\"\r\n" +
      "\r\n" +
      "Send\r\n" +
      TEST_START_BOUNDARY + "--\r\n";
    bos.write(testRequest.getBytes());

    TestHttpServletRequest request = new TestHttpServletRequest();
    TestServletInputStream stream = new TestServletInputStream();
    request.setContentType(TEST_CONTENT_TYPE);
    stream.setData(bos.toByteArray());
    request.setInputStream(stream);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);
    parser.setMaxFileSize(63999);
    try {
      parser.parseRequest();
      fail("Expected to exceed max file size");
    } catch (MultiPartRequestSizeException ex) {
      assertEquals("Exception message",
          "Maximum file size exceeded for value named: theFile",
          ex.getMessage());
    }
  }

  public void testParseRequestBinaryFile() throws Exception {
    byte[] byteData = new byte[64000];
    Random random = new Random(6995);
    random.nextBytes(byteData);

    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    String testRequest =
      TEST_START_BOUNDARY + "\r\n" +
      "Content-Disposition: form-data; name=\"email\"\r\n" +
      "\r\n" +
      "anyone@anywhere.com\r\n" +
      TEST_START_BOUNDARY + "\r\n";
    bos.write(testRequest.getBytes());

    testRequest =
      "Content-Disposition: form-data; name=\"theFile\"; filename=\"data.dat\"\r\n" +
      "Content-Type: application/octet-stream\r\n" +
      "\r\n";
    bos.write(testRequest.getBytes());
    bos.write(byteData);
    bos.write('\r');
    bos.write('\n');

    testRequest =
      TEST_START_BOUNDARY + "\r\n" +
      "Content-Disposition: form-data; name=\"action\"\r\n" +
      "\r\n" +
      "Send\r\n" +
      TEST_START_BOUNDARY + "--\r\n";
    bos.write(testRequest.getBytes());

    TestHttpServletRequest request = new TestHttpServletRequest();
    TestServletInputStream stream = new TestServletInputStream();
    request.setContentType(TEST_CONTENT_TYPE);
    stream.setData(bos.toByteArray());
    request.setInputStream(stream);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);

    parser.parseRequest();
    assertEquals("anyone@anywhere.com", parser.getParameter("email"));
    assertEquals("data.dat", parser.getParameter("theFile_FileName"));
    assertEquals("application/octet-stream", parser.getParameter("theFile_ContentType"));
    assertEquals("", parser.getParameter("theFile"));
    assertEquals("Send", parser.getParameter("action"));
    byte[] byteResult = parser.getParameterByteArray("theFile_ByteArray");
    assertEquals("Byte Array Size", byteData.length, byteResult.length);
    for (int i = 0; i < byteData.length; i++) {
      assertEquals("Byte @" + i, byteData[i], byteResult[i]);
    }
    assertTrue("Expected end of data", parser.isEndOfData());
  }

  public void testParseRequestMultiValue() throws Exception {
    String testValue =
        "R & B Project\r\n" +
        "-------------\r\n" +
        "\r\n" +
        "History of project\r\n" +
        "        Development of SRS TO-02-0259 $34K\r\n" +
        "        System Design & Mentoring TO-02-0440 $40K\r\n" +
        "        Implementation & Mentoring Phase I TO-02-0491 $51K\r\n" +
        "        Implementation & Mentoring Phase II TO-02-0513 $55K\r\n" +
        "   Future of Project\r\n" +
        "        Implementation & Mentoring Phase III TO-02-0000 $50K (estimate)\r\n" +
        "\r\n";
    String testValue2 =
        "Another File\r\n" +
        "-------------\r\n" +
        "\r\n" +
        "Present for project\r\n" +
        "        Implementation & Mentoring Phase III TO-02-0563 $55K\r\n" +
        "\r\n";
    String[] expectedColors = new String[] {"red","green","blue"};
    String[] expectedFileNames = new String[] {
        "RBProjectPresentation.txt","AnotherPresentation.txt"};
    String[] expectedFileContents = new String[] {testValue, testValue2};

    String testRequest =
        TEST_START_BOUNDARY + "\r\n" +
        "Content-Disposition: form-data; name=\"email\"\r\n" +
        "\r\n" +
        "anyone@anywhere.com\r\n";

    for (int i = 0; i < expectedColors.length; i++) {
      testRequest += TEST_START_BOUNDARY + "\r\n" +
          "Content-Disposition: form-data; name=\"color\"\r\n" +
          "\r\n" +
          expectedColors[i] + "\r\n";
    }
    for (int i = 0; i < expectedFileNames.length; i++) {
      testRequest += TEST_START_BOUNDARY + "\r\n" +
          "Content-Disposition: form-data; name=\"theFile\"; filename=\"" +
          expectedFileNames[i] + "\"\r\n" +
          "Content-Type: text/plain\r\n" +
          "\r\n" +
          expectedFileContents[i] + "\r\n";
    }
    testRequest += TEST_START_BOUNDARY + "\r\n" +
        "Content-Disposition: form-data; name=\"action\"\r\n" +
        "\r\n" +
        "Send\r\n" +
        TEST_START_BOUNDARY + "--\r\n";

    TestHttpServletRequest request = new TestHttpServletRequest();
    TestServletInputStream stream = new TestServletInputStream();
    request.setContentType(TEST_CONTENT_TYPE);
    stream.setData(testRequest.getBytes());
    request.setInputStream(stream);
    HttpMultiPartServletRequest parser = new HttpMultiPartServletRequest(request);

    parser.parseRequest();
    assertEquals("anyone@anywhere.com", parser.getParameter("email"));
    assertEquals("RBProjectPresentation.txt", parser.getParameter("theFile_FileName"));
    assertEquals("text/plain", parser.getParameter("theFile_ContentType"));
    assertEquals(testValue, parser.getParameter("theFile"));
    assertEquals("Send", parser.getParameter("action"));
    assertEquals("single color", "red", parser.getParameter("color"));
    String[] colors = parser.getParameterValues("color");
    assertEquals("Number of colors", expectedColors.length, colors.length);
    for (int i = 0; i < colors.length; i++) {
      assertEquals("array color", expectedColors[i], colors[i]);
    }
    String[] filenames = parser.getParameterValues("theFile_FileName");
    assertEquals("Number of file names", expectedFileNames.length, filenames.length);
    for (int i = 0; i < filenames.length; i++) {
      assertEquals("filename", expectedFileNames[i], filenames[i]);
    }
    String[] fileContents = parser.getParameterValues("theFile");
    assertEquals("Number of file contents", expectedFileContents.length, fileContents.length);
    for (int i = 0; i < fileContents.length; i++) {
      assertEquals("fileContents", expectedFileContents[i], fileContents[i]);
    }

    assertTrue("Expected end of data", parser.isEndOfData());
  }

  public static void main(String[] argv) {
    String[] testCaseList = {HttpMultiPartServletRequestTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.servlet.test.ServletFormTest
```java
package com.taursys.servlet.test;

import junit.framework.TestCase;
import com.taursys.servlet.*;
import java.util.*;

public class ServletFormTest extends TestCase {

  public ServletFormTest(String _name) {
    super(_name);
  }

  protected void setUp() {
  }

  protected void tearDown() {
  }

  public void testCreateParameterMap() {
    ServletForm form = new ServletForm();
    TestHttpServletRequest request = new TestHttpServletRequest();
    request.addParameter("name", "Marty");
    request.addParameter("colors", new String[] {"red","yellow", "green"});
    form.setRequest(request);
    Map map = form.createParameterMap();
    String[] values = (String[])map.get("name");
    assertEquals("name", "Marty", values[0]);
    values = (String[])map.get("colors");
    assertEquals("color 1", "red", values[0]);
    assertEquals("color 2", "yellow", values[1]);
    assertEquals("color 3", "green", values[2]);
  }

  public static void main(String[] argv) {
    String[] testCaseList = {ServletFormTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.servlet.test.TestHttpServletRequest
```java
package com.taursys.servlet.test;

import javax.servlet.ServletRequest;
import java.util.Enumeration;
import javax.servlet.ServletInputStream;
import java.util.Locale;
import java.io.BufferedReader;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import java.io.BufferedReader;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpSession;
import java.security.Principal;
import javax.servlet.http.HttpServletRequest;
import java.util.Map;

public class TestHttpServletRequest extends TestServletRequest implements HttpServletRequest {
  private String contentType = "";
  private BufferedReader reader;
  private ServletInputStream inputStream;

  public TestHttpServletRequest() {
  }

  public String getContentType() {
    return contentType;
  }
  public ServletInputStream getInputStream() throws IOException {
    return inputStream;
  }
  public void setContentType(String newContentType) {
    contentType = newContentType;
  }
  public void setReader(BufferedReader newReader) {
    reader = newReader;
  }
  public void setInputStream(ServletInputStream newInputStream) {
    inputStream = newInputStream;
  }
  public BufferedReader getReader() throws IOException {
    return reader;
  }



  public String getAuthType() {
    throw new java.lang.UnsupportedOperationException("Method getAuthType() not yet implemented.");
  }
  public Cookie[] getCookies() {
    throw new java.lang.UnsupportedOperationException("Method getCookies() not yet implemented.");
  }
  public long getDateHeader(String name) {
    throw new java.lang.UnsupportedOperationException("Method getDateHeader() not yet implemented.");
  }
  public String getHeader(String name) {
    throw new java.lang.UnsupportedOperationException("Method getHeader() not yet implemented.");
  }
  public Enumeration getHeaders(String name) {
    throw new java.lang.UnsupportedOperationException("Method getHeaders() not yet implemented.");
  }
  public Enumeration getHeaderNames() {
    throw new java.lang.UnsupportedOperationException("Method getHeaderNames() not yet implemented.");
  }
  public int getIntHeader(String name) {
    throw new java.lang.UnsupportedOperationException("Method getIntHeader() not yet implemented.");
  }
  public String getMethod() {
    throw new java.lang.UnsupportedOperationException("Method getMethod() not yet implemented.");
  }
  public String getPathInfo() {
    throw new java.lang.UnsupportedOperationException("Method getPathInfo() not yet implemented.");
  }
  public String getPathTranslated() {
    throw new java.lang.UnsupportedOperationException("Method getPathTranslated() not yet implemented.");
  }
  public String getContextPath() {
    throw new java.lang.UnsupportedOperationException("Method getContextPath() not yet implemented.");
  }
  public String getQueryString() {
    throw new java.lang.UnsupportedOperationException("Method getQueryString() not yet implemented.");
  }
  public String getRemoteUser() {
    throw new java.lang.UnsupportedOperationException("Method getRemoteUser() not yet implemented.");
  }
  public boolean isUserInRole(String role) {
    throw new java.lang.UnsupportedOperationException("Method isUserInRole() not yet implemented.");
  }
  public Principal getUserPrincipal() {
    throw new java.lang.UnsupportedOperationException("Method getUserPrincipal() not yet implemented.");
  }
  public String getRequestedSessionId() {
    throw new java.lang.UnsupportedOperationException("Method getRequestedSessionId() not yet implemented.");
  }
  public String getRequestURI() {
    throw new java.lang.UnsupportedOperationException("Method getRequestURI() not yet implemented.");
  }
  public String getServletPath() {
    throw new java.lang.UnsupportedOperationException("Method getServletPath() not yet implemented.");
  }
  public HttpSession getSession(boolean create) {
    throw new java.lang.UnsupportedOperationException("Method getSession() not yet implemented.");
  }
  public HttpSession getSession() {
    throw new java.lang.UnsupportedOperationException("Method getSession() not yet implemented.");
  }
  public boolean isRequestedSessionIdValid() {
    throw new java.lang.UnsupportedOperationException("Method isRequestedSessionIdValid() not yet implemented.");
  }
  public boolean isRequestedSessionIdFromCookie() {
    throw new java.lang.UnsupportedOperationException("Method isRequestedSessionIdFromCookie() not yet implemented.");
  }
  public boolean isRequestedSessionIdFromURL() {
    throw new java.lang.UnsupportedOperationException("Method isRequestedSessionIdFromURL() not yet implemented.");
  }
  public boolean isRequestedSessionIdFromUrl() {
    throw new java.lang.UnsupportedOperationException("Method isRequestedSessionIdFromUrl() not yet implemented.");
  }
  public StringBuffer getRequestURL() {
    throw new java.lang.UnsupportedOperationException("Method getRequestURL() not yet implemented.");
  }
  public void setCharacterEncoding(String encoding) throws java.io.UnsupportedEncodingException {
    throw new java.lang.UnsupportedOperationException("Method setCharacterEncoding() not yet implemented.");
  }
}
```

File: com.taursys.servlet.test.ServletFormFactoryTest
```java
package com.taursys.servlet.test;

import junit.framework.TestCase;
import com.taursys.html.*;
import com.taursys.model.*;
import com.taursys.servlet.*;
import com.taursys.swing.*;
import com.taursys.util.*;
import com.taursys.xml.*;
import java.text.*;
import java.util.*;
import java.math.*;


public class ServletFormFactoryTest extends TestCase {

  public ServletFormFactoryTest(String _name) {
    super(_name);
  }

  protected void setUp() {
  }

  protected void tearDown() {
  }

  public void testCreateServletForm() throws Exception {
    ServletFormFactory factory = new ServletFormFactory();
    ServletForm form = factory.createServletForm(null);
    assertEquals("form class", "com.taursys.servlet.DefaultMessageForm",
        form.getClass().getName());
  }

  public void testRecycleSingle() throws Exception {
    ServletFormFactory factory = new ServletFormFactory();
    ServletForm form = factory.createServletForm(null);
    factory.recycle(form);
    ServletForm form2 = factory.createServletForm(null);
    assertEquals("form instance", form,
        form2);
  }

  public void testRecycleMultiple() throws Exception {
    ServletFormFactory factory = new ServletFormFactory();
    ServletForm form1 = factory.createServletForm(null);
    ServletForm form2 = factory.createServletForm(null);
    factory.recycle(form1);
    factory.recycle(form2);
    ServletForm form3 = factory.createServletForm(null);
    ServletForm form4 = factory.createServletForm(null);
    assertEquals("form instance", form1,
        form3);
    assertEquals("form instance", form2,
        form4);
  }

  public void testParseClassNameDefault() throws Exception {
    ServletFormFactory factory = new ServletFormFactory();
    assertEquals("form name", "com.taursys.servlet.DefaultMessageForm",
        factory.parseClassName(null));
  }

  public void testParseClassNameRoot() throws Exception {
    ServletFormFactory factory = new ServletFormFactory();
    assertEquals("form name", "com.taursys.servlet.DefaultMessageForm",
        factory.parseClassName("/"));
  }

  public void testParseClassNameRootSpecifiedDefaultForm() throws Exception {
    ServletFormFactory factory = new ServletFormFactory();
    factory.setDefaultFormName("x.x.Me");
    assertEquals("form name", "x.x.Me",
        factory.parseClassName("/"));
  }

  public void testParseClassNameRootFormNameShort() throws Exception {
    ServletFormFactory factory = new ServletFormFactory();
    factory.addPackage("/","x.x");
    assertEquals("form name", "x.x.M",
        factory.parseClassName("/M.sf"));
  }

  public void testParseClassNameRootFormNameLong() throws Exception {
    ServletFormFactory factory = new ServletFormFactory();
    factory.addPackage("/","x.x");
    assertEquals("form name", "x.x.EditForm",
        factory.parseClassName("/EditForm.sf"));
  }

  public void testParseClassNamePathFormName() throws Exception {
    ServletFormFactory factory = new ServletFormFactory();
    factory.addPackage("/admin","x.x");
    assertEquals("form name", "x.x.EditForm",
        factory.parseClassName("/admin/EditForm.sf"));
  }

  public void testParseClassNamePathFormNameAltSuffix() throws Exception {
    ServletFormFactory factory = new ServletFormFactory();
    factory.addPackage("/admin","x.x");
    factory.setServletFormSuffix(".form");
    assertEquals("form name", "x.x.EditForm",
        factory.parseClassName("/admin/EditForm.form"));
  }

  public void testParseClassNamePathFormNameNoSuffix() throws Exception {
    ServletFormFactory factory = new ServletFormFactory();
    factory.addPackage("/admin","x.x");
    factory.setServletFormSuffix("");
    assertEquals("form name", "x.x.EditForm",
        factory.parseClassName("/admin/EditForm"));
  }

  public void testAddPackageNoEndingSlash() throws Exception {
    ServletFormFactory factory = new ServletFormFactory();
    factory.addPackage("/admin","x.x");
    factory.setServletFormSuffix("");
    assertEquals("form name", "x.x.EditForm",
        factory.parseClassName("/admin/EditForm"));
  }

  public void testAddPackageWithEndingSlash() throws Exception {
    ServletFormFactory factory = new ServletFormFactory();
    factory.addPackage("/admin/","x.x");
    factory.setServletFormSuffix("");
    assertEquals("form name", "x.x.EditForm",
        factory.parseClassName("/admin/EditForm"));
  }

  public static void main(String[] argv) {
    String[] testCaseList = {ServletFormFactoryTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.servlet.test.ServletInputDispatcherTest
```java
package com.taursys.servlet.test;

import junit.framework.TestCase;
import com.taursys.servlet.ServletInputDispatcher;
import com.taursys.xml.AbstractField;
import com.taursys.xml.event.InputEvent;
import java.text.ParseException;
import com.taursys.xml.event.RenderException;
import com.taursys.xml.event.RenderEvent;

public class ServletInputDispatcherTest extends TestCase {
  protected TestComponent testComponent;
  protected TestServletRequest testRequest;
  protected ServletInputDispatcher dispatcher;

  public ServletInputDispatcherTest(String _name) {
    super(_name);
  }

  protected void setUp() {
    testComponent = new TestComponent();
    testComponent.setParameter("parm1");
    dispatcher = new ServletInputDispatcher();
    testRequest = new TestServletRequest();
  }

  protected void tearDown() {
  }

  public void testDispatchWithValue() throws Exception {
    testRequest.addParameter("parm1", "red");
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(testRequest);
    assertEquals("red",testComponent.getSavedEvent().getValue());
  }

  public void testDispatchWithBlankValue() throws Exception {
    testRequest.addParameter("parm1", "");
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(testRequest);
    assertEquals("",testComponent.getSavedEvent().getValue());
  }

  public void testDispatchWithNullValue() throws Exception {
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(testRequest);
    assertEquals(null,testComponent.getSavedEvent());
  }

  public void testDispatchDefaultWithValue() throws Exception {
    testRequest.addParameter("parm1", "red");
    testComponent.setDefaultValue("green");
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(testRequest);
    assertEquals("red",testComponent.getSavedEvent().getValue());
  }

  public void testDispatchDefaultWithNullValue() throws Exception {
    dispatcher.addNotify(testComponent);
    testComponent.setDefaultValue("green");
    dispatcher.dispatch(testRequest);
    assertEquals("green",testComponent.getSavedEvent().getValue());
  }

  public static void main(String[] argv) {
    String[] testCaseList = {ServletInputDispatcherTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }


  public class TestComponent extends AbstractField {
    private InputEvent savedEvent = null;
    protected void processInputEvent(InputEvent e) throws ParseException {
      savedEvent = e;
    }
    public InputEvent getSavedEvent() {
      return savedEvent;
    }
    public void processRenderEvent(RenderEvent e) throws RenderException {
    }
  }
}
```

File: com.taursys.servlet.test.TestServletRequest
```java
package com.taursys.servlet.test;

import javax.servlet.ServletRequest;
import java.util.Enumeration;
import javax.servlet.ServletInputStream;
import java.util.Locale;
import java.io.BufferedReader;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import java.util.Map;
import java.util.*;

public class TestServletRequest implements ServletRequest {
  private HashMap parameterMap = new HashMap();

  public TestServletRequest() {
  }

  public void addParameter(String key, String value) {
    parameterMap.put(key, new String[] {value});
  }

  public void addParameter(String key, String[] values) {
    parameterMap.put(key, values);
  }


  public String getParameter(String key) {
    String[] values = getParameterValues(key);
    return values == null ? null : values[0];
  }

  public String[] getParameterValues(String key) {
    return (String[])parameterMap.get(key);
  }

  public Enumeration getParameterNames() {
    return Collections.enumeration(parameterMap.keySet());
  }


  public Object getAttribute(String name) {
    throw new java.lang.UnsupportedOperationException("Method getAttribute() not yet implemented.");
  }
  public Enumeration getAttributeNames() {
    throw new java.lang.UnsupportedOperationException("Method getAttributeNames() not yet implemented.");
  }
  public String getCharacterEncoding() {
    throw new java.lang.UnsupportedOperationException("Method getCharacterEncoding() not yet implemented.");
  }
  public int getContentLength() {
    throw new java.lang.UnsupportedOperationException("Method getContentLength() not yet implemented.");
  }
  public String getContentType() {
    throw new java.lang.UnsupportedOperationException("Method getContentType() not yet implemented.");
  }
  public ServletInputStream getInputStream() throws IOException {
    throw new java.lang.UnsupportedOperationException("Method getInputStream() not yet implemented.");
  }
  public String getProtocol() {
    throw new java.lang.UnsupportedOperationException("Method getProtocol() not yet implemented.");
  }
  public String getScheme() {
    throw new java.lang.UnsupportedOperationException("Method getScheme() not yet implemented.");
  }
  public String getServerName() {
    throw new java.lang.UnsupportedOperationException("Method getServerName() not yet implemented.");
  }
  public int getServerPort() {
    throw new java.lang.UnsupportedOperationException("Method getServerPort() not yet implemented.");
  }
  public BufferedReader getReader() throws IOException {
    throw new java.lang.UnsupportedOperationException("Method getReader() not yet implemented.");
  }
  public String getRemoteAddr() {
    throw new java.lang.UnsupportedOperationException("Method getRemoteAddr() not yet implemented.");
  }
  public String getRemoteHost() {
    throw new java.lang.UnsupportedOperationException("Method getRemoteHost() not yet implemented.");
  }
  public void setAttribute(String name, Object o) {
    throw new java.lang.UnsupportedOperationException("Method setAttribute() not yet implemented.");
  }
  public void removeAttribute(String name) {
    throw new java.lang.UnsupportedOperationException("Method removeAttribute() not yet implemented.");
  }
  public Locale getLocale() {
    throw new java.lang.UnsupportedOperationException("Method getLocale() not yet implemented.");
  }
  public Enumeration getLocales() {
    throw new java.lang.UnsupportedOperationException("Method getLocales() not yet implemented.");
  }
  public boolean isSecure() {
    throw new java.lang.UnsupportedOperationException("Method isSecure() not yet implemented.");
  }
  public RequestDispatcher getRequestDispatcher(String path) {
    throw new java.lang.UnsupportedOperationException("Method getRequestDispatcher() not yet implemented.");
  }
  public String getRealPath(String path) {
    throw new java.lang.UnsupportedOperationException("Method getRealPath() not yet implemented.");
  }
  public StringBuffer getRequestURL() {
    throw new java.lang.UnsupportedOperationException("Method getRequestURL() not yet implemented.");
  }
  public void setCharacterEncoding(String encoding) throws java.io.UnsupportedEncodingException {
    throw new java.lang.UnsupportedOperationException("Method setCharacterEncoding() not yet implemented.");
  }
  public Map getParameterMap() {
    throw new java.lang.UnsupportedOperationException("Method getParameterMap() not yet implemented.");
  }
}
```

File: com.taursys.servlet.test.ServletParameterDispatcherTest
```java
package com.taursys.servlet.test;

import junit.framework.TestCase;
import com.taursys.servlet.ServletParameterDispatcher;
import com.taursys.xml.Parameter;
import com.taursys.xml.event.ParameterEvent;
import java.text.ParseException;

public class ServletParameterDispatcherTest extends TestCase {
  protected TestParameter testParm;
  protected TestServletRequest testRequest;
  protected ServletParameterDispatcher dispatcher;

  public ServletParameterDispatcherTest(String _name) {
    super(_name);
  }

  protected void setUp() {
    testParm = new TestParameter();
    testParm.setParameter("parm1");
    dispatcher = new ServletParameterDispatcher();
    testRequest = new TestServletRequest();
  }

  protected void tearDown() {
  }

  public void testDispatchWithValue() throws Exception {
    testRequest.addParameter("parm1", "red");
    dispatcher.addNotify(testParm);
    dispatcher.dispatch(testRequest);
    assertEquals("red",testParm.getSavedEvent().getValue());
  }

  public void testDispatchWithBlankValue() throws Exception {
    testRequest.addParameter("parm1", "");
    dispatcher.addNotify(testParm);
    dispatcher.dispatch(testRequest);
    assertEquals("",testParm.getSavedEvent().getValue());
  }

  public void testDispatchWithNullValue() throws Exception {
    dispatcher.addNotify(testParm);
    dispatcher.dispatch(testRequest);
    assertEquals(null,testParm.getSavedEvent());
  }

  public void testDispatchDefaultWithValue() throws Exception {
    testRequest.addParameter("parm1", "red");
    testParm.setDefaultValue("green");
    dispatcher.addNotify(testParm);
    dispatcher.dispatch(testRequest);
    assertEquals("red",testParm.getSavedEvent().getValue());
  }

  public void testDispatchDefaultWithNullValue() throws Exception {
    dispatcher.addNotify(testParm);
    testParm.setDefaultValue("green");
    dispatcher.dispatch(testRequest);
    assertEquals("green",testParm.getSavedEvent().getValue());
  }

  public static void main(String[] argv) {
    String[] testCaseList = {ServletParameterDispatcherTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }


  public class TestParameter extends Parameter {
    private ParameterEvent savedEvent = null;
    protected void processParameterEvent(ParameterEvent e) throws ParseException {
      savedEvent = e;
    }
    public ParameterEvent getSavedEvent() {
      return savedEvent;
    }
  }
}
```

File: com.taursys.servlet.respond.ContentResponder
```java
package com.taursys.servlet.respond;

public abstract class ContentResponder extends AbstractResponder {
  private String contentType = "text/html";

  public ContentResponder() {
  }

  public void setContentType(String newContentType) {
    contentType = newContentType;
  }

  public String getContentType() {
    return contentType;
  }
}
```

File: com.taursys.servlet.respond.AbstractResponder
```java
package com.taursys.servlet.respond;

import com.taursys.servlet.ServletForm;

public abstract class AbstractResponder implements Responder {
  private ServletForm servletForm;

  public AbstractResponder() {
  }

  public abstract void respond() throws Exception;

  public ServletForm getServletForm() {
    return servletForm;
  }

  public void setServletForm(ServletForm newServletForm) {
    servletForm = newServletForm;
  }
}
```

File: com.taursys.servlet.respond.NoResponseResponder
```java
package com.taursys.servlet.respond;

import com.taursys.servlet.ServletForm;

public class NoResponseResponder extends AbstractResponder {
  private ServletForm servletForm;

  public NoResponseResponder() {
  }

  public void respond() throws Exception {
  }
}
```

File: com.taursys.servlet.respond.HTMLResponder
```java
package com.taursys.servlet.respond;

import com.taursys.servlet.ServletForm;
import com.taursys.xml.event.RenderEvent;
import com.taursys.xml.event.RenderDispatcher;

public class HTMLResponder extends ContentResponder {

  public HTMLResponder() {
    setContentType("text/html");
  }

  public void respond() throws Exception {
    ((RenderDispatcher)getServletForm().getDispatcher(
        RenderEvent.class.getName())).dispatch();
    getServletForm().getResponse().setContentType(getContentType());
    getServletForm().getDocumentAdapter().write(
        getServletForm().getResponse().getWriter());
  }
}
```

File: com.taursys.servlet.respond.ClientRedirectResponder
```java
package com.taursys.servlet.respond;

import com.taursys.servlet.ServletForm;

public class ClientRedirectResponder extends AbstractResponder {
  private String redirectURL;

  public ClientRedirectResponder() {
  }

  public ClientRedirectResponder(String redirectURL) {
    this.redirectURL = redirectURL;
  }

  public void respond() throws Exception {
    getServletForm().getResponse().sendRedirect(redirectURL);
  }

  public void setRedirectURL(String newRedirectURL) {
    redirectURL = newRedirectURL;
  }

  public String getRedirectURL() {
    return redirectURL;
  }
}
```

File: com.taursys.servlet.respond.ErrorResponder
```java
package com.taursys.servlet.respond;

import com.taursys.servlet.ServletForm;

public class ErrorResponder extends AbstractResponder {
  private int statusCode;
  private String message;

  public ErrorResponder() {
  }

  public ErrorResponder(int statusCode) {
    this.statusCode = statusCode;
  }

  public ErrorResponder(int statusCode, String message) {
    this.statusCode = statusCode;
    this.message = message;
  }

  public void respond() throws Exception {
    if (message == null) {
      getServletForm().getResponse().sendError(statusCode);
    }
    else {
      getServletForm().getResponse().sendError(statusCode, message);
    }
  }

  public void setStatusCode(int newStatusCode) {
    statusCode = newStatusCode;
  }

  public int getStatusCode() {
    return statusCode;
  }

  public void setMessage(String newMessage) {
    message = newMessage;
  }

  public String getMessage() {
    return message;
  }
}
```

File: com.taursys.servlet.respond.StreamResponder
```java
package com.taursys.servlet.respond;

import com.taursys.servlet.ServletForm;
import java.io.*;
import javax.servlet.http.*;
import javax.servlet.*;

public class StreamResponder extends ContentResponder {
  private java.io.InputStream inputStream;

  public StreamResponder() {
  }

  public void respond() throws Exception {
    getServletForm().getResponse().setContentType(getContentType());
    OutputStream out = getServletForm().getResponse().getOutputStream();
    byte[] bytes = new byte[1024];
    int count;
    count = inputStream.read(bytes);
    while(count > 0) {
      out.write(bytes, 0, count);
      out.flush();
      count = inputStream.read(bytes);
    }
    inputStream.close();
  }

  public void setInputStream(java.io.InputStream newInputStream) {
    inputStream = newInputStream;
  }

  public java.io.InputStream getInputStream() {
    return inputStream;
  }
}
```

File: com.taursys.servlet.respond.Responder
```java
package com.taursys.servlet.respond;

import com.taursys.servlet.ServletForm;

public interface Responder {

  public void respond() throws Exception;

  public void setServletForm(ServletForm newServletForm);
}
```

File: com.taursys.tools.MainFrame_AboutBox
```java
package com.taursys.tools;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

public class MainFrame_AboutBox extends JDialog implements ActionListener {

  JPanel panel1 = new JPanel();
  JPanel panel2 = new JPanel();
  JPanel insetsPanel1 = new JPanel();
  JPanel insetsPanel2 = new JPanel();
  JPanel insetsPanel3 = new JPanel();
  JButton button1 = new JButton();
  JLabel imageLabel = new JLabel();
  JLabel label1 = new JLabel();
  JLabel label2 = new JLabel();
  JLabel label3 = new JLabel();
  JLabel label4 = new JLabel();
  BorderLayout borderLayout1 = new BorderLayout();
  BorderLayout borderLayout2 = new BorderLayout();
  FlowLayout flowLayout1 = new FlowLayout();
  GridLayout gridLayout1 = new GridLayout();
  String product = "Mapper";
  String version = "2.0";
  String copyright = "Copyright (c) 2002, Martin T Phelan";
  String comments = "Presentation Framework for Web & GUI Applications";
  JLabel jLabel1 = new JLabel();
  public MainFrame_AboutBox(Frame parent) {
    super(parent);
    enableEvents(AWTEvent.WINDOW_EVENT_MASK);
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
    pack();
  }
  private void jbInit() throws Exception  {
    this.setSize(460, 170);
    imageLabel.setPreferredSize(new Dimension(48, 48));
    imageLabel.setIcon(new ImageIcon(MainFrame_AboutBox.class.getResource("XMLInputComponent.gif")));
    this.setTitle("About");
    setResizable(false);
    panel1.setLayout(borderLayout1);
    panel2.setLayout(borderLayout2);
    insetsPanel1.setLayout(flowLayout1);
    insetsPanel2.setLayout(flowLayout1);
    insetsPanel2.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
    gridLayout1.setRows(5);
    gridLayout1.setColumns(1);
    label1.setText("Mapper Code Wizard");
    label2.setText("0.9");
    label3.setText(copyright);
    label4.setText("Web & GUI Applications");
    insetsPanel3.setLayout(gridLayout1);
    insetsPanel3.setBorder(BorderFactory.createEmptyBorder(10, 60, 10, 10));
    button1.setText("Ok");
    button1.addActionListener(this);
    jLabel1.setText("Presentation Framework for");
    insetsPanel2.add(imageLabel, null);
    panel2.add(insetsPanel2, BorderLayout.WEST);
    this.getContentPane().add(panel1, null);
    insetsPanel3.add(label1, null);
    insetsPanel3.add(label2, null);
    insetsPanel3.add(label3, null);
    insetsPanel3.add(jLabel1, null);
    insetsPanel3.add(label4, null);
    panel2.add(insetsPanel3, BorderLayout.CENTER);
    insetsPanel1.add(button1, null);
    panel1.add(insetsPanel1, BorderLayout.SOUTH);
    panel1.add(panel2, BorderLayout.NORTH);
  }
  protected void processWindowEvent(WindowEvent e) {
    if (e.getID() == WindowEvent.WINDOW_CLOSING) {
      cancel();
    }
    super.processWindowEvent(e);
  }
  void cancel() {
    dispose();
  }
  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == button1) {
      cancel();
    }
  }
}
```

File: com.taursys.tools.ServletAppWizard
```java
package com.taursys.tools;

import org.apache.velocity.VelocityContext;

public class ServletAppWizard extends WizardDialog {
  private static String
      TEMPLATE_NAME = "com/taursys/tools/templates/SimpleServletApp.template";

  public ServletAppWizard(Settings projectSettings, CodeGenerator generator) {
    super(projectSettings, generator);
  }

  public void invokeWizard() {
    resetContext();
    wizardPanel.removeAll();
    setTemplateName(TEMPLATE_NAME);
    addPage(new ClassInfoPanel());
    super.invokeWizard();
  }
}
```

File: com.taursys.tools.JEditableComboBox
```java
package com.taursys.tools;

import javax.swing.JComboBox;
import javax.swing.JTextField;
import java.awt.Component;

public class JEditableComboBox extends JComboBox {

  public JEditableComboBox() {
    setEditable(true);
  }

  public String getText() {
    Component[] guts = this.getComponents();
    for(int i=0;i<guts.length;i++) {
      if (guts[i].getClass().getName().equals("javax.swing.JTextField")) {
        return ((JTextField)guts[i]).getText();
      }
    }
    System.err.println("com.taursys.tools.JEditableComboBox.getText "
        + "Debug warning - cannot access JTextField subcomponent");
    return "";
  }


  public void setText(String text) {
    setSelectedItem(text);
  }
}
```

File: com.taursys.tools.WizardDialog
```java
package com.taursys.tools;

import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.awt.event.*;
import java.io.*;
import org.apache.velocity.VelocityContext;
import com.taursys.debug.Debug;

public class WizardDialog extends JDialog {
  BorderLayout borderLayout1 = new BorderLayout();
  JPanel wizardPanel = new JPanel();
  JPanel controlPanel = new JPanel();
  JButton jbBack = new JButton();
  JButton jbNext = new JButton();
  JButton jbFinish = new JButton();
  JButton jbCancel = new JButton();
  protected Settings settings;
  private CodeGenerator generator;
  private ArrayList pages = new ArrayList();
  private int currentPage = -1;
  private String templateName;
  private VelocityContext context = new VelocityContext();

  public WizardDialog(Settings settings, CodeGenerator generator) {
    this.settings = settings;
    this.generator = generator;
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  private void jbInit() throws Exception {
    this.getContentPane().setLayout(borderLayout1);
    jbBack.setMnemonic('B');
    jbBack.setText("< Back");
    jbBack.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        jbBack_actionPerformed(e);
      }
    });
    jbNext.setMnemonic('N');
    jbNext.setText("Next >");
    jbNext.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        jbNext_actionPerformed(e);
      }
    });
    jbFinish.setMnemonic('F');
    jbFinish.setText("Finish");
    jbFinish.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        jbFinish_actionPerformed(e);
      }
    });
    jbCancel.setMnemonic('C');
    jbCancel.setText("Cancel");
    jbCancel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        jbCancel_actionPerformed(e);
      }
    });
    this.getContentPane().add(wizardPanel, BorderLayout.CENTER);
    this.getContentPane().add(controlPanel, BorderLayout.SOUTH);
    controlPanel.add(jbBack, null);
    controlPanel.add(jbNext, null);
    controlPanel.add(jbFinish, null);
    controlPanel.add(jbCancel, null);
  }

  public void addPage(WizardPanel page) {
    page.setContext(context);
    pages.add(page);
  }

  public void invokeWizard() {
    currentPage = 0;
    setSize(500,500);
    wizardPanel.add((JPanel)pages.get(currentPage));
    jbBack.setEnabled(false);
    jbNext.setEnabled(pages.size() > 1);
    setVisible(true);
  }

  void jbNext_actionPerformed(ActionEvent e) {
    try {
      ((WizardPanel)pages.get(currentPage)).checkPage();
    } catch (Exception ex) {
      return;
    }
    wizardPanel.remove((JPanel)pages.get(currentPage));
    currentPage++;
    wizardPanel.add((JPanel)pages.get(currentPage));
    wizardPanel.revalidate();
    wizardPanel.repaint();
    jbBack.setEnabled(true);
    jbNext.setEnabled(pages.size() > currentPage + 1);
  }

  void jbBack_actionPerformed(ActionEvent e) {
    wizardPanel.remove((JPanel)pages.get(currentPage));
    currentPage--;
    wizardPanel.add((JPanel)pages.get(currentPage));
    wizardPanel.repaint();
    jbBack.setEnabled(currentPage > 0);
    jbNext.setEnabled(true);
  }

  protected void resetContext() {
    context = new VelocityContext();
    context.put("_author", settings.getProperty(UserSettings.AUTHOR));
    context.put("_copyright", settings.getProperty(UserSettings.COPYRIGHT));
  }

  void jbFinish_actionPerformed(ActionEvent e) {
    try {
      ((WizardPanel)pages.get(currentPage)).checkPage();
    } catch (Exception ex) {
      return;
    }
    try {
      String className = (String)context.get(ClassInfoPanel.CLASS_NAME);
      String packageName = (String)context.get(ClassInfoPanel.PACKAGE_NAME);
      String srcPath = settings.getProperty(ProjectSettings.SOURCE_PATH);
      generator.generateCode(
          templateName, context, srcPath, packageName, className);
      JOptionPane.showMessageDialog(this, "Complete");
      jbCancel_actionPerformed(e);
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this, "Problem during generating code: "
          + ex.getMessage(), "Mapper CodeGen Error", JOptionPane.ERROR_MESSAGE);
      Debug.error("Problem during generating code", ex);
    }
  }

  void jbCancel_actionPerformed(ActionEvent e) {
    pages.clear();
    currentPage = -1;
    setVisible(false);
  }

  public void setTemplateName(String newTemplateName) {
    templateName = newTemplateName;
  }

  public String getTemplateName() {
    return templateName;
  }

  public org.apache.velocity.VelocityContext getContext() {
    return context;
  }

  public void setContext(org.apache.velocity.VelocityContext newContext) {
    context = newContext;
  }

}
```

File: com.taursys.tools.CodeGen
```java
package com.taursys.tools;

import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.io.*;
import com.taursys.debug.Debug;

public class CodeGen {
  boolean packFrame = false;

  public CodeGen() {
    Settings settings = new UserSettings();
    try {
      settings.loadSettings();
    } catch (IOException ex) {
      Debug.error("Problem loading CodeGen settings", ex);
      JOptionPane.showMessageDialog(null,
          "Problem loading CodeGen properties: " + ex.getMessage(),
          "Mapper CodeGen Error", JOptionPane.ERROR_MESSAGE);
    }
    CodeGenerator generator = CodeGenerator.getInstance();
    try {
      generator.setProperties(settings.getProperties());
      generator.initialize();
    } catch (Exception ex) {
      Debug.error("Problem loading CodeGen settings", ex);
      JOptionPane.showMessageDialog(null,
          "Problem initializing code generator: " + ex.getMessage(),
          "Mapper CodeGen Error", JOptionPane.ERROR_MESSAGE);
    }
    MainFrame frame = new MainFrame(settings, generator);
    if (packFrame) {
      frame.pack();
    }
    else {
      frame.validate();
    }
    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    Dimension frameSize = frame.getSize();
    if (frameSize.height > screenSize.height) {
      frameSize.height = screenSize.height;
    }
    if (frameSize.width > screenSize.width) {
      frameSize.width = screenSize.width;
    }
    frame.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
    frame.setVisible(true);
  }

  public static void main(String[] args) {
    try {
      String laf = UIManager.getSystemLookAndFeelClassName();
      UIManager.setLookAndFeel(laf);
    }
    catch(Exception e) {
      e.printStackTrace();
    }
    new CodeGen();
  }
}
```

File: com.taursys.tools.MainFrame
```java
package com.taursys.tools;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import com.taursys.swing.*;
import javax.swing.filechooser.*;
import java.io.*;
import com.taursys.debug.Debug;

public class MainFrame extends JFrame {
  Settings settings = null;
  CodeGenerator generator = null;
  Settings projectSettings;
  JPanel contentPane;
  JMenuBar jMenuBar1 = new JMenuBar();
  JMenu jMenuFile = new JMenu();
  JMenuItem jMenuFileExit = new JMenuItem();
  JMenu jMenuHelp = new JMenu();
  JMenuItem jMenuHelpAbout = new JMenuItem();
  JLabel statusBar = new JLabel();
  BorderLayout borderLayout1 = new BorderLayout();
  JPanel servletsPanel = new JPanel();
  JMenuItem jMenuFileUserSettings = new JMenuItem();
  JMenuItem jMenuFileNewProject = new JMenuItem();
  JMenuItem jMenuFileOpenProject = new JMenuItem();
  JMenu jMenuWizards = new JMenu();
  JMenuItem jMenuWizardsServletForm = new JMenuItem();
  JMenuItem jMenuWizardsServletApp = new JMenuItem();
  private JMenuItem jMenuWizardsValueObject = new JMenuItem();

  public MainFrame(Settings settings, CodeGenerator generator) {
    this.generator = generator;
    this.settings = settings;
    enableEvents(AWTEvent.WINDOW_EVENT_MASK);
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  private void jbInit() throws Exception  {
    contentPane = (JPanel) this.getContentPane();
    contentPane.setLayout(borderLayout1);
    this.setSize(new Dimension(400, 300));
    this.setTitle("Mapper CodeGen");
    statusBar.setText(" ");
    jMenuFile.setMnemonic('F');
    jMenuFile.setText("File");
    jMenuFileExit.setMnemonic('X');
    jMenuFileExit.setText("Exit");
    jMenuFileExit.addActionListener(new ActionListener()  {
      public void actionPerformed(ActionEvent e) {
        jMenuFileExit_actionPerformed(e);
      }
    });
    jMenuHelp.setMnemonic('H');
    jMenuHelp.setText("Help");
    jMenuHelpAbout.setMnemonic('A');
    jMenuHelpAbout.setText("About");
    jMenuHelpAbout.addActionListener(new ActionListener()  {
      public void actionPerformed(ActionEvent e) {
        jMenuHelpAbout_actionPerformed(e);
      }
    });
    jMenuFileUserSettings.setMnemonic('U');
    jMenuFileUserSettings.setText("User Settings");
    jMenuFileUserSettings.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        jMenuFileUserSettings_actionPerformed(e);
      }
    });
    jMenuFileNewProject.setMnemonic('N');
    jMenuFileNewProject.setText("New Project");
    jMenuFileNewProject.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        jMenuFileNewProject_actionPerformed(e);
      }
    });
    jMenuFileOpenProject.setMnemonic('O');
    jMenuFileOpenProject.setText("Open Project");
    jMenuFileOpenProject.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        jMenuFileOpenProject_actionPerformed(e);
      }
    });
    jMenuWizardsServletForm.setMnemonic('F');
    jMenuWizardsServletForm.setText("ServletForm");
    jMenuWizardsServletForm.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        jMenuWizardsServletForm_actionPerformed(e);
      }
    });
    jMenuWizardsServletApp.setMnemonic('A');
    jMenuWizardsServletApp.setText("ServletApp");
    jMenuWizardsServletApp.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        jMenuWizardsServletApp_actionPerformed(e);
      }
    });
    jMenuWizards.setEnabled(false);
    jMenuWizards.setMnemonic('Z');
    jMenuWizards.setText("Wizards");
    jMenuWizardsValueObject.setMnemonic('V');
    jMenuWizardsValueObject.setText("ValueObject");
    jMenuWizardsValueObject.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        jMenuWizardsValueObject_actionPerformed(e);
      }
    });
    jMenuFile.add(jMenuFileNewProject);
    jMenuFile.add(jMenuFileOpenProject);
    jMenuFile.addSeparator();
    jMenuFile.add(jMenuFileUserSettings);
    jMenuFile.addSeparator();
    jMenuFile.add(jMenuFileExit);
    jMenuHelp.add(jMenuHelpAbout);
    jMenuBar1.add(jMenuFile);
    jMenuBar1.add(jMenuWizards);
    jMenuBar1.add(jMenuHelp);
    this.setJMenuBar(jMenuBar1);
    contentPane.add(statusBar, BorderLayout.SOUTH);
    contentPane.add(servletsPanel, BorderLayout.CENTER);
    jMenuWizards.add(jMenuWizardsServletForm);
    jMenuWizards.add(jMenuWizardsServletApp);
    jMenuWizards.add(jMenuWizardsValueObject);
  }
  public void jMenuFileExit_actionPerformed(ActionEvent e) {
    System.exit(0);
  }
  public void jMenuHelpAbout_actionPerformed(ActionEvent e) {
    MainFrame_AboutBox dlg = new MainFrame_AboutBox(this);
    Dimension dlgSize = dlg.getPreferredSize();
    Dimension frmSize = getSize();
    Point loc = getLocation();
    dlg.setLocation((frmSize.width - dlgSize.width) / 2 + loc.x, (frmSize.height - dlgSize.height) / 2 + loc.y);
    dlg.setModal(true);
    dlg.show();
  }
  protected void processWindowEvent(WindowEvent e) {
    super.processWindowEvent(e);
    if (e.getID() == WindowEvent.WINDOW_CLOSING) {
      jMenuFileExit_actionPerformed(null);
    }
  }

  void jButton1_actionPerformed(ActionEvent e) {
    ServletFormWizard servletFormWizard = new ServletFormWizard(settings, generator);
    servletFormWizard.invokeWizard();
  }

  void jMenuFileUserSettings_actionPerformed(ActionEvent e) {
    UserSettingsDialog dialog = new UserSettingsDialog(this, settings);
    dialog.show();
  }

  void jMenuFileNewProject_actionPerformed(ActionEvent e) {
    Settings pj = new ProjectSettings(settings);
    ProjectSettingsDialog dialog = new ProjectSettingsDialog(this, pj);
    int exitState = dialog.showDialog();
    if (exitState == JOptionPane.OK_OPTION) {
      projectSettings = pj;
      jMenuWizards.setEnabled(true);
    }
  }

  public static String getExtension(File f) {
    String ext = null;
    String s = f.getName();
    int i = s.lastIndexOf('.');
    if (i > 0 && i < s.length() - 1) {
      ext = s.substring(i+1).toLowerCase();
    }
    return ext;
  }

  public static class MapperProjectFileFilter extends javax.swing.filechooser.FileFilter {
    public boolean accept(File f) {
      return (f.isDirectory() || ("mpj".equals(getExtension(f))));
    }

    public String getDescription() {
      return "Mapper Project";
    }
  }

  void jMenuFileOpenProject_actionPerformed(ActionEvent e) {
    JFileChooser chooser = new JFileChooser(
        settings.getProperty(UserSettings.DEFAULT_PROJECT_PATH));
    chooser.setFileFilter(new MapperProjectFileFilter());
    chooser.setDialogTitle("Mapper Project");
    if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
      File selection = chooser.getSelectedFile();
      try {
        projectSettings = new ProjectSettings(settings);
        projectSettings.loadSettings(selection);
        jMenuWizards.setEnabled(true);
      } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, "Problem during loading settings: "
            + ex.getMessage(), "Mapper CodeGen Error", JOptionPane.ERROR_MESSAGE);
        Debug.error("Problem during saving settings", ex);
      }
    }
  }


  void jMenuWizardsServletForm_actionPerformed(ActionEvent e) {
    WizardDialog wizard =
        new ServletFormWizard(projectSettings, generator);
    wizard.invokeWizard();
  }

  void jMenuWizardsServletApp_actionPerformed(ActionEvent e) {
    WizardDialog wizard =
        new ServletAppWizard(projectSettings, generator);
    wizard.invokeWizard();
  }

  void jMenuWizardsValueObject_actionPerformed(ActionEvent e) {
    WizardDialog wizard =
        new ValueObjectWizard(projectSettings, generator);
    wizard.invokeWizard();
  }

}
```

File: com.taursys.tools.WizardPanel
```java
package com.taursys.tools;

import javax.swing.JPanel;
import org.apache.velocity.VelocityContext;

public class WizardPanel extends JPanel {
  private VelocityContext context;

  public WizardPanel() {
  }

  public void checkPage() throws Exception {
  }

  public void setContext(VelocityContext context) {
    this.context = context;
  }

  public VelocityContext getContext() {
    return context;
  }

  public void putContext(String key, Object value) {
    context.put(key, value);
  }
}
```

File: com.taursys.tools.ValueObjectPropertyInfoPanel
```java
package com.taursys.tools;

import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.border.*;
import org.apache.velocity.VelocityContext;
import com.taursys.swing.*;
import com.taursys.model.*;
import java.util.*;

public class ValueObjectPropertyInfoPanel extends WizardPanel {
  public static final String PROPERTY_LIST = "propertyList";
  private JScrollPane holdersScrollPane = new JScrollPane();
  private MTable propertiesTable = new MTable();
  private VOListValueHolder holder = new VOListValueHolder(new Vector());
  private JLabel nameLabel = new JLabel();
  private JLabel typeLabel = new JLabel();
  private JLabel classLabel = new JLabel();
  private MTextField nameField = new MTextField();
  private MTextField typeField = new MTextField();
  private MTextField getSetDescriptionField = new MTextField();
  private JButton addButton = new JButton();
  private MButton removeButton = new MButton();
  private DefaultTableCellRenderer cellRenderer = null;
  private MTableColumn propertyNameColumn = new MTableColumn();
  private MTableColumn propertyTypeColumn = new MTableColumn();
  private GridBagLayout gridBagLayout1 = new GridBagLayout();

  public ValueObjectPropertyInfoPanel() {
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  private void jbInit() throws Exception {
    holder.setValueObjectClass(com.taursys.tools.ValueObjectPropertyInfo.class);
    propertiesTable.setListValueHolder(holder);
    this.setLayout(gridBagLayout1);
    nameLabel.setText("Name:");
    typeLabel.setText("Type:");
    classLabel.setText("Description:");
    addButton.setText("Add");
    addButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        addButton_actionPerformed(e);
      }
    });
    removeButton.setText("Remove");
    removeButton.setValueHolder(holder);
    removeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        removeButton_actionPerformed(e);
      }
    });
    nameField.setPropertyName("propertyName");
    nameField.setValueHolder(holder);
    nameField.setToolTipText("the name of this property");
    typeField.setPropertyName("propertyType");
    typeField.setValueHolder(holder);
    typeField.setToolTipText("the primative type or Object type of this property");
    getSetDescriptionField.setPropertyName("getSetDescription");
    getSetDescriptionField.setValueHolder(holder);
    getSetDescriptionField.setToolTipText("Description for get, set, param, and return JavaDoc");
    propertyNameColumn.setPreferredWidth(80);
    propertyNameColumn.setDisplayHeading("Name");
    propertyNameColumn.setPropertyName("propertyName");
    propertyNameColumn.setValueHolder(holder);
    propertiesTable.addColumn(propertyNameColumn);
    propertyTypeColumn.setDisplayHeading("Type");
    propertyTypeColumn.setPropertyName("propertyType");
    propertiesTable.addColumn(propertyTypeColumn);
    this.add(holdersScrollPane, new GridBagConstraints(0, 4, 4, 1, 1.0, 1.0
            ,GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(8, 17, 17, 22), -92, -273));
    this.add(addButton, new GridBagConstraints(1, 3, 2, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(14, 0, 0, 66), 8, 0));
    this.add(removeButton, new GridBagConstraints(3, 3, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(13, 0, 0, 94), 0, 0));
    this.add(typeField, new GridBagConstraints(2, 1, 2, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(15, 9, 0, 49), 246, 0));
    this.add(getSetDescriptionField, new GridBagConstraints(2, 2, 2, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(15, 8, 0, 49), 247, 0));
    this.add(classLabel, new GridBagConstraints(0, 2, 2, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(18, 17, 0, 0), 0, 0));
    this.add(nameField, new GridBagConstraints(2, 0, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(19, 10, 0, 0), 117, 0));
    this.add(typeLabel, new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(17, 53, 0, 0), 0, 0));
    this.add(nameLabel, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(19, 52, 0, 0), 0, 0));
    holdersScrollPane.getViewport().add(propertiesTable, null);
  }

  void addButton_actionPerformed(ActionEvent e) {
    holder.add(new ValueObjectPropertyInfo());
  }

  void removeButton_actionPerformed(ActionEvent e) {
    holder.remove();
  }

  private String checkForErrors() {
    String errorMessages = "";
    return errorMessages;
  }

  public void checkPage() throws Exception {
    String errorMessages = checkForErrors();
    if (errorMessages.length()!=0) {
        errorMessages,
        "Errors Encountered",
        JOptionPane.ERROR_MESSAGE,
        null);
      throw new Exception();
    }
    putContext(PROPERTY_LIST, holder.getList());
  }

  static public void main(String[] args) {
    try {
      JFrame frame = new JFrame();
      ValueObjectPropertyInfoPanel panel = new ValueObjectPropertyInfoPanel();
      frame.setSize(400,400);
      frame.getContentPane().add(panel);
      frame.setVisible(true);
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }
}
```

File: com.taursys.tools.ClassInfoPanel
```java
package com.taursys.tools;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.border.*;
import org.apache.velocity.VelocityContext;

public class ClassInfoPanel extends WizardPanel {
  JPanel jPanel7 = new JPanel();
  JLabel jLabel1 = new JLabel();
  JTextField jtfClassName = new JTextField();
  JLabel jLabel2 = new JLabel();
  Border border1;
  TitledBorder titledBorder1;
  JButton jbSelectPackage = new JButton();
  JTextField jtfPackageName = new JTextField();
  GridBagLayout gridBagLayout1 = new GridBagLayout();
  public static final String CLASS_NAME = "className";
  public static final String PACKAGE_NAME = "packageName";

  public ClassInfoPanel() {
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  private void jbInit() throws Exception {
    border1 = BorderFactory.createLineBorder(Color.white,1);
    titledBorder1 = new TitledBorder(BorderFactory.createLineBorder(Color.white,1),"Class Information:");
    jtfPackageName.setPreferredSize(new Dimension(350, 22));
    jtfPackageName.setToolTipText("Package name");
    jLabel1.setHorizontalAlignment(SwingConstants.RIGHT);
    jLabel1.setText("Package:");
    jtfClassName.setPreferredSize(new Dimension(140, 22));
    jtfClassName.setToolTipText("Class name");
    jLabel2.setPreferredSize(new Dimension(113, 18));
    jLabel2.setHorizontalAlignment(SwingConstants.RIGHT);
    jLabel2.setText("Class name:");
    jPanel7.setLayout(gridBagLayout1);
    jPanel7.setBorder(titledBorder1);
    jPanel7.setMinimumSize(new Dimension(480, 150));
    jPanel7.setPreferredSize(new Dimension(480, 150));
    jbSelectPackage.setEnabled(false);
    jbSelectPackage.setToolTipText("Select Package");
    jbSelectPackage.setText("Select Package");
    this.add(jPanel7, null);
    jPanel7.add(jtfPackageName, new GridBagConstraints(1, 0, 1, 2, 1.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(6, 10, 39, 0), -28, 2));
    jPanel7.add(jbSelectPackage, new GridBagConstraints(2, 0, 1, 2, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(6, 12, 39, 16), -103, -1));
    jPanel7.add(jtfClassName, new GridBagConstraints(1, 1, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(20, 10, 0, 178), 4, 2));
    jPanel7.add(jLabel2, new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(22, 2, 0, 0), -27, 0));
    jPanel7.add(jLabel1, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(6, 2, 0, 0), 33, 0));
  }

  private String getPackageName() {
    String pkgName = jtfPackageName.getText();
    return pkgName;
  }

  private String checkForErrors() {
    String errorMessages = "";
    return errorMessages;
  }

  public void checkPage() throws Exception {
    String errorMessages = checkForErrors();
    if (errorMessages.length()!=0) {
        errorMessages,
        "Errors Encountered",
        JOptionPane.ERROR_MESSAGE,
        null);
      throw new Exception();
    }
    putContext(PACKAGE_NAME, getPackageName());
    putContext(CLASS_NAME, jtfClassName.getText());
  }

}
```

File: com.taursys.tools.ValueObjectPropertyInfo
```java
package com.taursys.tools;

public class ValueObjectPropertyInfo {
  private String propertyName;
  private String propertyType;
  private int binding;
  private boolean getter;
  private boolean setter;
  private boolean expose;
  private String displayName;
  private String toolTip;
  private String getSetDescription;
  private String longDescription;

  public ValueObjectPropertyInfo() {
  }

  public String getInstanceVarDeclSourceCode() {
    return "private " + propertyType + " " + propertyName;
  }

  public String getPropertyNameCapitalized() {
    return propertyName.substring(0,1).toUpperCase() + propertyName.substring(1);
  }
  public String getPropertyName() {
    return propertyName;
  }
  public void setPropertyName(String newPropertyName) {
    propertyName = newPropertyName;
  }
  public void setPropertyType(String newPropertyType) {
    propertyType = newPropertyType;
  }
  public String getPropertyType() {
    return propertyType;
  }
  public void setBinding(int newBinding) {
    binding = newBinding;
  }
  public int getBinding() {
    return binding;
  }
  public void setGetter(boolean newGetter) {
    getter = newGetter;
  }
  public boolean isGetter() {
    return getter;
  }
  public void setSetter(boolean newSetter) {
    setter = newSetter;
  }
  public boolean isSetter() {
    return setter;
  }
  public void setExpose(boolean newExpose) {
    expose = newExpose;
  }
  public boolean isExpose() {
    return expose;
  }
  public void setDisplayName(String newDisplayName) {
    displayName = newDisplayName;
  }
  public String getDisplayName() {
    return displayName;
  }
  public void setToolTip(String newToolTip) {
    toolTip = newToolTip;
  }
  public String getToolTip() {
    return toolTip;
  }
  public void setGetSetDescription(String newGetSetDescription) {
    getSetDescription = newGetSetDescription;
  }
  public String getGetSetDescription() {
    return getSetDescription;
  }
  public void setLongDescription(String newLongDescription) {
    longDescription = newLongDescription;
  }
  public String getLongDescription() {
    return longDescription;
  }
}
```

File: com.taursys.tools.ValueHolderInfoPanel
```java
package com.taursys.tools;

import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.border.*;
import org.apache.velocity.VelocityContext;
import com.taursys.swing.*;
import com.taursys.model.*;
import java.util.*;

public class ValueHolderInfoPanel extends WizardPanel {
  public static final String HOLDER_LIST = "holderList";
  private JScrollPane holdersScrollPane = new JScrollPane();
  private MTable holdersTable = new MTable();
  private VOListValueHolder holder = new VOListValueHolder(new Vector());
  private JLabel nameLabel = new JLabel();
  private JLabel aliasLabel = new JLabel();
  private JLabel typeLabel = new JLabel();
  private JLabel classLabel = new JLabel();
  private MTextField nameField = new MTextField();
  private MTextField alialField = new MTextField();
  private MTextField typeField = new MTextField();
  private MTextField classField = new MTextField();
  private JButton addButton = new JButton();
  private MButton removeButton = new MButton();
  private DefaultTableCellRenderer cellRenderer = null;
  private MTableColumn holderNameColumn = new MTableColumn();
  private MTableColumn holderAliasColumn = new MTableColumn();
  private GridBagLayout gridBagLayout1 = new GridBagLayout();

  public ValueHolderInfoPanel() {
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  private void jbInit() throws Exception {
    holder.setValueObjectClass(com.taursys.tools.ValueHolderInfo.class);
    holdersTable.setListValueHolder(holder);
    this.setLayout(gridBagLayout1);
    nameLabel.setText("Name:");
    aliasLabel.setText("Alias:");
    typeLabel.setText("Type:");
    classLabel.setText("Class:");
    addButton.setText("Add");
    addButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        addButton_actionPerformed(e);
      }
    });
    removeButton.setText("Remove");
    removeButton.setValueHolder(holder);
    removeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        removeButton_actionPerformed(e);
      }
    });
    nameField.setPropertyName("holderName");
    nameField.setValueHolder(holder);
    nameField.setToolTipText("Instance variable name for holder in code");
    alialField.setPropertyName("holderAlias");
    alialField.setValueHolder(holder);
    alialField.setToolTipText("Name used in html/xml document ID\'s for auto-binding.");
    typeField.setPropertyName("holderType");
    typeField.setValueHolder(holder);
    typeField.setToolTipText("Class of holder. Must subclass com.taursys.model.ValueHolder");
    classField.setPropertyName("containedClassName");
    classField.setValueHolder(holder);
    classField.setToolTipText("Class contained by holder(needed by VOValueHolder\'s)");
    holderNameColumn.setPreferredWidth(80);
    holderNameColumn.setDisplayHeading("Name");
    holderNameColumn.setPropertyName("holderName");
    holderNameColumn.setValueHolder(holder);
    holderNameColumn.setHeaderValue("Holder Name");
    holdersTable.addColumn(holderNameColumn);
    holderAliasColumn.setDisplayHeading("Alias");
    holderAliasColumn.setPropertyName("holderAlias");
    holdersTable.addColumn(holderAliasColumn);
    this.add(holdersScrollPane, new GridBagConstraints(0, 4, 4, 1, 1.0, 1.0
            ,GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(8, 17, 17, 22), -85, -271));
    this.add(addButton, new GridBagConstraints(1, 3, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(14, 26, 0, 52), 0, 0));
    this.add(removeButton, new GridBagConstraints(2, 3, 2, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(13, 37, 0, 94), 0, 0));
    this.add(typeLabel, new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(14, 23, 0, 0), 0, 0));
    this.add(typeField, new GridBagConstraints(1, 1, 3, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(12, 8, 0, 49), 290, 0));
    this.add(classField, new GridBagConstraints(1, 2, 3, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(15, 8, 0, 49), 290, 0));
    this.add(classLabel, new GridBagConstraints(0, 2, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(17, 17, 0, 0), 0, 0));
    this.add(nameField, new GridBagConstraints(1, 0, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(22, 8, 0, 0), 125, 0));
    this.add(nameLabel, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(22, 17, 0, 0), 0, 0));
    this.add(alialField, new GridBagConstraints(3, 0, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(22, 7, 0, 22), 125, 0));
    this.add(aliasLabel, new GridBagConstraints(2, 0, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(22, 21, 0, 0), 0, 0));
    holdersScrollPane.getViewport().add(holdersTable, null);
  }

  void addButton_actionPerformed(ActionEvent e) {
    holder.add(new ValueHolderInfo("com.taursys.model.VOValueHolder",
         null, "holder"+holder.size(), null));
  }

  void removeButton_actionPerformed(ActionEvent e) {
    holder.remove();
  }

  private String checkForErrors() {
    String errorMessages = "";
    return errorMessages;
  }

  public void checkPage() throws Exception {
    String errorMessages = checkForErrors();
    if (errorMessages.length()!=0) {
        errorMessages,
        "Errors Encountered",
        JOptionPane.ERROR_MESSAGE,
        null);
      throw new Exception();
    }
    putContext(HOLDER_LIST, holder.getList());
  }

  static public void main(String[] args) {
    try {
      JFrame frame = new JFrame();
      ValueHolderInfoPanel panel = new ValueHolderInfoPanel();
      frame.setSize(400,400);
      frame.getContentPane().add(panel);
      frame.setVisible(true);
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }
}
```

File: com.taursys.tools.ValueObjectWizard
```java
package com.taursys.tools;

import org.apache.velocity.VelocityContext;

public class ValueObjectWizard extends com.taursys.tools.WizardDialog {
  private static String
      TEMPLATE_NAME = "com/taursys/tools/templates/ValueObject.template";

  public ValueObjectWizard(Settings projectSettings, CodeGenerator generator) {
    super(projectSettings, generator);
  }

  public void invokeWizard() {
    resetContext();
    wizardPanel.removeAll();
    setTemplateName(TEMPLATE_NAME);
    addPage(new ClassInfoPanel());
    addPage(new ValueObjectPropertyInfoPanel());
    super.invokeWizard();
  }

  static public void main(String[] args) {
    try {
      Settings settings = new UserSettings();
      settings.setProperty(ProjectSettings.SOURCE_PATH,
          System.getProperty("user.home") + "/tmp");
      CodeGenerator generator = CodeGenerator.getInstance();
      generator.setProperties(settings.getProperties());
      generator.initialize();
      WizardDialog wizard =
        new ValueObjectWizard(settings, generator);
      wizard.invokeWizard();
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }
}
```

File: com.taursys.tools.ProjectSettings
```java
package com.taursys.tools;

import java.util.*;
import java.io.*;
import com.taursys.debug.Debug;

public class ProjectSettings extends Settings {
  public static final String PROP_FILE_NAME = "project.mpj";
  public static final String PROJECT_PATH = "projectPath";
  public static final String SOURCE_PATH = "sourcePath";
  private UserSettings userSettings;

  public ProjectSettings(Settings userSettings) {
    super("Mapper CodeGen Project Settings");
    properties = new Properties(userSettings.getProperties());
    properties.setProperty(PROJECT_PATH,
        userSettings.getProperty(UserSettings.DEFAULT_PROJECT_PATH));
    properties.setProperty(SOURCE_PATH, "");
  }

  protected String getPropertyFilePath() {
    return properties.getProperty(PROJECT_PATH);
  }

  protected String getPropertyFileName() {
    String propertyFilePath = properties.getProperty(PROJECT_PATH);
    if (propertyFilePath.endsWith("/"))
      return propertyFilePath + PROP_FILE_NAME;
    else
      return propertyFilePath + "/" + PROP_FILE_NAME;
  }
}
```

File: com.taursys.tools.UserSettingsDialog
```java
package com.taursys.tools;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import com.taursys.debug.Debug;

public class UserSettingsDialog extends javax.swing.JDialog {
  JPanel contentPanel = new JPanel();
  JPanel buttonPanel = new JPanel();
  JButton saveButton = new JButton();
  JButton cancelButton = new JButton();
  JTextField author = new JTextField();
  JTextField copyright = new JTextField();
  JTextField defaultProjectPath = new JTextField();
  JLabel authorLabel = new JLabel();
  JLabel copyrightLabel = new JLabel();
  JLabel defaultProjectPathLabel = new JLabel();
  JTextField templatesPath = new JTextField();
  JLabel templatesPathLabel = new JLabel();
  GridBagLayout gridBagLayout1 = new GridBagLayout();
  Settings settings;

  public UserSettingsDialog(Frame parent, Settings settings) {
    super(parent, "Mapper Code Generator Settings", true);
    this.settings = settings;
    try {
      jbInit();
      author.setText(settings.getProperty(UserSettings.AUTHOR));
      copyright.setText(settings.getProperty(UserSettings.COPYRIGHT));
      defaultProjectPath.setText(settings.getProperty(UserSettings.DEFAULT_PROJECT_PATH));
      templatesPath.setText(settings.getProperty(UserSettings.TEMPLATES_PATH));
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  private void jbInit() throws Exception {
    saveButton.setText("Save");
    saveButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        saveButton_actionPerformed(e);
      }
    });
    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        cancelButton_actionPerformed(e);
      }
    });
    contentPanel.setLayout(gridBagLayout1);
    authorLabel.setText("Author:");
    copyrightLabel.setText("Copyright:");
    defaultProjectPathLabel.setText("Default project path:");

    templatesPathLabel.setText("Templates path:");
    this.setSize(new Dimension(450, 300));
    this.getContentPane().add(contentPanel, BorderLayout.CENTER);
    contentPanel.add(author, new GridBagConstraints(1, 0, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(35, 8, 0, 70), 159, 0));
    contentPanel.add(defaultProjectPath, new GridBagConstraints(1, 2, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(12, 8, 0, 70), 159, 0));
    contentPanel.add(authorLabel, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(35, 113, 0, 0), 0, 0));
    contentPanel.add(copyrightLabel, new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(12, 94, 0, 0), 0, 0));
    contentPanel.add(templatesPath, new GridBagConstraints(1, 3, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(11, 8, 123, 70), 159, 0));
    contentPanel.add(templatesPathLabel, new GridBagConstraints(0, 3, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(13, 59, 123, 0), 0, 0));
    contentPanel.add(copyright, new GridBagConstraints(1, 1, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(10, 8, 0, 70), 159, 0));
    contentPanel.add(defaultProjectPathLabel, new GridBagConstraints(0, 2, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(14, 29, 0, 6), 0, 0));
    this.getContentPane().add(buttonPanel, BorderLayout.SOUTH);
    buttonPanel.add(saveButton, null);
    buttonPanel.add(cancelButton, null);
  }

  void cancelButton_actionPerformed(ActionEvent e) {
    dispose();
  }

  void saveButton_actionPerformed(ActionEvent e) {
    settings.setProperty(UserSettings.AUTHOR, author.getText());
    settings.setProperty(UserSettings.COPYRIGHT, copyright.getText());
    settings.setProperty(UserSettings.DEFAULT_PROJECT_PATH,
        defaultProjectPath.getText());
    settings.setProperty(UserSettings.TEMPLATES_PATH, templatesPath.getText());
    try {
      settings.saveSettings();
    } catch (IOException ex) {
      JOptionPane.showMessageDialog(this, "Problem during saving settings: "
          + ex.getMessage(), "Mapper CodeGen Error", JOptionPane.ERROR_MESSAGE);
      Debug.error("Problem during saving settings", ex);
    }
    dispose();
  }
}
```

File: com.taursys.tools.ProjectSettingsDialog
```java
package com.taursys.tools;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import com.taursys.debug.Debug;

public class ProjectSettingsDialog extends JDialog {
  JPanel contentPanel = new JPanel();
  JPanel buttonPanel = new JPanel();
  JButton saveButton = new JButton();
  JButton cancelButton = new JButton();
  JTextField sourcePath = new JTextField();
  JLabel sourcePathLabel = new JLabel();
  Settings settings = null;
  JTextField projectPath = new JTextField();
  JLabel jLabel1 = new JLabel();
  private int exitState = JOptionPane.CANCEL_OPTION;
  GridBagLayout gridBagLayout1 = new GridBagLayout();

  public ProjectSettingsDialog(Frame parent, Settings settings) {
    super(parent, "Mapper Code Generator Project Settings", true);
    this.settings = settings;
    try {
      jbInit();
      sourcePath.setText(settings.getProperty(ProjectSettings.SOURCE_PATH));
      projectPath.setText(settings.getProperty(ProjectSettings.PROJECT_PATH));
      projectPath.setInputVerifier(new InputVerifier() {
        public boolean verify(JComponent input) {
          if(sourcePath.getText().length() == 0)
            sourcePath.setText(projectPath.getText() + "/src");
          return true;
        }
      });
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  private void jbInit() throws Exception {
    saveButton.setText("Save");
    saveButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        saveButton_actionPerformed(e);
      }
    });
    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        cancelButton_actionPerformed(e);
      }
    });
    contentPanel.setLayout(gridBagLayout1);
    sourcePathLabel.setText("Source path:");

    this.setSize(new Dimension(450, 300));
    jLabel1.setText("Project path:");
    this.getContentPane().add(contentPanel, BorderLayout.CENTER);
    contentPanel.add(projectPath, new GridBagConstraints(1, 0, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(42, 9, 0, 70), 209, 0));
    contentPanel.add(sourcePath, new GridBagConstraints(1, 1, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(11, 8, 174, 70), 209, 0));
    contentPanel.add(sourcePathLabel, new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(14, 80, 174, 0), 0, 0));
    contentPanel.add(jLabel1, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(42, 80, 0, 0), 0, 0));
    this.getContentPane().add(buttonPanel, BorderLayout.SOUTH);
    buttonPanel.add(saveButton, null);
    buttonPanel.add(cancelButton, null);
  }

  public int showDialog() {
    show();
    return exitState;
  }

  void cancelButton_actionPerformed(ActionEvent e) {
    exitState = JOptionPane.CANCEL_OPTION;
    dispose();
  }

  void saveButton_actionPerformed(ActionEvent e) {
    settings.setProperty(ProjectSettings.SOURCE_PATH, sourcePath.getText());
    settings.setProperty(ProjectSettings.PROJECT_PATH, projectPath.getText());
    try {
      settings.saveSettings();
      exitState = JOptionPane.OK_OPTION;
      dispose();
    } catch (IOException ex) {
      JOptionPane.showMessageDialog(this, "Problem during saving settings: "
          + ex.getMessage(), "Mapper CodeGen Error", JOptionPane.ERROR_MESSAGE);
      Debug.error("Problem during saving settings", ex);
    }
  }
}
```

File: com.taursys.tools.Settings
```java
package com.taursys.tools;

import java.util.*;
import java.io.*;
import com.taursys.debug.Debug;

public abstract class Settings {
  protected java.util.Properties properties;
  private String description;

  public Settings(String description) {
    this.description = description;
  }

  protected abstract String getPropertyFilePath();

  protected abstract String getPropertyFileName();

  public void loadSettings() throws java.io.IOException {
    File propFile = new File(getPropertyFileName());
    loadSettings(propFile);
  }

  public void loadSettings(File propFile) throws java.io.IOException {
    if (propFile.exists()) {
      FileInputStream stream = new FileInputStream(propFile);
      properties.load(stream);
      stream.close();
    }
  }

  public void saveSettings() throws java.io.IOException {
    File propFile = new File(getPropertyFilePath());
    if (!propFile.exists())
      propFile.mkdirs();
    propFile = new File(getPropertyFileName());
    propFile.createNewFile();
    FileOutputStream stream = new FileOutputStream(propFile);
    properties.store(stream, description);
    stream.close();
  }

  public java.util.Properties getProperties() {
    return properties;
  }

  public String getProperty(String key) {
    return properties.getProperty(key);
  }

  public void setProperty(String key, String value) {
    properties.setProperty(key, value);
  }

  public String getDescription() {
    return description;
  }
}
```

File: com.taursys.tools.CodeGenerator
```java
package com.taursys.tools;

import org.apache.velocity.app.VelocityEngine;
import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.context.Context;
import java.io.OutputStreamWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.io.IOException;
import java.util.Properties;

public class CodeGenerator {
  private static CodeGenerator singleton;
  private boolean initialized = false;
  private VelocityEngine velocity = null;
  private Properties properties = new Properties();
  public static final String TEMPLATES_PATH = "templatesPath";

  private CodeGenerator() {
    properties.setProperty(TEMPLATES_PATH, "./");
  }

  public void setProperties(Properties properties) {
    this.properties = properties;
  }

  public static CodeGenerator getInstance() {
    if (singleton == null) {
      singleton = new CodeGenerator();
    }
    return singleton;
  }

  public void initialize() throws Exception {
    if (initialized)
      return;
    velocity = new VelocityEngine();
    velocity.setProperty(VelocityEngine.RUNTIME_LOG_LOGSYSTEM_CLASS,
        "com.taursys.debug.VelocitySimpleLogger");
    velocity.setProperty(VelocityEngine.RESOURCE_LOADER, "class, file");
    velocity.setProperty("class.resource.loader.description",
        "Velocity Classpath Resource Loader");
    velocity.setProperty("class.resource.loader.class",
        "org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader");
    velocity.setProperty("file.resource.loader.description",
        "Velocity File Resource Loader");
    velocity.setProperty("file.resource.loader.class",
        "org.apache.velocity.runtime.resource.loader.FileResourceLoader");
    velocity.setProperty("file.resource.loader.path",
        properties.getProperty(TEMPLATES_PATH));
    velocity.setProperty("file.resource.loader.cache",
        "false");
    velocity.setProperty("file.resource.loader.modificationCheckInterval",
        "2");
    velocity.init();
  }

  public void generateCode(String templateName, Context context, String srcPath,
    String packageName, String className) throws Exception {
    Template t = velocity.getTemplate(templateName);
    FileWriter writer = new FileWriter(createFile(srcPath, packageName, className));
    t.merge(context, writer);
    writer.close();
  }

  private File createFile(String sourcePath, String packageName, String fileName)
      throws IOException {
    if (!sourcePath.endsWith("/"))
      sourcePath += "/";
    if (packageName != null && packageName.length() > 0)
      sourcePath = sourcePath + packageName.replace('.', '/');
    File file = new File(sourcePath);
    if (!file.exists()) {
      if (!file.mkdirs())
        throw new IOException("Creation of path failed: " + file.getAbsolutePath());
    }
    file = new File(sourcePath + "/" + fileName + ".java");
    file.createNewFile();
    return file;
  }
}
```

File: com.taursys.tools.UserSettings
```java
package com.taursys.tools;

import java.util.*;
import java.io.*;
import com.taursys.debug.Debug;

public class UserSettings extends Settings {
  public static final String PROP_FILE_NAME = "user.mpj";
  private String propertyFilePath = System.getProperty("user.home");
  public static final String AUTHOR = "author";
  public static final String COPYRIGHT = "copyright";
  public static final String DEFAULT_PROJECT_PATH = "defaultProjectPath";
  public static final String TEMPLATES_PATH = CodeGenerator.TEMPLATES_PATH;
  public static final String LAST_PROJECT_PATH = "lastProjectPath";

  public UserSettings() {
    super("Mapper CodeGen User Settings");
    Properties defaultProps = new Properties();
    defaultProps.setProperty(AUTHOR, "Your Name Here");
    defaultProps.setProperty(COPYRIGHT,"Copyright (c) " +
          GregorianCalendar.getInstance().get(Calendar.YEAR));
    defaultProps.setProperty(TEMPLATES_PATH,"./");
    defaultProps.setProperty(DEFAULT_PROJECT_PATH, propertyFilePath
        + "/" + "projects");
    defaultProps.setProperty(LAST_PROJECT_PATH, "");
    properties = new Properties(defaultProps);
  }

  protected String getPropertyFilePath() {
    return propertyFilePath;
  }

  protected String getPropertyFileName() {
    if (propertyFilePath.endsWith("/"))
      return propertyFilePath + PROP_FILE_NAME;
    else
      return propertyFilePath + "/" + PROP_FILE_NAME;
  }
}
```

File: com.taursys.tools.ValueHolderInfo
```java
package com.taursys.tools;

import java.util.Vector;

public class ValueHolderInfo {
  private String holderType;
  private String containedClassName;
  private String holderName;
  private String holderAlias;

  public ValueHolderInfo() {
  }

  public ValueHolderInfo(
      String holderType,
      String containedClassName,
      String holderName,
      String holderAlias
      ) {
    this.holderType = holderType;
    this.containedClassName = containedClassName;
    this.holderName = holderName;
    this.holderAlias = holderAlias;
  }

  public String getInstanceVarDeclSourceCode() {
    return "private " + holderType + " " + holderName
        + " = new " + holderType + "()";
  }

  public Vector getJbInitSourceCode() {
    Vector source = new Vector();
    if (containedClassName != null && containedClassName.length() > 0)
      source.add(holderName + ".setValueObjectClass(" + containedClassName + ".class)");
    if (holderAlias != null && holderAlias.length() > 0)
      source.add(holderName + ".setAlias(\"" + holderAlias + "\")");
    return source;
  }

  public String getHolderType() {
    return holderType;
  }

  public void setHolderType(String holderType) {
    this.holderType = holderType;
  }

  public void setContainedClassName(String newContainedClassName) {
    containedClassName = newContainedClassName;
  }

  public String getContainedClassName() {
    return containedClassName;
  }

  public void setHolderName(String newHolderName) {
    holderName = newHolderName;
  }

  public String getHolderName() {
    return holderName;
  }

  public void setHolderAlias(String newHolderAlias) {
    holderAlias = newHolderAlias;
  }

  public String getHolderAlias() {
    return holderAlias;
  }
}
```

File: com.taursys.tools.ServletFormWizard
```java
package com.taursys.tools;

import org.apache.velocity.VelocityContext;

public class ServletFormWizard extends com.taursys.tools.WizardDialog {
  private static String
      TEMPLATE_NAME = "com/taursys/tools/templates/SimpleServletForm.template";

  public ServletFormWizard(Settings projectSettings, CodeGenerator generator) {
    super(projectSettings, generator);
  }

  public void invokeWizard() {
    resetContext();
    wizardPanel.removeAll();
    setTemplateName(TEMPLATE_NAME);
    addPage(new ClassInfoPanel());
    addPage(new ValueHolderInfoPanel());
    super.invokeWizard();
  }

  static public void main(String[] args) {
    try {
      Settings settings = new UserSettings();
      settings.setProperty(ProjectSettings.SOURCE_PATH,
          System.getProperty("user.home") + "/tmp");
      CodeGenerator generator = CodeGenerator.getInstance();
      generator.setProperties(settings.getProperties());
      generator.initialize();
      WizardDialog wizard =
        new ServletFormWizard(settings, generator);
      wizard.invokeWizard();
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }
}
```

File: com.taursys.tools.util.ClassPath
```java
package com.taursys.tools.util;

import javax.swing.tree.DefaultMutableTreeNode;
import java.util.StringTokenizer;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.TreeSet;
import java.util.Enumeration;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.zip.ZipFile;
import com.taursys.debug.Debug;

public class ClassPath {
  private ArrayList paths = new ArrayList();
  private TreeSet entries;
  private DefaultMutableTreeNode classTree = null;
  private DefaultMutableTreeNode packageTree = null;

  public ClassPath() {
  }

  public ClassPath(String classPath) {
    setClassPathString(classPath);
  }

  public void setClassPathString(String classPath) {
    StringTokenizer tokens = new StringTokenizer(classPath, ";");
    while (tokens.hasMoreTokens()) {
      addPath(tokens.nextToken());
    }
  }

  public String getClassPathString() {
    String path = null;
    Iterator iter = paths.iterator();
    while (iter.hasNext()) {
      if (path == null)
        path = "";
      else
        path += ";";
      path += (String)iter.next();
    }
    return path;
  }

  public void addPath(String path) {
    if (!paths.contains(path))
      paths.add(path);
    resetEntries();
  }

  public void removePath(String path) {
    paths.remove(path);
    resetEntries();
  }

  public void setPaths(ArrayList newPaths) {
    paths = newPaths;
    resetEntries();
  }

  public ArrayList getPaths() {
    return new ArrayList(paths);
  }

  public DefaultMutableTreeNode getClassTree() {
    if (classTree == null)
      classTree = getTree(new ClassFilter(), true);
    return classTree;
  }

  public DefaultMutableTreeNode getPackageTree() {
    if (packageTree == null)
      packageTree = getTree(new PackageFilter(), false);
    return packageTree;
  }

  public TreeSet getEntries() {
    if (entries == null)
      getEntriesInPath();
    return entries;
  }

  public void resetPaths() {
    paths.clear();
    resetEntries();
  }


  protected class ClassFilter implements FileFilter {
    public boolean accept(File file) {
      return file.getName().toLowerCase().endsWith(".class")
          && file.getName().indexOf('$') == -1;
    }
  }

  protected class PackageFilter implements FileFilter {
    public boolean accept(File file) {
      return false;
    }
  }

  protected String getTreePath(DefaultMutableTreeNode node) {
    String path = "";
    while (node.getParent() != null) {
      path = node.getUserObject() + "/" + path;
      node = (DefaultMutableTreeNode)node.getParent();
    }
    return path;
  }

  private String removeFileType(String fileName) {
    int pos = fileName.lastIndexOf(".");
    if (pos != -1) {
      return fileName.substring(0, pos);
    } else {
      return fileName;
    }
  }

  public DefaultMutableTreeNode getTree(FileFilter filter, boolean removeFileType) {
    DefaultMutableTreeNode top = new DefaultMutableTreeNode(
        new ClassPathNode());
    DefaultMutableTreeNode parentNode = top;
    DefaultMutableTreeNode child = null;
    int level = 1;
    int parentLength = 0;
    if (entries == null)
      getEntriesInPath();
    Iterator iter = entries.iterator();
    while (iter.hasNext()) {
      String item = (String)iter.next();
      String qualifiedName = item.replace('/', '.');
      StringTokenizer tokens = new StringTokenizer(item, "/");
      int tokenCount = tokens.countTokens();
      if (tokenCount < level) {
        String parentPath = null;
        do {
          level--;
          parentNode = (DefaultMutableTreeNode)parentNode.getParent();
          parentPath = getTreePath(parentNode);
          parentLength = parentPath.length();
        } while (!item.startsWith(parentPath));
      } else if (tokenCount > level) {
        level++;
        parentNode = child;
        parentLength = getTreePath(parentNode).length();
      }
      if (item.endsWith("/")) {
        if (parentLength < 0) {
          Debug.debug("ClassPath.getTree Index out of range: item="
              + item + " parentLength=" + parentLength + " level=" + level);
        } else {
          item = item.substring(parentLength, item.length() - 1);
        }
        child = new DefaultMutableTreeNode(
            new ClassPathNode(item, qualifiedName, ClassPathNode.TYPE_DIR));
        parentNode.add(child);
      } else if (filter.accept(new File(item))) {
        if (parentLength < 0) {
          Debug.debug("ClassPath.getTree Index out of range: item="
              + item + " parentLength=" + parentLength + " level=" + level);
        } else {
          item = item.substring(parentLength);
        }
        if (removeFileType) {
          item = removeFileType(item);
          qualifiedName = removeFileType(qualifiedName);
        }
        child = new DefaultMutableTreeNode(
            new ClassPathNode(item, qualifiedName, ClassPathNode.TYPE_FILE));
        parentNode.add(child);
      }
    }
    return top;
  }


  protected void resetEntries() {
    entries = null;
    classTree = null;
    packageTree = null;
  }

  protected void addMissingEntries() {
    ArrayList missingEntries = new ArrayList();
    Iterator iter = entries.iterator();
    while (iter.hasNext()) {
      String item = (String)iter.next();
      int lastSlash = item.lastIndexOf('/');
      if (lastSlash != -1) {
        StringTokenizer tokens = new StringTokenizer(item.substring(0, lastSlash),"/");
        String dir = "";
        while (tokens.hasMoreTokens()) {
          dir += tokens.nextToken() + "/";
          if (!entries.contains(dir)) {
            missingEntries.add(dir);
          }
        }
      }
    }
    entries.addAll(missingEntries);
  }

  protected void setInternalEntries(TreeSet entries) {
    this.entries = entries;
  }

  protected void getEntriesInPath() {
    entries = new TreeSet();
    Iterator iter = paths.iterator();
    while (iter.hasNext()) {
      String path = (String)iter.next();
      File file = new File(path);
      String fileName = file.getName().toLowerCase();
      if (fileName.endsWith(".zip") || fileName.endsWith(".jar")) {
        processArchive(file);
      } else {
        processDirectory(file.getAbsolutePath().length()+1, file);
      }
    }
    addMissingEntries();
  }

  private void processDirectory(int prefix, File dir) {
    if(!dir.isDirectory() )
      return;
    if (dir.getAbsolutePath().length() > prefix) {
      String relative = dir.getAbsolutePath().substring(prefix);
      if (!relative.endsWith("/"))
        relative += "/";
      entries.add(relative);
    }
    File[] sub = dir.listFiles();
    for( int i=0; i<sub.length; ++i ) {
      processDirectory(prefix, sub[i]);
      processFile(prefix, sub[i]);
    }
  }

  private void processFile(int prefix, File f) {
    if( !f.isFile() )
      return;
    String relative = f.getAbsolutePath().substring(prefix);
    entries.add(relative);
  }

  private void processArchive(File archive) {
    try {
      ZipFile zf = new ZipFile(archive);
      Enumeration e = zf.entries();
      while( e.hasMoreElements() )
        entries.add(e.nextElement().toString());
      zf.close();
    } catch(IOException ex) {
      Debug.error("Error during process archive", ex);
    }
  }
}
```

File: com.taursys.tools.util.ClassPathNode
```java
package com.taursys.tools.util;

import javax.swing.tree.*;


public class ClassPathNode {
  private String displayName = "";
  private String qualifiedName = "";
  private int type = 0;
  public static final int TYPE_ROOT = 0;
  public static final int TYPE_DIR = 1;
  public static final int TYPE_FILE = 2;

  public ClassPathNode() {
  }

  public ClassPathNode(String displayName, String qualifiedName, int type) {
    this.displayName = displayName;
    this.qualifiedName = qualifiedName;
    this.type = type;
  }

  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String newDisplayName) {
    displayName = newDisplayName;
  }

  public void setQualifiedName(String newQualifiedName) {
    qualifiedName = newQualifiedName;
  }

  public String getQualifiedName() {
    return qualifiedName;
  }

  public void setType(int newType) {
    type = newType;
  }

  public int getType() {
    return type;
  }

  public String toString() {
    return displayName;
  }
}
```

File: com.taursys.tools.util.test.ClassPathTest
```java
package com.taursys.tools.util.test;

import java.util.Enumeration;
import java.util.Iterator;
import java.util.TreeSet;

import javax.swing.tree.DefaultMutableTreeNode;

import junit.framework.TestCase;

import com.taursys.tools.util.ClassPath;

public class ClassPathTest extends TestCase {
  private static final String MAPPER_JAR =
      "/home/marty/eclipse/workspace/MapperXML/lib/mapperxml.jar";
  private static final String MAPPER_CLASSES =
      "/home/marty/eclipse/workspace/MapperXML/build/classes";
  private static final String MAPPER_SRC =
      "/home/marty/eclipse/workspace/MapperXML/src";
  private static final String MAPPER_ZIP =
      "/home/marty/eclipse/workspace/MapperXML/build/website.zip";

  public ClassPathTest(String _name) {
    super(_name);
  }

  protected void setUp() {
  }

  protected void tearDown() {
  }

  public void testGetClassTree_Jar() {
    ClassPath cp = new ClassPath();
    cp.addPath(MAPPER_JAR);
    DefaultMutableTreeNode top = cp.getClassTree();
  }

  public void testGetClassTree_Dir() {
    ClassPath cp = new ClassPath();
    cp.addPath(MAPPER_CLASSES);
    DefaultMutableTreeNode top = cp.getClassTree();
  }

  public void testGetPackageTree() {
    ClassPath cp = new ClassPath();
    cp.addPath(MAPPER_JAR);
    DefaultMutableTreeNode top = cp.getPackageTree();
  }

  public void testSetClassPathString_SinglePath() {
    ClassPath cp = new ClassPath();
    cp.setClassPathString(MAPPER_JAR);
    assertEquals("size", 1, cp.getPaths().size());
    String result = (String)cp.getPaths().get(0);
    assertEquals("first path", result, MAPPER_JAR);
  }

  public void testSetClassPathString_MultiPathNoDup() {
    ClassPath cp = new ClassPath();
    cp.setClassPathString(
        MAPPER_JAR + ";" + MAPPER_CLASSES + ";" + MAPPER_ZIP);
    assertEquals("size", 3, cp.getPaths().size());
    assertEquals("path 0",
      MAPPER_JAR,
      (String)cp.getPaths().get(0));
    assertEquals("path 1",
      MAPPER_CLASSES,
      (String)cp.getPaths().get(1));
    assertEquals("path 2",
      MAPPER_ZIP,
      (String)cp.getPaths().get(2));
  }

  public void testSetClassPathString_MultiPathDups() {
    ClassPath cp = new ClassPath();
    cp.setClassPathString(
        MAPPER_JAR + ";" + MAPPER_CLASSES + ";" + MAPPER_JAR + ";" + MAPPER_ZIP);
    assertEquals("size", 3, cp.getPaths().size());
    assertEquals("path 0",
      MAPPER_JAR,
      (String)cp.getPaths().get(0));
    assertEquals("path 1",
      MAPPER_CLASSES,
      (String)cp.getPaths().get(1));
    assertEquals("path 2",
      MAPPER_ZIP,
      (String)cp.getPaths().get(2));
  }

  public void testGetClassPathString_Multi() {
    ClassPath cp = new ClassPath();
    cp.addPath(MAPPER_JAR);
    cp.addPath(MAPPER_CLASSES);
    cp.addPath(MAPPER_ZIP);
    assertEquals("classPathString",
      MAPPER_JAR + ";" + MAPPER_CLASSES + ";" + MAPPER_ZIP,
      cp.getClassPathString());
  }

  public void testAddPath_NonDup() {
    ClassPath cp = new ClassPath();
    cp.addPath(MAPPER_JAR);
    assertEquals("size", 1, cp.getPaths().size());
    String result = (String)cp.getPaths().get(0);
    assertEquals("first path", result, MAPPER_JAR);
  }

  public void testAddPath_Dup() {
    ClassPath cp = new ClassPath();
    cp.addPath(MAPPER_JAR);
    cp.addPath(MAPPER_JAR);
    assertEquals("size", 1, cp.getPaths().size());
    String result = (String)cp.getPaths().get(0);
    assertEquals("first path", result, MAPPER_JAR);
  }

  public void testRemovePath() {
    ClassPath cp = new ClassPath();
    cp.addPath(MAPPER_JAR);
    cp.removePath(MAPPER_JAR);
    assertEquals("size", 0, cp.getPaths().size());
  }

  public void testGetEntriesInPath_SingleClassesDirectory() {
    ClassPath cp = new ClassPath();
    cp.addPath(MAPPER_CLASSES);
    assertEquals(" minimum size",
        100,
        Math.min(100, cp.getEntries().size()));
  }

  public void testGetEntriesInPath_SingleJar() {
    ClassPath cp = new ClassPath();
    cp.addPath(MAPPER_JAR);
    assertEquals(" minimum size",
        100,
        Math.min(100, cp.getEntries().size()));
  }

  public void testGetEntriesInPath_SingleZip() {
    ClassPath cp = new ClassPath();
    cp.addPath(MAPPER_ZIP);
    assertEquals(" minimum size",
        100,
        Math.min(100, cp.getEntries().size()));
  }

  public void testGetEntriesInPath_Mult() {
    ClassPath cp = new ClassPath();
    cp.addPath(MAPPER_CLASSES);
    cp.addPath(MAPPER_JAR);
    cp.addPath(MAPPER_ZIP);
    cp.addPath(MAPPER_SRC);
    assertEquals("minimum size",
        100,
        Math.min(100, cp.getEntries().size()));
  }

  public void testGetEntriesInPath_BugFix() {
    TestClassPath cp = new TestClassPath();
    TreeSet entries = new TreeSet();
    entries.add("com/");
    entries.add("com/sun/");
    entries.add("com/sun/");
    entries.add("com/sun/tools/");
    entries.add("com/sun/tools/jdi/");
    entries.add("com/sun/tools/jdi/resources/");
    entries.add("com/sun/tools/jdi/resources/jdi.properties");
    entries.add("com/sun/xml/parser/");
    entries.add("com/sun/xml/parser/AttributeDecl.class");
    entries.add("com/sun/xml/parser/AttributeListEx.class");
    entries.add("com/sun/xml/parser/AttributeListImpl.class");
    entries.add("com/sun/xml/parser/ContentModel.class");
    cp.setInternalEntries(entries);
    cp.addMissingEntries();
    printEntries(cp.getEntries());
    DefaultMutableTreeNode top = cp.getClassTree();
    displayNode(top,"");
  }


  private class TestClassPath extends ClassPath {
    protected void setInternalEntries(TreeSet entries) {
      super.setInternalEntries(entries);
    }
    protected void addMissingEntries() {
      super.addMissingEntries();
    }
  }


  private void displayNode(DefaultMutableTreeNode parent, String level) {
    System.out.println(level + parent.getUserObject());
    Enumeration enum = parent.children();
    while (enum.hasMoreElements()) {
      DefaultMutableTreeNode child = (DefaultMutableTreeNode)enum.nextElement();
      displayNode(child, level + "  ");
    }
  }

  private void printEntries(TreeSet entries) {
    Iterator iter = entries.iterator();
    while (iter.hasNext()) {
      System.out.println(iter.next());
    }
  }

  public static void main(String[] argv) {
    String[] testCaseList = {ClassPathTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.util.UnsupportedDataTypeException
```java
package com.taursys.util;

public class UnsupportedDataTypeException extends RuntimeException {

  public UnsupportedDataTypeException() {
    super();
  }

  public UnsupportedDataTypeException(String message) {
    super(message);
  }
}
```

File: com.taursys.util.UnsupportedConversionException
```java
package com.taursys.util;

public class UnsupportedConversionException extends Exception {

  public UnsupportedConversionException() {
    super();
  }

  public UnsupportedConversionException(String message) {
    super(message);
  }
}
```

File: com.taursys.util.ChainedException
```java
package com.taursys.util;

import java.io.PrintStream;
import java.io.PrintWriter;

public class ChainedException extends Exception {
  public static final int REASON_INVALID_REASON_CODE          = 0;
  public static final int REASON_UNSPECIFIED                  = 1;
  private static final String[] messages = new String[] {
    "Invalid reason code.",
    "Unspecified reason",
  };
  protected Throwable cause;
  protected String diagnosticInfo;
  protected int reason = REASON_UNSPECIFIED;
  protected String userFriendlyMessage = "A system exception has occurred";


  public static String getReasonMessage(int reason) {
    if (reason >= 0 && reason < messages.length)
      return messages[reason];
    else
      return messages[REASON_INVALID_REASON_CODE];
  }

  public static String getInvalidMessage() {
    return messages[REASON_INVALID_REASON_CODE];
  }


  public ChainedException(int reason) {
    super(getReasonMessage(reason));
    this.reason = reason;
  }

  public ChainedException(int reason, Throwable cause) {
    super(getReasonMessage(reason)+": "+cause.getMessage());
    this.reason = reason;
    this.cause = cause;
  }

  public ChainedException(int reason, Throwable cause, String diagnosticInfo) {
    this(reason, cause);
    this.diagnosticInfo = diagnosticInfo;
  }

  public ChainedException(int reason, String diagnosticInfo) {
    this(reason);
    this.diagnosticInfo = diagnosticInfo;
  }


  protected ChainedException(String message) {
    super(message);
  }

  protected ChainedException(String message, int reason) {
    super(message);
    this.reason = reason;
  }

  protected ChainedException(String message, int reason, Throwable cause) {
    this(message + ": " + cause.getMessage(), reason);
    this.cause = cause;
  }


  public int getReason() {
    return reason;
  }

  public Throwable getCause() {
    return cause;
  }

  public String getUserFriendlyMessage() {
    return userFriendlyMessage;
  }

  public String getLocalizedMessage() {
    if (diagnosticInfo != null && diagnosticInfo.length() > 0)
      return getMessage() + "\n" + diagnosticInfo;
    else
      return getMessage();
  }

  public String getDiagnosticInfo() {
    return diagnosticInfo;
  }


  public void printStackTrace() {
    super.printStackTrace();
    if (cause != null) {
      cause.printStackTrace();
    }
  }

  public void printStackTrace(PrintStream printStream) {
    super.printStackTrace(printStream);
    if (cause != null) {
      cause.printStackTrace(printStream);
    }
  }

  public void printStackTrace(PrintWriter printWriter) {
    super.printStackTrace(printWriter);
    if (cause != null) {
      cause.printStackTrace(printWriter);
    }
  }


  static public void main(String[] args) {
    try {
      throw new ChainedException(1, new Exception("Cause message"),"Trace x=1, y=2");
    } catch (Exception ex) {
      System.out.println("Exception toString:\n===========\n"+ex);
      System.out.println("==========================================================");
      System.out.println("Exception Message:\n===========\n"+ex.getMessage());
      System.out.println("==========================================================");
      System.out.println("Exception Localized Message:\n=================\n"+ex.getLocalizedMessage());
      System.out.println("==========================================================");
      System.out.println("Stack Trace:");
      System.out.println("==========================================================");
      ex.printStackTrace();
    }
  }
}
```

File: com.taursys.util.StringUtil
```java
package com.taursys.util;

import java.util.*;

public class StringUtil {

  public static boolean differ(String x, String y) {
    if (x == null && y == null)
      return false;
    if (x == null && y != null)
      return true;
    if (x != null && y == null)
      return true;
    return !x.equals(y);
  }

  public static String nullIfBlank(String s) {
    if (s==null || s.length()==0)
      return null;
    else
      return s;
  }

  public static String baseClassName(String clsName) {
    int idx = clsName.lastIndexOf('.');
    if (idx > 0)
      return clsName.substring(idx+1);
    else
      return clsName;
  }

  public static String packageName(String clsName) {
    int idx = clsName.lastIndexOf('.');
    if (idx > 0)
      return clsName.substring(0, idx);
    else
      return null;
  }

  public static String classVarName(String clsName) {
    String baseName = baseClassName(clsName);
    return baseName.substring(0,1).toLowerCase() + baseName.substring(1);
  }

  public static String arrayToString(Object[] array) {
    if (array == null)
      return "null";
    if (array.length == 0)
      return "";
    String s = array[0].toString();
    for (int i = 1 ; i < array.length ; i++)
      s += ", " + array[i];
    return s;
  }

  public static String[] stringToArray(String s, int extraSpace) {
    StringTokenizer tokens = new StringTokenizer(s, ",");
    int count = tokens.countTokens();
    String[] result = new String[count+extraSpace];
    for (int i=0 ; i < count ; i++ ) {
      result[i] = tokens.nextToken().trim();
    }
    return result;
  }

  public static String[] stringToArray(String s) {
    return stringToArray(s, 0);
  }

  public static boolean contains(String searchString, String targetString) {
    return targetString.indexOf(searchString) != -1;
  }
}
```

File: com.taursys.util.DataTypes
```java
package com.taursys.util;

import java.util.Hashtable;
import java.sql.Types;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;

public class DataTypes {
  public static final int TYPE_UNDEFINED = -1;
  public static final int TYPE_STRING = 0;
  public static final int TYPE_BIGDECIMAL = 1;
  public static final int TYPE_TIMESTAMP = 2;
  public static final int TYPE_BOOLEAN = 3;
  public static final int TYPE_INT = 4;
  public static final int TYPE_BYTE = 5;
  public static final int TYPE_SHORT = 6;
  public static final int TYPE_LONG = 7;
  public static final int TYPE_FLOAT = 8;
  public static final int TYPE_DATE = 9;
  public static final int TYPE_TIME = 10;
  public static final int TYPE_DOUBLE = 11;
  public static final int TYPE_SQL_DATE = 12;

  private static DateFormat df = DateFormat.getDateTimeInstance(
      DateFormat.LONG, DateFormat.LONG);

  public static DateFormat getDefaultDateFormat() {
    return df;
  }

  public static void setDefaultDateFormat(DateFormat dfNew) {
    if (dfNew == null)
      throw new IllegalArgumentException("Default Date Format cannot be set to null");
    df = dfNew;
  }

  private static Hashtable javaTypeNames = new Hashtable();

  private static final Class[] CLASSES_FOR_TYPES = {
    String.class,
    BigDecimal.class,
    java.sql.Timestamp.class,
    Boolean.class,
    Integer.class,
    Byte.class,
    Short.class,
    Long.class,
    Float.class,
    java.util.Date.class,
    java.sql.Time.class,
    Double.class,
    java.sql.Date.class,
    };

  private static final String[] JAVA_NAMES_FOR_TYPES = {
    "java.lang.String",
    "java.math.BigDecimal",
    "java.sql.Timestamp",
    "java.lang.Boolean",
    "java.lang.Integer",
    "java.lang.Byte",
    "java.lang.Short",
    "java.lang.Long",
    "java.lang.Float",
    "java.util.Date",
    "java.sql.Time",
    "java.lang.Double",
    "java.sql.Date",
  };

  static {
    javaTypeNames.put("java.lang.String", new Integer(TYPE_STRING));
    javaTypeNames.put("java.math.BigDecimal", new Integer(TYPE_BIGDECIMAL));
    javaTypeNames.put("java.sql.Timestamp", new Integer(TYPE_TIMESTAMP));
    javaTypeNames.put("java.lang.Boolean", new Integer(TYPE_BOOLEAN));
    javaTypeNames.put("java.lang.Integer", new Integer(TYPE_INT));
    javaTypeNames.put("java.lang.Byte", new Integer(TYPE_BYTE));
    javaTypeNames.put("java.lang.Short", new Integer(TYPE_SHORT));
    javaTypeNames.put("java.lang.Long", new Integer(TYPE_LONG));
    javaTypeNames.put("java.lang.Float", new Integer(TYPE_FLOAT));
    javaTypeNames.put("java.util.Date", new Integer(TYPE_DATE));
    javaTypeNames.put("java.sql.Time", new Integer(TYPE_TIME));
    javaTypeNames.put("java.lang.Double", new Integer(TYPE_DOUBLE));
    javaTypeNames.put("java.sql.Date", new Integer(TYPE_SQL_DATE));
    javaTypeNames.put("int", new Integer(TYPE_INT));
    javaTypeNames.put("boolean", new Integer(TYPE_BOOLEAN));
    javaTypeNames.put("char", new Integer(TYPE_STRING));
    javaTypeNames.put("byte", new Integer(TYPE_BYTE));
    javaTypeNames.put("short", new Integer(TYPE_SHORT));
    javaTypeNames.put("long", new Integer(TYPE_LONG));
    javaTypeNames.put("float", new Integer(TYPE_FLOAT));
    javaTypeNames.put("double", new Integer(TYPE_DOUBLE));
  }

  private DataTypes() {
  }

  public static String getJavaNameForType(int javaDatType) throws UnsupportedDataTypeException {
    checkJavaDataType(javaDatType);
    return JAVA_NAMES_FOR_TYPES[javaDatType];
  }

  public static Class getClassForType(int javaDatType) throws UnsupportedDataTypeException {
    checkJavaDataType(javaDatType);
    return CLASSES_FOR_TYPES[javaDatType];
  }

  public static void checkJavaDataType(int i) throws UnsupportedDataTypeException {
    if (i < 0 || i >= JAVA_NAMES_FOR_TYPES.length)
      throw new UnsupportedDataTypeException();
  }

  public static int getDataType(String className) {
    Integer integer = (Integer)javaTypeNames.get(className);
    if (integer != null)
      return integer.intValue();
    else
      return TYPE_UNDEFINED;
  }

  private static Object convert(int javaDataType, Number value)
      throws UnsupportedConversionException, UnsupportedDataTypeException {
    checkJavaDataType(javaDataType);
    switch (javaDataType) {
      case TYPE_BIGDECIMAL:
        return new BigDecimal(((Number)value).toString());
      case TYPE_BYTE:
        return new Byte(((Number)value).byteValue());
      case TYPE_DOUBLE:
        return new Double(((Number)value).doubleValue());
      case TYPE_FLOAT:
        return new Float(((Number)value).floatValue());
      case TYPE_INT:
        return new Integer(((Number)value).intValue());
      case TYPE_LONG:
        return new Long(((Number)value).longValue());
      case TYPE_SHORT:
        return new Short(((Number)value).shortValue());
      default:
        throw new UnsupportedConversionException();
    }
  }

  private static Object convert(int javaDataType, java.util.Date value)
      throws UnsupportedConversionException {
    checkJavaDataType(javaDataType);
    switch (javaDataType) {
      case TYPE_DATE:
        return value;
      case TYPE_TIME:
        return new java.sql.Time(((java.util.Date)value).getTime());
      case TYPE_TIMESTAMP:
        return new java.sql.Timestamp(((java.util.Date)value).getTime());
      case TYPE_SQL_DATE:
        return new java.sql.Date(((java.util.Date)value).getTime());
      default:
        throw new UnsupportedConversionException();
    }
  }

  private static Object convert(int javaDataType, String value)
      throws UnsupportedConversionException, UnsupportedDataTypeException {
    checkJavaDataType(javaDataType);
    if (javaDataType == TYPE_STRING)
      return value;
    else
      throw new UnsupportedConversionException();
  }

  public static Object convert(int javaDataType, Object value)
      throws UnsupportedConversionException, UnsupportedDataTypeException {
    if (value instanceof String)
      return convert(javaDataType, (String)value);
    else if (value instanceof java.util.Date)
      return convert(javaDataType, (java.util.Date)value);
    else if (value instanceof Number)
      return convert(javaDataType, (Number)value);
    else
      throw new UnsupportedConversionException();
  }

  public static Object parse(int javaDataType, String value)
      throws ParseException, UnsupportedDataTypeException {
    switch (javaDataType) {
      case TYPE_STRING:
        return value;
      case TYPE_BOOLEAN:
        return new Boolean(value);
      case TYPE_DATE:
        return df.parse(value);
      case TYPE_SQL_DATE:
        return new java.sql.Date(df.parse(value).getTime());
      case TYPE_TIME:
        return new java.sql.Time(df.parse(value).getTime());
      case TYPE_TIMESTAMP:
        return new java.sql.Timestamp(df.parse(value).getTime());
      case TYPE_BIGDECIMAL:
        return new BigDecimal(value);
      case TYPE_BYTE:
        return new Byte(value);
      case TYPE_DOUBLE:
        return new Double(value);
      case TYPE_FLOAT:
        return new Float(value);
      case TYPE_INT:
        return new Integer(value);
      case TYPE_LONG:
        return new Long(value);
      case TYPE_SHORT:
        return new Short(value);
      default:
        throw new UnsupportedDataTypeException();
    }
  }

  public static String format(int javaDataType, Object value)
      throws UnsupportedDataTypeException {
    switch (javaDataType) {
      case TYPE_STRING:
        return value.toString();
      case TYPE_BOOLEAN:
        return value.toString();
      case TYPE_DATE:
        return df.format(value);
      case TYPE_SQL_DATE:
        return df.format(value);
      case TYPE_TIME:
        return df.format(value);
      case TYPE_TIMESTAMP:
        return df.format(value);
      case TYPE_BIGDECIMAL:
        return value.toString();
      case TYPE_BYTE:
        return value.toString();
      case TYPE_DOUBLE:
        return value.toString();
      case TYPE_FLOAT:
        return value.toString();
      case TYPE_INT:
        return value.toString();
      case TYPE_LONG:
        return value.toString();
      case TYPE_SHORT:
        return value.toString();
      case TYPE_UNDEFINED:
        return value.toString();
      default:
        throw new UnsupportedDataTypeException();
    }
  }
}
```

File: com.taursys.util.MapperComponent
```java
package com.taursys.util;

public interface MapperComponent {
}
```

File: com.taursys.swing.MTableCellRenderer
```java
package com.taursys.swing;

import javax.swing.*;
import javax.swing.table.*;
import java.text.Format;
import java.text.MessageFormat;
import java.text.ChoiceFormat;
import com.taursys.util.DataTypes;
import com.taursys.util.UnsupportedConversionException;
import com.taursys.util.UnsupportedDataTypeException;
import java.text.ParseException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.lang.reflect.InvocationTargetException;
import java.lang.IllegalAccessException;
import java.beans.IntrospectionException;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.util.Vector;

public class MTableCellRenderer extends DefaultTableCellRenderer {
  private java.text.Format format = null;
  private String formatPattern = null;
  private int javaDataType = DataTypes.TYPE_UNDEFINED;

  public MTableCellRenderer() {
    super();
  }


  protected void setValue(Object value) {
    if (value == null) {
      setText("");
    } else if (format == null) {
      if (javaDataType == DataTypes.TYPE_UNDEFINED) {
        javaDataType = DataTypes.getDataType(value.getClass().getName());
      }
      setText(DataTypes.format(javaDataType, value));
    } else if (format instanceof MessageFormat) {
      setText(((MessageFormat)format).format(new Object[] {value}));
    } else {
      setText(format.format(value));
    }
  }

  protected void setupFormat() {
    if (format != null && formatPattern != null) {
      if (format instanceof MessageFormat)
        ((MessageFormat)format).applyPattern(formatPattern);
      if (format instanceof SimpleDateFormat)
        ((SimpleDateFormat)format).applyPattern(formatPattern);
      if (format instanceof DecimalFormat)
        ((DecimalFormat)format).applyPattern(formatPattern);
      if (format instanceof ChoiceFormat)
        ((ChoiceFormat)format).applyPattern(formatPattern);
    }
  }


  public void setFormat(java.text.Format newFormat) {
    format = newFormat;
    setupFormat();
  }

  public java.text.Format getFormat() {
    return format;
  }

  public void setFormatPattern(String newPattern) {
    formatPattern = newPattern;
    setupFormat();
  }

  public String getFormatPattern() {
    return formatPattern;
  }
}
```

File: com.taursys.swing.MTableModel
```java
package com.taursys.swing;

import javax.swing.table.*;
import javax.swing.*;
import com.taursys.model.*;
import com.taursys.util.*;
import javax.swing.event.*;
import com.taursys.model.event.*;
import java.util.List;
import java.util.ArrayList;

public class MTableModel extends AbstractTableModel implements ChangeListener {
  private ListSelectionBinder listSelectionBinder = new ListSelectionBinder();
  private ListValueHolder listValueHolder;
  private ArrayList columns = new ArrayList();
  private javax.swing.ListSelectionModel listSelectionModel;

  public MTableModel() {
    listValueHolder = createDefaultListValueHolder();

  }

  protected ListValueHolder createDefaultListValueHolder() {
    return new VOListValueHolder();
  }

  public void setValueObjectClass(Class newValueObjectClass) {
    if (listValueHolder != null && listValueHolder instanceof VOListValueHolder) {
      ((VOListValueHolder)listValueHolder).setValueObjectClass(newValueObjectClass);
    }
  }

  public Class getValueObjectClass() {
    if (listValueHolder != null && listValueHolder instanceof VOListValueHolder) {
      return ((VOListValueHolder)listValueHolder).getValueObjectClass();
    } else {
      return null;
    }
  }

  public void setList(List newList) {
    if (listValueHolder != null && listValueHolder instanceof VOListValueHolder) {
      ((VOListValueHolder)listValueHolder).setList(newList);
      listValueHolder.first();
    }
  }

  public List getList() {
    if (listValueHolder != null && listValueHolder instanceof VOListValueHolder) {
      return ((VOListValueHolder)listValueHolder).getList();
    } else {
      return null;
    }
  }


  public boolean isCellEditable(int parm1, int parm2) {
    return false;
  }

  public int getColumnCount() {
    return columns.size();
  }

  public String getColumnName(int col) {
    return (String)columns.get(col);
  }

  public int findColumn(String columnName) {
    return columns.indexOf(columnName);
  }

  public Object getValueAt(int row, int col) {
    try {
      return listValueHolder.getPropertyValue((String)columns.get(col), row);
    } catch (ModelException ex) {
      return ex.getMessage();
    }
  }

  public int getRowCount() {
    if (listValueHolder == null)
      return 0;
    return listValueHolder.getRowCount();
  }

  public Class getColumnClass(int col) {
    try {
      return DataTypes.getClassForType(listValueHolder.getJavaDataType((String)columns.get(col)));
    } catch (ModelException ex) {
      return String.class;
    }
  }

  public void setListValueHolder(com.taursys.model.ListValueHolder newListValueHolder) {
    listSelectionBinder.setListValueHolder(newListValueHolder);
    if (listValueHolder != null)
      listValueHolder.removeChangeListener(this);
    listValueHolder = newListValueHolder;
    listValueHolder.addChangeListener(this);
    fireTableStructureChanged();
  }

  public com.taursys.model.ListValueHolder getListValueHolder() {
    return listValueHolder;
  }

  public void setListSelectionModel(javax.swing.ListSelectionModel newListSelectionModel) {
    listSelectionModel = newListSelectionModel;
    listSelectionBinder.setListSelectionModel(listSelectionModel);
  }

  public javax.swing.ListSelectionModel getListSelectionModel() {
    return listSelectionModel;
  }

  public void setColumnNames(String[] newColumnNames) {
    columns.clear();
    columns.addAll(java.util.Arrays.asList(newColumnNames));
    fireTableStructureChanged();
  }

  public String[] getColumnNames() {
    return (String[])columns.toArray(new String[]{});
  }

  public int getColumnIndex(String columnName) {
    return columns.indexOf(columnName);
  }

  public void addColumn(String columnName) {
    columns.add(columnName);
  }

  public void removeColumn(String columnName) {
    columns.remove(columnName);
  }

  public void stateChanged(ChangeEvent e) {
    if (e instanceof ContentValueChangeEvent) {
      fireTableCellUpdated(listValueHolder.getPosition(),
          getColumnIndex(((ContentValueChangeEvent)e).getPropertyName()));
    } else if (e instanceof ListContentChangeEvent) {
      fireTableDataChanged();
    } else if (e instanceof ContentChangeEvent) {
      fireTableRowsUpdated(listValueHolder.getPosition(),listValueHolder.getPosition());
    } else if (e instanceof StructureChangeEvent) {
      fireTableStructureChanged();
    }
  }
}
```

File: com.taursys.swing.MListCellRenderer
```java
package com.taursys.swing;

import javax.swing.*;
import javax.swing.table.*;
import java.text.Format;
import java.text.MessageFormat;
import java.text.ChoiceFormat;
import com.taursys.util.DataTypes;
import com.taursys.util.UnsupportedConversionException;
import com.taursys.util.UnsupportedDataTypeException;
import java.text.ParseException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.lang.reflect.InvocationTargetException;
import java.lang.IllegalAccessException;
import java.beans.IntrospectionException;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.util.Vector;
import java.awt.Component;
import com.taursys.model.PropertyAccessor;

public class MListCellRenderer extends DefaultListCellRenderer {
  private java.text.Format format = null;
  private String formatPattern = null;
  private int javaDataType = DataTypes.TYPE_UNDEFINED;
  private String displayPropertyName;
  private PropertyAccessor pa = null;

  public MListCellRenderer() {
    super();
  }

  public Component getListCellRendererComponent(
      JList list,
      Object value,
      int index,
      boolean isSelected,
      boolean cellHasFocus)
      {
    setComponentOrientation(list.getComponentOrientation());
    if (isSelected) {
      setBackground(list.getSelectionBackground());
      setForeground(list.getSelectionForeground());
    }
    else {
      setBackground(list.getBackground());
      setForeground(list.getForeground());
    }

    if (value instanceof Icon) {
      setIcon((Icon)value);
    }
    setValue(value);

    setEnabled(list.isEnabled());
    setFont(list.getFont());
    setBorder((cellHasFocus) ?
        UIManager.getBorder("List.focusCellHighlightBorder") :
        noFocusBorder);

    return this;
  }


  protected void setValue(Object value) {
    if (value instanceof NullObject) {
      setIcon(((NullObject)value).getIcon());
      setText(((NullObject)value).getText());
      return;
    }
    if (value != null && displayPropertyName != null
        && displayPropertyName.length() > 0) {
      value = getPropertyValue(value, displayPropertyName);
    }
    if (value == null) {
      setText("");
    } else if (format == null) {
      if (javaDataType == DataTypes.TYPE_UNDEFINED) {
        javaDataType = DataTypes.getDataType(value.getClass().getName());
      }
      setText(DataTypes.format(javaDataType, value));
    } else if (format instanceof MessageFormat) {
      setText(((MessageFormat)format).format(new Object[] {value}));
    } else {
      setText(format.format(value));
    }
  }

  private Object getPropertyValue(Object obj, String propertyName) {
    if (pa == null) {
      try {
        pa = new PropertyAccessor(obj.getClass(), propertyName);
      } catch (Exception ex) {
        com.taursys.debug.Debug.error("Cannot access property for retrieval", ex);
        return null;
      }
    }
    try {
      return pa.getPropertyValue(obj);
    } catch (Exception ex) {
      com.taursys.debug.Debug.error("Cannot retrieve value for property", ex);
      return null;
    }
  }

  protected void setupFormat() {
    if (format != null && formatPattern != null) {
      if (format instanceof MessageFormat)
        ((MessageFormat)format).applyPattern(formatPattern);
      if (format instanceof SimpleDateFormat)
        ((SimpleDateFormat)format).applyPattern(formatPattern);
      if (format instanceof DecimalFormat)
        ((DecimalFormat)format).applyPattern(formatPattern);
      if (format instanceof ChoiceFormat)
        ((ChoiceFormat)format).applyPattern(formatPattern);
    }
  }


  public void setFormat(java.text.Format newFormat) {
    format = newFormat;
    setupFormat();
  }

  public java.text.Format getFormat() {
    return format;
  }

  public void setFormatPattern(String newPattern) {
    formatPattern = newPattern;
    setupFormat();
  }

  public String getFormatPattern() {
    return formatPattern;
  }

  public void setDisplayPropertyName(String newDisplayPropertyName) {
    displayPropertyName = newDisplayPropertyName;
  }

  public String getDisplayPropertyName() {
    return displayPropertyName;
  }

}
```

File: com.taursys.swing.NullObject
```java
package com.taursys.swing;

import javax.swing.Icon;

public class NullObject {
  private String text = "-- none --";
  private javax.swing.Icon icon = null;

  public NullObject() {
  }

  public void setText(String text) {
    this.text = text;
  }

  public String getText() {
    return text;
  }

  public void setIcon(Icon icon) {
    this.icon = icon;
  }

  public Icon getIcon() {
    return icon;
  }

  public String toString() {
    return text;
  }
}
```

File: com.taursys.swing.MComboBox
```java
package com.taursys.swing;

import javax.swing.*;
import com.taursys.model.*;

public class MComboBox extends JComboBox implements EnableListener {


  public MComboBox() {
    super(new MComboBoxModel());
    setRenderer(new MListCellRenderer());
  }

  public MComboBox(final Object items[]) {
    super(new MComboBoxModel(items));
    setRenderer(new MListCellRenderer());
  }


  public MListCellRenderer getMListCellRenderer() {
    return (MListCellRenderer)getRenderer();
  }

  public void setModel(ComboBoxModel model) {
    if (getModel() instanceof MComboBoxModel)
      ((MComboBoxModel)getModel()).removeEnableListener(this);
    super.setModel(model);
    if (model instanceof MComboBoxModel)
      ((MComboBoxModel)model).addEnableListener(this);
  }


  public void setFormat(java.text.Format newFormat) {
    getMListCellRenderer().setFormat(newFormat);
  }

  public java.text.Format getFormat() {
    return getMListCellRenderer().getFormat();
  }

  public void setFormatPattern(String newPattern) {
    getMListCellRenderer().setFormatPattern(newPattern);
  }

  public String getFormatPattern() {
    return getMListCellRenderer().getFormatPattern();
  }

  public void setDisplayPropertyName(String newDisplayPropertyName) {
    getMListCellRenderer().setDisplayPropertyName(newDisplayPropertyName);
  }

  public String getDisplayPropertyName() {
    return getMListCellRenderer().getDisplayPropertyName();
  }


  public void setValueHolder(ValueHolder valueHolder) {
    if (getModel() instanceof MComboBoxModel) {
      ((MComboBoxModel)getModel()).setValueHolder(valueHolder);
    }
  }

  public ValueHolder getValueHolder() {
    if (getModel() instanceof MComboBoxModel) {
      return ((MComboBoxModel)getModel()).getValueHolder();
    } else {
      return null;
    }
  }

  public void setPropertyName(String propertyName) {
    if (getModel() instanceof MComboBoxModel) {
      ((MComboBoxModel)getModel()).setPropertyName(propertyName);
    }
  }

  public String getPropertyName() {
    if (getModel() instanceof MComboBoxModel) {
      return ((MComboBoxModel)getModel()).getPropertyName();
    } else {
      return null;
    }
  }

  public void setPropertyNames(String[] propertyNames) {
    if (getModel() instanceof MComboBoxModel) {
      ((MComboBoxModel)getModel()).setPropertyNames(propertyNames);
    }
  }

  public String[] getPropertyNames() {
    if (getModel() instanceof MComboBoxModel) {
      return ((MComboBoxModel)getModel()).getPropertyNames();
    } else {
      return null;
    }
  }


  public void setListValueHolder(ListValueHolder holder) {
    if (getModel() instanceof MComboBoxModel) {
      ((MComboBoxModel)getModel()).setListValueHolder(holder);
    }
  }

  public ListValueHolder getListValueHolder() {
    if (getModel() instanceof MComboBoxModel) {
      return ((MComboBoxModel)getModel()).getListValueHolder();
    } else {
      return null;
    }
  }

  public void setListPropertyName(String listPropertyName) {
    if (getModel() instanceof MComboBoxModel) {
      ((MComboBoxModel)getModel()).setListPropertyName(listPropertyName);
    }
  }

  public String getListPropertyName() {
    if (getModel() instanceof MComboBoxModel) {
      return ((MComboBoxModel)getModel()).getListPropertyName();
    } else
      return null;
  }

  public void setListPropertyNames(String[] listPropertyNames) {
    if (getModel() instanceof MComboBoxModel) {
      ((MComboBoxModel)getModel()).setListPropertyNames(listPropertyNames);
    }
  }

  public String[] getListPropertyNames() {
    if (getModel() instanceof MComboBoxModel) {
      return ((MComboBoxModel)getModel()).getListPropertyNames();
    } else
      return null;
  }


  public void setNullDisplay(String text) {
    if (getModel() instanceof MComboBoxModel)
      ((MComboBoxModel)getModel()).setNullDisplay(text);
  }

  public String getNullDisplay() {
    if (getModel() instanceof MComboBoxModel)
      return ((MComboBoxModel)getModel()).getNullDisplay();
    else
      return null;
  }

  public void setNullAllowed(boolean nullAllowed) {
    if (getModel() instanceof MComboBoxModel) {
      ((MComboBoxModel)getModel()).setNullAllowed(nullAllowed);
    }
  }

  public boolean isNullAllowed() {
    if (getModel() instanceof MComboBoxModel) {
      return ((MComboBoxModel)getModel()).isNullAllowed();
    } else {
      return false;
    }
  }


  public void enableChange(EnableEvent e) {
    setEnabled(e.isEnable());
  }

}
```

File: com.taursys.swing.MComboBoxModel
```java
package com.taursys.swing;

import javax.swing.ComboBoxModel;
import javax.swing.AbstractListModel;
import javax.swing.event.*;
import java.util.*;
import com.taursys.model.*;
import com.taursys.model.event.*;

public class MComboBoxModel extends AbstractListModel
    implements ComboBoxModel {
  private com.taursys.model.ListValueHolder listValueHolder;
  transient private Vector listDataListeners;
  private com.taursys.model.ValueHolder valueHolder;
  private String[] propertyNames = new String[] {"value"};
  private String[] listPropertyNames = new String[] {"value"};
  private ListChangeListener listChangeListener =
      new ListChangeListener();
  private ValueHolderChangeListener valueHolderChangeListener =
      new ValueHolderChangeListener();
  private boolean settingSelection = false;
  private boolean nullAllowed = false;
  private String nullDisplay = "--none--";
  private NullObject nullObject = new NullObject();
  private Object selectedItem = null;
  transient private Vector enableListeners;


  public MComboBoxModel() {
    setListValueHolder(new ObjectListValueHolder());
    setValueHolder(new ObjectValueHolder());
  }

  public MComboBoxModel(Object[] items) {
    if (items != null) {
      setListValueHolder(new ObjectListValueHolder(
          new ArrayList(Arrays.asList(items))));
    } else {
      setListValueHolder(new ObjectListValueHolder());
    }
    setValueHolder(new ObjectValueHolder());
  }


  public void setSelectedItem(Object anItem) {
    try {
      settingSelection = true;
      if (anItem instanceof NullObject) {
        Object[] values = new Object[listPropertyNames.length];
          valueHolder.setPropertyValues(
              propertyNames, values);
          this.selectedItem = anItem;
      } else {
        int index = listValueHolder.indexOf(anItem);
        if (index > -1) {
          Object[] values = listValueHolder.getPropertyValues(
            listPropertyNames, index);
          valueHolder.setPropertyValues(
              propertyNames, values);
          this.selectedItem = anItem;
        }
      }
    } catch (Exception ex) {
      com.taursys.debug.Debug.debug("Error during setSelectedItem", ex);
    } finally {
      settingSelection = false;
    }
  }

  public Object getSelectedItem() {
    return selectedItem;
  }

  public int getSize() {
    if (listValueHolder == null)
      return 0;
    else
      if (isNullAllowed())
        return listValueHolder.getRowCount() + 1;
      else
        return listValueHolder.getRowCount();
  }

  public Object getElementAt(int index) {
    if (listValueHolder == null)
      return null;
    else
      if (isNullAllowed())
        if (index == 0) {
          return nullObject;
        } else {
          return listValueHolder.get(index - 1);
        }
      else
        return listValueHolder.get(index);
  }


  public void setValueHolder(ValueHolder valueHolder) {
    if (valueHolder != null)
      valueHolder.removeChangeListener(valueHolderChangeListener);
    this.valueHolder = valueHolder;
    if (valueHolder != null)
      valueHolder.addChangeListener(valueHolderChangeListener);
    fireEnableChange(
        new EnableEvent(this, isChangeable()));
  }

  public ValueHolder getValueHolder() {
    return valueHolder;
  }

  public void setPropertyName(String propertyName) {
    if (propertyNames == null || propertyNames.length < 1)
      propertyNames = new String[] {propertyName};
    else
      propertyNames[0] = propertyName;
  }

  public String getPropertyName() {
    if (propertyNames == null || propertyNames.length < 1)
      return null;
    else
      return propertyNames[0];
  }

  public void setPropertyNames(String[] propertyNames) {
    propertyNames = propertyNames;
  }

  public String[] getPropertyNames() {
    return propertyNames;
  }

  private class ValueHolderChangeListener implements ChangeListener {
    public void stateChanged(ChangeEvent e) {
      if (!settingSelection && e instanceof ContentChangeEvent) {
        if (propertyNames != null
            && listPropertyNames != null) {
          try {
            Object[] values = valueHolder.getPropertyValues(propertyNames);
            int selectedItemIndex = listValueHolder.indexOf(
                listPropertyNames, values);
            if (selectedItemIndex > -1) {
              selectedItem = listValueHolder.get(selectedItemIndex);
            } else {
              if (isNullAllowed())
                selectedItem = nullObject;
              else
                selectedItem = null;
            }
          } catch (Exception ex) {
            ex.printStackTrace();
          }
        }
        fireEnableChange(
            new EnableEvent(this, !((ContentChangeEvent)e).isContentNull()));
      }
    }
  }


  public void setListValueHolder(ListValueHolder newListValueHolder) {
    if (listValueHolder != null)
      listValueHolder.removeChangeListener(listChangeListener);
    listValueHolder = newListValueHolder;
    if (listValueHolder != null)
      listValueHolder.addChangeListener(listChangeListener);
  }

  public ListValueHolder getListValueHolder() {
    return listValueHolder;
  }

  public void setListPropertyName(String listPropertyName) {
    if (listPropertyNames == null || listPropertyNames.length < 1)
      listPropertyNames = new String[] {listPropertyName};
    else
      listPropertyNames[0] = listPropertyName;
  }

  public String getListPropertyName() {
    if (listPropertyNames == null || listPropertyNames.length < 1)
      return null;
    else
      return listPropertyNames[0];
  }

  public void setListPropertyNames(String[] listPropertyNames) {
    this.listPropertyNames = listPropertyNames;
  }

  public String[] getListPropertyNames() {
    return listPropertyNames;
  }

  private class ListChangeListener implements ChangeListener {
    public void stateChanged(ChangeEvent e) {
      if (e instanceof ContentValueChangeEvent) {
        fireContentsChanged(this, 0, listValueHolder.size() - 1);
      } else if (e instanceof ListContentChangeEvent) {
        fireContentsChanged(this, 0, listValueHolder.size() - 1);
      } else if (e instanceof ContentChangeEvent) {
        fireContentsChanged(this, 0, listValueHolder.size() - 1);
      } else if (e instanceof StructureChangeEvent) {
        fireContentsChanged(this, 0, listValueHolder.size() - 1);
      }
    }
  }


  public void setNullAllowed(boolean nullAllowed) {
    this.nullAllowed = nullAllowed;
    if (nullAllowed && selectedItem == null)
      selectedItem = nullObject;
    else if (!nullAllowed && selectedItem instanceof NullObject)
      selectedItem = null;
  }

  public boolean isNullAllowed() {
    return nullAllowed;
  }

  public void setNullDisplay(String text) {
    nullObject.setText(text);
  }

  public String getNullDisplay() {
    return nullObject.getText();
  }


  public synchronized void removeEnableListener(EnableListener l) {
    if (enableListeners != null && enableListeners.contains(l)) {
      Vector v = (Vector) enableListeners.clone();
      v.removeElement(l);
      enableListeners = v;
    }
  }

  public synchronized void addEnableListener(EnableListener l) {
    Vector v = enableListeners == null ? new Vector(2) : (Vector) enableListeners.clone();
    if (!v.contains(l)) {
      v.addElement(l);
      enableListeners = v;
    }
  }

  protected void fireEnableChange(EnableEvent e) {
    if (enableListeners != null) {
      Vector listeners = enableListeners;
      int count = listeners.size();
      for (int i = 0; i < count; i++) {
        ((EnableListener) listeners.elementAt(i)).enableChange(e);
      }
    }
  }

  private boolean isChangeable() {
    if (valueHolder == null)
      return false;
    if (valueHolder instanceof VOValueHolder)  {
      return ((VOValueHolder)valueHolder).getObject() != null;
    } else if (valueHolder instanceof CollectionValueHolder) {
      if (((CollectionValueHolder)valueHolder).isEmpty())
        return false;
      else if (valueHolder instanceof VOCollectionValueHolder ||
               valueHolder instanceof VOListValueHolder)
        return ((CollectionValueHolder)valueHolder).getObject() != null;
      else
        return true;
    } else {
      return true;
    }
  }

}
```

File: com.taursys.swing.EnableListener
```java
package com.taursys.swing;

import java.util.*;

public interface EnableListener extends EventListener {

  public void enableChange(EnableEvent e);
}
```

File: com.taursys.swing.ListSelectionBinder
```java
package com.taursys.swing;

import javax.swing.event.*;
import com.taursys.model.*;
import javax.swing.*;

public class ListSelectionBinder implements ListSelectionListener {
  private com.taursys.model.ListValueHolder listValueHolder;
  private javax.swing.ListSelectionModel listSelectionModel;
  private boolean synchronizingPositions = false;

  public ListSelectionBinder() {
  }

  public ListValueHolder getListValueHolder() {
    return listValueHolder;
  }

  public void setListValueHolder(ListValueHolder newListValueHolder) {
    if (listValueHolder != null)
      listValueHolder.removeListSelectionListener(this);
    listValueHolder = newListValueHolder;
    listValueHolder.addListSelectionListener(this);
  }

  public void setListSelectionModel(ListSelectionModel newListSelectionModel) {
    if (listSelectionModel != null)
      listSelectionModel.removeListSelectionListener(this);
    listSelectionModel = newListSelectionModel;
    listSelectionModel.addListSelectionListener(this);
  }

  public javax.swing.ListSelectionModel getListSelectionModel() {
    return listSelectionModel;
  }

  public void valueChanged(ListSelectionEvent e) {
    if (!synchronizingPositions
        && listValueHolder != null && listSelectionModel != null) {
      if (e.getSource() == listValueHolder) {
        synchronizingPositions = true;
        int row = ((ListValueHolder)e.getSource()).getPosition();
        listSelectionModel.setSelectionInterval(row, row);
        synchronizingPositions = false;
      } else if (e.getSource() == listSelectionModel
          && !e.getValueIsAdjusting()
          && listSelectionModel.getMinSelectionIndex() > -1) {
        synchronizingPositions = true;
        listValueHolder.moveTo(listSelectionModel.getLeadSelectionIndex());
        synchronizingPositions = false;
      }
    }
  }
}
```

File: com.taursys.swing.EnableEvent
```java
package com.taursys.swing;

import java.util.*;

public class EnableEvent extends EventObject {
  private boolean enable;

  public EnableEvent(Object source, boolean enable) {
    super(source);
    this.enable = enable;
  }

  public boolean isEnable() {
    return enable;
  }
}
```

File: com.taursys.swing.MComboBoxBeanInfo
```java
package com.taursys.swing;

import java.beans.*;


public class MComboBoxBeanInfo extends SimpleBeanInfo {
  private Class beanClass = MComboBox.class;
  private String iconColor16x16Filename;
  private String iconColor32x32Filename;
  private String iconMono16x16Filename;
  private String iconMono32x32Filename;

  public MComboBoxBeanInfo() {
  }
  public PropertyDescriptor[] getPropertyDescriptors() {
    try {
      PropertyDescriptor _displayPropertyName = new PropertyDescriptor("displayPropertyName", beanClass, "getDisplayPropertyName", "setDisplayPropertyName");
      PropertyDescriptor _format = new PropertyDescriptor("format", beanClass, "getFormat", "setFormat");
      _format.setPropertyEditorClass(com.taursys.beans.editors.FormatEditor.class);
      PropertyDescriptor _formatPattern = new PropertyDescriptor("formatPattern", beanClass, "getFormatPattern", "setFormatPattern");
      PropertyDescriptor _MListCellRenderer = new PropertyDescriptor("MListCellRenderer", beanClass, "getMListCellRenderer", null);
      PropertyDescriptor _optionListValueHolder = new PropertyDescriptor("optionListValueHolder", beanClass, "getOptionListValueHolder", "setOptionListValueHolder");
      PropertyDescriptor[] pds = new PropertyDescriptor[] {
	      _displayPropertyName,
	      _format,
	      _formatPattern,
	      _MListCellRenderer,
	      _optionListValueHolder};
      return pds;





}
    catch(IntrospectionException ex) {
      ex.printStackTrace();
      return null;
    }
  }
  public java.awt.Image getIcon(int iconKind) {
    switch (iconKind) {
    case BeanInfo.ICON_COLOR_16x16:
        return iconColor16x16Filename != null ? loadImage(iconColor16x16Filename) : null;
    case BeanInfo.ICON_COLOR_32x32:
        return iconColor32x32Filename != null ? loadImage(iconColor32x32Filename) : null;
    case BeanInfo.ICON_MONO_16x16:
        return iconMono16x16Filename != null ? loadImage(iconMono16x16Filename) : null;
    case BeanInfo.ICON_MONO_32x32:
        return iconMono32x32Filename != null ? loadImage(iconMono32x32Filename) : null;
        }
    return null;
  }
  public BeanInfo[] getAdditionalBeanInfo() {
    Class superclass = beanClass.getSuperclass();
    try {
      BeanInfo superBeanInfo = Introspector.getBeanInfo(superclass);
      return new BeanInfo[] { superBeanInfo };
    }
    catch(IntrospectionException ex) {
      ex.printStackTrace();
      return null;
    }
  }
}
```

File: com.taursys.swing.MTextField
```java
package com.taursys.swing;

import javax.swing.*;
import com.taursys.model.*;
import com.taursys.util.*;
import javax.swing.text.*;

public class MTextField extends JTextField implements EnableListener {
  private InputVerifier secondaryInputVerifier = null;

  public MTextField() {
    super(new MDocument(),null,0);
    super.setInputVerifier(new MyInputVerifyer());
  }

  public MTextField(int javaDataType) throws UnsupportedDataTypeException {
    super(new MDocument(javaDataType), null, 0);
    super.setInputVerifier(new MyInputVerifyer());
  }

  public void setSecondaryInputVerifier(InputVerifier newInputVerifier) {
    secondaryInputVerifier = newInputVerifier;
  }

  public InputVerifier getSecondaryInputVerifier() {
    return secondaryInputVerifier;
  }

  private class MyInputVerifyer extends javax.swing.InputVerifier {
    private String errorMessage;

    public boolean verify(JComponent input) {
      errorMessage = "";
      try {
        if (getMDocument().isModified()) {
          getMDocument().storeValue();
        }
        if (secondaryInputVerifier == null)
          return true;
        else
          return secondaryInputVerifier.shouldYieldFocus(input);
      } catch (ModelException ex) {
        errorMessage = ex.getUserFriendlyMessage();
        return false;
      }
    }

    public boolean shouldYieldFocus(JComponent input) {
      if (verify(input)) {
        return true;
      }

      input.setInputVerifier(null);

      JOptionPane.showMessageDialog(input, errorMessage,
          "Input Exception", JOptionPane.ERROR_MESSAGE);

      input.setInputVerifier(this);

      return false;
    }
  }


  private MDocument getMDocument() {
    return (MDocument)getDocument();
  }

  public void setFormat(java.text.Format format) {
    getMDocument().setFormat(format);
  }

  public java.text.Format getFormat() {
    return getMDocument().getFormat();
  }

  public void setFormatPattern(String newPattern) {
    getMDocument().setFormatPattern(newPattern);
  }

  public String getFormatPattern() {
    return getMDocument().getFormatPattern();
  }

  public void setValueHolder(com.taursys.model.ValueHolder newValueHolder) {
    getMDocument().setValueHolder(newValueHolder);
  }

  public com.taursys.model.ValueHolder getValueHolder() {
    return getMDocument().getValueHolder();
  }

  public void setPropertyName(String newPropertyName) {
    getMDocument().setPropertyName(newPropertyName);
  }

  public String getPropertyName() {
    return getMDocument().getPropertyName();
  }

  public void setDocument(Document newDoc) {
    if (getDocument() instanceof MDocument)
      ((MDocument)getDocument()).removeEnableListener(this);
    super.setDocument(newDoc);
    if (newDoc instanceof MDocument)
      ((MDocument)newDoc).addEnableListener(this);
  }

  public void enableChange(EnableEvent e) {
    setEnabled(e.isEnable());
    setEditable(e.isEnable());
  }
}
```

File: com.taursys.swing.MButton
```java
package com.taursys.swing;

import javax.swing.JButton;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import com.taursys.model.event.ContentChangeEvent;
import com.taursys.model.ValueHolder;
import com.taursys.model.ObjectValueHolder;
import com.taursys.model.VOValueHolder;
import com.taursys.model.CollectionValueHolder;
import com.taursys.model.VOCollectionValueHolder;
import com.taursys.model.VOListValueHolder;

public class MButton extends JButton implements ChangeListener {
  private com.taursys.model.ValueHolder valueHolder;

  public MButton() {
    setValueHolder(new ObjectValueHolder());
  }

  public void stateChanged(ChangeEvent e) {
    if (e instanceof ContentChangeEvent) {
      setEnabled(!((ContentChangeEvent)e).isContentNull());
    }
  }

  public void setValueHolder(ValueHolder newValueHolder) {
    if (valueHolder != null)
      valueHolder.removeChangeListener(this);
    valueHolder = newValueHolder;
    valueHolder.addChangeListener(this);
    setEnabled(isChangeable());
  }

  public com.taursys.model.ValueHolder getValueHolder() {
    return valueHolder;
  }

  private boolean isChangeable() {
    if (valueHolder == null)
      return false;
    if (valueHolder instanceof VOValueHolder)  {
      return ((VOValueHolder)valueHolder).getObject() != null;
    } else if (valueHolder instanceof CollectionValueHolder) {
      if (((CollectionValueHolder)valueHolder).isEmpty())
        return false;
      else if (valueHolder instanceof VOCollectionValueHolder ||
               valueHolder instanceof VOListValueHolder)
        return ((CollectionValueHolder)valueHolder).getObject() != null;
      else
        return true;
    } else {
      return true;
    }
  }

}
```

File: com.taursys.swing.MDocument
```java
package com.taursys.swing;

import javax.swing.text.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import com.taursys.model.*;
import com.taursys.model.event.*;
import com.taursys.util.*;
import java.util.*;

public class MDocument extends PlainDocument implements ChangeListener {
  private TextModel model;
  private boolean ignoreChangeEvent = false;
  private boolean modified = false;
  private boolean isRetrieving = false;
  transient private Vector enableListeners;

  public MDocument() {
    setModel(createDefaultTextModel());
    retrieveValue();
  }

  public MDocument(int javaDataType) throws UnsupportedDataTypeException {
    setModel(new DefaultTextModel(javaDataType));
    retrieveValue();
  }

  public TextModel getModel() {
    return model;
  }

  public void setModel(TextModel newModel) {
    if (model != null) {
      if (newModel.getFormat() == null) {
        newModel.setFormat(model.getFormat());
        newModel.setFormatPattern(model.getFormatPattern());
      }
      model.removeChangeListener(this);
    }
    model = newModel;
    model.addChangeListener(this);
    fireEnableChange(
        new EnableEvent(this, isChangeable()));
  }

  protected TextModel createDefaultTextModel() {
    return new DefaultTextModel();
  }

  public void setFormat(java.text.Format format) {
    model.setFormat(format);
  }

  public java.text.Format getFormat() {
    return model.getFormat();
  }

  public void setFormatPattern(String newPattern) {
    model.setFormatPattern(newPattern);
  }

  public String getFormatPattern() {
    return model.getFormatPattern();
  }

  public void setValueHolder(com.taursys.model.ValueHolder newValueHolder) {
    model.setValueHolder(newValueHolder);
    fireEnableChange(
        new EnableEvent(this, isChangeable()));
  }

  public com.taursys.model.ValueHolder getValueHolder() {
    return model.getValueHolder();
  }

  public void setPropertyName(String newPropertyName) {
    model.setPropertyName(newPropertyName);
  }

  public String getPropertyName() {
    return model.getPropertyName();
  }

  public void retrieveValue() {
    if (!isRetrieving) {
      try {
        isRetrieving = true;
        remove(0, this.getLength());
        insertString(0, model.getText(), null);
        setModified(false);
      } catch (Exception ex) {
        ex.printStackTrace();
      } finally {
        isRetrieving = false;
      }
    }
  }

  public void storeValue() throws ModelException {
    try {
      ignoreChangeEvent = true;
      model.setText(getText(0, getLength()));
      setModified(false);
    } catch (BadLocationException ex) {
      ex.printStackTrace();
    } finally {
      ignoreChangeEvent = false;
    }
  }

  public void stateChanged(ChangeEvent e) {
    if (!ignoreChangeEvent && e instanceof ContentChangeEvent) {
      retrieveValue();
      fireEnableChange(new EnableEvent(this,
        !((ContentChangeEvent)e).isContentNull()));
    }
  }

  public void setModified(boolean newModified) {
    modified = newModified;
  }

  public boolean isModified() {
    return modified;
  }

  protected void insertUpdate(AbstractDocument.DefaultDocumentEvent chng,
      AttributeSet attr) {
    super.insertUpdate( chng,  attr);
  }

  protected void removeUpdate(AbstractDocument.DefaultDocumentEvent chng) {
    setModified(true);
    super.removeUpdate(chng);
  }

  protected Element createLeafElement(Element parent, AttributeSet a, int p0, int p1) {
    setModified(true);
    return super.createLeafElement( parent,  a,  p0,  p1);
  }

  public void remove(int offs, int len) throws BadLocationException {
    setModified(true);
    super.remove( offs,  len);
  }

  public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
    setModified(true);
    super.insertString( offs,  str,  a);
  }

  protected Element createBranchElement(Element parent, AttributeSet a) {
    setModified(true);
    return super.createBranchElement( parent,  a);
  }

  private boolean isChangeable() {
    if (getValueHolder() == null)
      return false;
    if (getValueHolder() instanceof VOValueHolder)  {
      return ((VOValueHolder)getValueHolder()).getObject() != null;
    } else if (getValueHolder() instanceof CollectionValueHolder) {
      if (((CollectionValueHolder)getValueHolder()).isEmpty())
        return false;
      else if (getValueHolder() instanceof VOCollectionValueHolder ||
               getValueHolder() instanceof VOListValueHolder)
        return ((CollectionValueHolder)getValueHolder()).getObject() != null;
      else
        return true;
    } else {
      return true;
    }
  }

  public synchronized void removeEnableListener(EnableListener l) {
    if (enableListeners != null && enableListeners.contains(l)) {
      Vector v = (Vector) enableListeners.clone();
      v.removeElement(l);
      enableListeners = v;
    }
  }

  public synchronized void addEnableListener(EnableListener l) {
    Vector v = enableListeners == null ? new Vector(2) : (Vector) enableListeners.clone();
    if (!v.contains(l)) {
      v.addElement(l);
      enableListeners = v;
    }
  }

  protected void fireEnableChange(EnableEvent e) {
    if (enableListeners != null) {
      Vector listeners = enableListeners;
      int count = listeners.size();
      for (int i = 0; i < count; i++) {
        ((EnableListener) listeners.elementAt(i)).enableChange(e);
      }
    }
  }
}
```

File: com.taursys.swing.MTextArea
```java
package com.taursys.swing;

import javax.swing.*;
import com.taursys.model.*;
import com.taursys.util.*;
import javax.swing.text.*;

public class MTextArea extends JTextArea  implements EnableListener {
  private InputVerifier secondaryInputVerifier = null;

  public MTextArea() {
    super(new MDocument(),null,0,0);
    super.setInputVerifier(new MyInputVerifyer());
  }

  public MTextArea(int javaDataType) throws UnsupportedDataTypeException {
    super(new MDocument(javaDataType), null, 0, 0);
    super.setInputVerifier(new MyInputVerifyer());
  }

  public void setSecondaryInputVerifier(InputVerifier newInputVerifier) {
    secondaryInputVerifier = newInputVerifier;
  }

  public InputVerifier getSecondaryInputVerifier() {
    return secondaryInputVerifier;
  }

  private class MyInputVerifyer extends javax.swing.InputVerifier {
    private String errorMessage;

    public boolean verify(JComponent input) {
      errorMessage = "";
      try {
        if (getMDocument().isModified()) {
          getMDocument().storeValue();
        }
        if (secondaryInputVerifier == null)
          return true;
        else
          return secondaryInputVerifier.shouldYieldFocus(input);
      } catch (ModelException ex) {
        errorMessage = ex.getUserFriendlyMessage();
        return false;
      }
    }

    public boolean shouldYieldFocus(JComponent input) {
      if (verify(input)) {
        return true;
      }

      input.setInputVerifier(null);

      JOptionPane.showMessageDialog(input, errorMessage,
          "Input Exception", JOptionPane.ERROR_MESSAGE);

      input.setInputVerifier(this);

      return false;
    }
  }


  private MDocument getMDocument() {
    return (MDocument)getDocument();
  }

  public void setFormat(java.text.Format format) {
    getMDocument().setFormat(format);
  }

  public java.text.Format getFormat() {
    return getMDocument().getFormat();
  }

  public void setFormatPattern(String newPattern) {
    getMDocument().setFormatPattern(newPattern);
  }

  public String getFormatPattern() {
    return getMDocument().getFormatPattern();
  }

  public void setValueHolder(com.taursys.model.ValueHolder newValueHolder) {
    getMDocument().setValueHolder(newValueHolder);
  }

  public com.taursys.model.ValueHolder getValueHolder() {
    return getMDocument().getValueHolder();
  }

  public void setPropertyName(String newPropertyName) {
    getMDocument().setPropertyName(newPropertyName);
  }

  public String getPropertyName() {
    return getMDocument().getPropertyName();
  }

  public void setDocument(Document newDoc) {
    if (getDocument() instanceof MDocument)
      ((MDocument)getDocument()).removeEnableListener(this);
    super.setDocument(newDoc);
    if (newDoc instanceof MDocument)
      ((MDocument)newDoc).addEnableListener(this);
  }

  public void enableChange(EnableEvent e) {
    setEnabled(e.isEnable());
    setEditable(e.isEnable());
  }
}


```

File: com.taursys.swing.MTable
```java
package com.taursys.swing;

import javax.swing.table.*;
import javax.swing.*;
import javax.swing.JTable;
import com.taursys.model.*;
import javax.swing.event.*;
import java.util.List;

public class MTable extends JTable {

  public MTable() {
    setAutoCreateColumnsFromModel(true);
    getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  }

  protected TableModel createDefaultDataModel() {
    MTableModel m = new MTableModel();
    m.setListSelectionModel(getSelectionModel());
    return m;
  }

  public void setValueObjectClass(Class newValueObjectClass) {
    if (getModel() != null && getModel() instanceof MTableModel) {
      getMTableModel().setValueObjectClass(newValueObjectClass);
    }
  }

  public Class getValueObjectClass() {
    if (getModel() != null && getModel() instanceof MTableModel) {
      return getMTableModel().getValueObjectClass();
    } else {
      return null;
    }
  }

  public void setList(List newList) {
    if (getModel() != null && getModel() instanceof MTableModel) {
      getMTableModel().setList(newList);
    }
  }

  public List getList() {
    if (getModel() != null && getModel() instanceof MTableModel) {
      return getMTableModel().getList();
    } else {
      return null;
    }
  }

  protected MTableModel getMTableModel() {
    return (MTableModel)getModel();
  }

  public ListValueHolder getListValueHolder() {
    return getMTableModel().getListValueHolder();
  }

  public void setListValueHolder(ListValueHolder newListValueHolder) {
    getMTableModel().setListValueHolder(newListValueHolder);
  }

  public void setColumnNames(String[] newColumnNames) {
    getMTableModel().setColumnNames(newColumnNames);
  }

  public String[] getColumnNames() {
    return getMTableModel().getColumnNames();
  }

  public void addColumn(TableColumn newColumn) {
    if (newColumn != null && newColumn instanceof MTableColumn) {
      MTableColumn col = (MTableColumn)newColumn;
      String propName = col.getPropertyName();
      if (propName != null && propName.length() > 0) {
        int index = getMTableModel().findColumn(propName);
        if (index == -1) {
          getMTableModel().addColumn(propName);
          index = getMTableModel().findColumn(propName);
        }
        col.setModelIndex(index);
        col.setValueHolder(getMTableModel().getListValueHolder());
        super.addColumn(newColumn);
      } else {
        com.taursys.debug.Debug.error("Attempt to add a MTableColumn without a propertyName");
      }
    } else {
      super.addColumn(newColumn);
    }
  }
}
```

File: com.taursys.swing.MTableColumn
```java
package com.taursys.swing;

import javax.swing.*;
import javax.swing.table.*;
import com.taursys.model.ValueHolder;

public class MTableColumn extends TableColumn {
  private String propertyName;
  private com.taursys.model.ValueHolder valueHolder;

  public MTableColumn() {
    super(0, 75, new MTableCellRenderer(), null);
  }

  public MTableCellRenderer getMTableCellRenderer() {
    return (MTableCellRenderer)getCellRenderer();
  }

  public void setFormat(java.text.Format format) {
    getMTableCellRenderer().setFormat(format);
  }

  public java.text.Format getFormat() {
    return getMTableCellRenderer().getFormat();
  }

  public void setFormatPattern(String newPattern) {
    getMTableCellRenderer().setFormatPattern(newPattern);
  }

  public String getFormatPattern() {
    return getMTableCellRenderer().getFormatPattern();
  }

  public void setHorizontalAlignment(int alignment) {
    getMTableCellRenderer().setHorizontalAlignment(alignment);
  }

  public int getHorizontalAlignment() {
    return getMTableCellRenderer().getHorizontalAlignment();
  }

  public void setPropertyName(String newPropertyName) {
    propertyName = newPropertyName;
  }

  public String getPropertyName() {
    return propertyName;
  }

  public void setValueHolder(ValueHolder newValueHolder) {
    valueHolder = newValueHolder;
  }

  public com.taursys.model.ValueHolder getValueHolder() {
    return valueHolder;
  }

  public void setDisplayHeading(String newDisplayHeading) {
    setHeaderValue(newDisplayHeading);
  }

  public String getDisplayHeading() {
    if (getHeaderValue() == null)
      return null;
    else
      return getHeaderValue().toString();
  }
}
```

File: com.taursys.swing.test.PersonVO
```java
package com.taursys.swing.test;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.text.ParseException;

public class PersonVO implements Serializable {
  private String lastName;
  private String firstName;
  private int favoriteColorID;
  private BigDecimal salary;
  private String address1;
  private String address2;
  private String city;
  private String state;
  private String postalCode;
  private int personID;
  private Integer supervisorID;
  private java.util.Date birthdate;
  private static final DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
  private String country;
  private String notes;

  protected static Date toDate(String dateString) {
    try {
      return df.parse(dateString);
    } catch (ParseException ex) {
      ex.printStackTrace();
      return null;
    }
  }

  public PersonVO() {
  }

  public PersonVO(
      String lastName
      ,String firstName
      ,int favoriteColorID
      ,BigDecimal salary
      ,String address1
      ,String address2
      ,String city
      ,String state
      ,String postalCode
      ,int personID
      ,Integer supervisorID
      ,Date birthdate
      ) {
    this.lastName = lastName;
    this.firstName = firstName;
    this.favoriteColorID = favoriteColorID;
    this.salary = salary;
    this.address1 = address1;
    this.address2 = address2;
    this.city = city;
    this.state = state;
    this.postalCode = postalCode;
    this.personID = personID;
    this.supervisorID = supervisorID;
    this.birthdate = birthdate;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public String getLastName() {
    return lastName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public String getFirstName() {
    return firstName;
  }

  public void setFavoriteColorID(int favoriteColorID) {
    this.favoriteColorID = favoriteColorID;
  }

  public int getFavoriteColorID() {
    return favoriteColorID;
  }

  public void setSalary(BigDecimal salary) {
    this.salary = salary;
  }

  public BigDecimal getSalary() {
    return salary;
  }

  public void setAddress1(String address1) {
    this.address1 = address1;
  }

  public String getAddress1() {
    return address1;
  }

  public void setAddress2(String address2) {
    this.address2 = address2;
  }

  public String getAddress2() {
    return address2;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public String getCity() {
    return city;
  }

  public void setState(String state) {
    this.state = state;
  }

  public String getState() {
    return state;
  }

  public void setPostalCode(String newPostalCode) {
    this.postalCode = postalCode;
  }

  public String getPostalCode() {
    return postalCode;
  }

  public void setPersonID(int personID) {
    this.personID = personID;
  }

  public int getPersonID() {
    return personID;
  }

  public void setSupervisorID(Integer supervisorID) {
    this.supervisorID = supervisorID;
  }

  public Integer getSupervisorID() {
    return supervisorID;
  }

  public void setBirthdate(Date birthdate) {
    this.birthdate = birthdate;
  }

  public Date getBirthdate() {
    return birthdate;
  }

  public void setCountry(String country) {
    this.country = country;
  }

  public String getCountry() {
    return country;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }

  public String getNotes() {
    return notes;
  }


  public String getFullName() {
    return firstName + " " + lastName;
  }


  public String toString() {
    return super.toString() + " [personID="+personID+" fullName="+getFullName()+"]";
  }

}
```

File: com.taursys.swing.test.TestFrame
```java
package com.taursys.swing.test;

import com.taursys.model.*;
import com.taursys.model.test.*;
import javax.swing.*;
import java.awt.*;
import com.taursys.swing.*;
import java.awt.event.*;
import java.util.*;
import java.math.BigDecimal;

public class TestFrame extends javax.swing.JFrame {
  private VOComparator sorter = new VOComparator();
  private VOListValueHolder listHolder = new VOListValueHolder();
  private MTextField fullNameField = new MTextField();
  private JLabel jLabel1 = new JLabel();
  private JScrollPane jScrollPane1 = new JScrollPane();
  private MTable mTable = new MTable();
  private MTableColumn fullNameColumn = new MTableColumn();
  private MButton addRowButton = new MButton();
  private MButton deleteRowButton = new MButton();
  private MButton retrieveRowsButton = new MButton();
  private PersonVO[] people = new PersonVO[] {
    new BeverlyCrusherVO(),
    new WilliamTRikerVO(),
    new JeanLucPicardVO()
  };
  private MComboBox supervisorCombo = new MComboBox();
  private JLabel jLabel2 = new JLabel();
  private MTableColumn supervisorColumn = new MTableColumn();
  private MTextField firstNameField = new MTextField();
  private MTextField lastNameField = new MTextField();
  private JLabel jLabel3 = new JLabel();
  private JLabel jLabel4 = new JLabel();
  private MComboBox mComboBox1 = new MComboBox(new String[] {
    "red",
    "yellow",
    "green",
  });
  private JLabel jLabel5 = new JLabel();
  private MTextField unboundField = new MTextField();
  private JLabel jLabel6 = new JLabel();
  private JScrollPane jScrollPane2 = new JScrollPane();
  private MTextArea mTextArea1 = new MTextArea();
  private GridBagLayout gridBagLayout1 = new GridBagLayout();

  public TestFrame() {
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  private void jbInit() throws Exception {
    this.setSize(600,500);
    this.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
    this.setTitle("MTable Tests");
    this.getContentPane().setLayout(gridBagLayout1);
    sorter.setPropertyName("fullName");
    jLabel1.setText("Full name:");
    listHolder.setValueObjectClass(PersonVO.class);
    listHolder.setComparator(sorter);
    mTable.setListValueHolder(listHolder);
    fullNameField.setPropertyName("fullName");
    fullNameField.setValueHolder(listHolder);
    fullNameColumn.setDisplayHeading("Full Name");
    fullNameColumn.setPropertyName("fullName");
    fullNameColumn.setValueHolder(listHolder);
    mTable.addColumn(fullNameColumn);
    addRowButton.setText("Add Row");
    addRowButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        addRowButton_actionPerformed(e);
      }
    });
    deleteRowButton.setText("Delete Row");
    deleteRowButton.setValueHolder(listHolder);
    deleteRowButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        deleteRowButton_actionPerformed(e);
      }
    });
    retrieveRowsButton.setText("Retrieve Rows");
    retrieveRowsButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        retrieveRowsButton_actionPerformed(e);
      }
    });
    jLabel2.setText("Supervisor:");
    supervisorCombo.setListValueHolder(listHolder);
    supervisorCombo.setDisplayPropertyName("firstName");
    supervisorCombo.setValueHolder(listHolder);
    supervisorCombo.setPropertyName("supervisorID");
    supervisorCombo.setListPropertyName("personID");
    supervisorCombo.setNullAllowed(true);
    supervisorCombo.setNullDisplay("--No Supervisor--");
    supervisorColumn.setDisplayHeading("Supervisor ID");
    supervisorColumn.setPropertyName("supervisorID");
    supervisorColumn.setValueHolder(listHolder);
    mTable.addColumn(supervisorColumn);
    firstNameField.setPropertyName("firstName");
    firstNameField.setValueHolder(listHolder);
    jLabel3.setText("First name:");
    jLabel4.setText("Last name:");
    lastNameField.setPropertyName("lastName");
    lastNameField.setValueHolder(listHolder);
    jLabel5.setText("Unbound Combo");
    unboundField.setText("Unbound Field");
    jLabel6.setText("Unbound field:");
    mTextArea1.setValueHolder(listHolder);
    mTextArea1.setPropertyName("notes");
    this.getContentPane().add(jLabel1, new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(14, 49, 0, 9), 0, 0));
    this.getContentPane().add(fullNameField, new GridBagConstraints(1, 1, 2, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(11, 10, 0, 40), 195, 0));
    this.getContentPane().add(supervisorCombo, new GridBagConstraints(1, 4, 2, 2, 1.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(10, 10, 37, 20), 68, 0));
    this.getContentPane().add(jLabel2, new GridBagConstraints(0, 4, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(13, 45, 0, 8), 0, 1));
    this.getContentPane().add(firstNameField, new GridBagConstraints(1, 2, 2, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(17, 8, 0, 42), 195, 0));
    this.getContentPane().add(lastNameField, new GridBagConstraints(1, 3, 2, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(9, 10, 0, 43), 192, 0));
    this.getContentPane().add(jLabel3, new GridBagConstraints(0, 2, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(20, 48, 0, 0), 0, 0));
    this.getContentPane().add(jLabel4, new GridBagConstraints(0, 3, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(12, 46, 0, 9), 0, 0));
    this.getContentPane().add(mComboBox1, new GridBagConstraints(1, 5, 2, 1, 1.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(18, 9, 0, 23), 145, 0));
    this.getContentPane().add(jLabel5, new GridBagConstraints(0, 5, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(26, 16, 0, 0), 0, 0));
    this.getContentPane().add(unboundField, new GridBagConstraints(1, 0, 2, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(18, 10, 0, 40), 112, 0));
    this.getContentPane().add(jLabel6, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(18, 26, 0, 0), 0, 0));
    this.getContentPane().add(addRowButton, new GridBagConstraints(0, 6, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(19, 16, 0, 13), 0, 0));
    this.getContentPane().add(deleteRowButton, new GridBagConstraints(1, 6, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(17, 11, 0, 0), 0, 0));
    this.getContentPane().add(retrieveRowsButton, new GridBagConstraints(2, 6, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(17, 22, 0, 0), -10, 0));
    this.getContentPane().add(jScrollPane1, new GridBagConstraints(0, 7, 4, 1, 1.0, 1.0
            ,GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(16, 16, 58, 24), 107, -299));
    this.getContentPane().add(jScrollPane2, new GridBagConstraints(3, 0, 1, 7, 1.0, 1.0
            ,GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(18, 20, 0, 24), 110, 204));
    jScrollPane2.getViewport().add(mTextArea1, null);
    jScrollPane1.getViewport().add(mTable, null);
  }

  static public void main(String[] args) {
    try {
      TestFrame frame = new TestFrame();
      frame.setVisible(true);
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }

  void addRowButton_actionPerformed(ActionEvent e) {
    listHolder.add(new PersonVO());
  }

  void deleteRowButton_actionPerformed(ActionEvent e) {
    listHolder.remove();
  }

  void retrieveRowsButton_actionPerformed(ActionEvent e) {
    listHolder.setList(new ArrayList(Arrays.asList(people)));
  }
}
```

File: com.taursys.swing.test.BeverlyCrusherVO
```java
package com.taursys.swing.test;

import java.util.Date;
import java.math.BigDecimal;

public class BeverlyCrusherVO extends com.taursys.swing.test.PersonVO {

  public BeverlyCrusherVO() {
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  private void jbInit() throws Exception {
    this.setPersonID(20433);
    this.setLastName("Crusher");
    this.setFirstName("Beverly");
    this.setAddress1("3402 47th SW");
    this.setCity("Seattle");
    this.setState("WA");
    this.setPostalCode("98116");
    this.setSalary(new BigDecimal("2500.00"));
    this.setBirthdate(toDate("10/13/2324"));
    this.setNotes("She had been awarded many types of recognition during her career.");
    this.setSupervisorID(new Integer(18622));
  }
}
```

File: com.taursys.swing.test.WilliamTRikerVO
```java
package com.taursys.swing.test;

import java.util.Date;
import java.math.BigDecimal;

public class WilliamTRikerVO extends com.taursys.swing.test.PersonVO {

  public WilliamTRikerVO() {
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  private void jbInit() throws Exception {
    this.setPersonID(22604);
    this.setLastName("Riker");
    this.setFirstName("William");
    this.setAddress1("121 Egan");
    this.setCity("Valdez");
    this.setState("AK");
    this.setPostalCode("99686");
    this.setSalary(new BigDecimal("3950.00"));
    this.setBirthdate(toDate("11/02/2335"));
    this.setNotes("He was always in trouble while attending shool. He had a short temper, " +
    "and was not very patient.");
    this.setSupervisorID(new Integer(18622));
  }
}
```

File: com.taursys.swing.test.TestFrameParentChild
```java
package com.taursys.swing.test;

import java.awt.*;
import javax.swing.*;
import com.taursys.swing.*;
import com.taursys.model.*;
import java.awt.event.*;

public class TestFrameParentChild extends javax.swing.JFrame {
  private JScrollPane jScrollPane1 = new JScrollPane();
  private JScrollPane jScrollPane2 = new JScrollPane();
  private MButton newInvoiceButton = new MButton();
  private MButton removeInvoiceButton = new MButton();
  private MButton newItemButton = new MButton();
  private MButton removeItemButton = new MButton();
  private MTextField invoiceNumberField = new MTextField();
  private MTextField issueDateField = new MTextField();
  private MTextField customerIDField = new MTextField();
  private MTextField termsField = new MTextField();
  private JLabel jLabel1 = new JLabel();
  private JLabel jLabel2 = new JLabel();
  private JLabel jLabel3 = new JLabel();
  private JLabel jLabel4 = new JLabel();
  private MTable invoiceTable = new MTable();
  private VOListValueHolder invoices = new VOListValueHolder();
  private VOListValueHolder items = new VOListValueHolder();
  private MTableColumn invoiceNumberCol = new MTableColumn();
  private MTableColumn issueDateCol = new MTableColumn();
  private MTableColumn customerIDCol = new MTableColumn();
  private MTableColumn termsCol = new MTableColumn();
  private MTextField itemNoField = new MTextField();
  private JLabel jLabel5 = new JLabel();
  private MTextField quantityField = new MTextField();
  private JLabel jLabel6 = new JLabel();
  private MTextField productIDField = new MTextField();
  private JLabel jLabel7 = new JLabel();
  private MTextField unitPriceField = new MTextField();
  private JLabel jLabel8 = new JLabel();
  private MTable itemTable = new MTable();
  private MTableColumn itemNoCol = new MTableColumn();
  private MTableColumn quantityCol = new MTableColumn();
  private MTableColumn productIDCol = new MTableColumn();
  private MTableColumn unitPriceCol = new MTableColumn();
  private GridBagLayout gridBagLayout1 = new GridBagLayout();

  public TestFrameParentChild() {
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  private void jbInit() throws Exception {
    invoices.setValueObjectClass(com.taursys.swing.test.InvoiceVO.class);
    items.setValueObjectClass(com.taursys.swing.test.InvoiceItemVO.class);
    items.setParentValueHolder(invoices);
    items.setParentPropertyName("items");
    this.setSize(650,500);
    this.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
    this.setTitle("MTable Tests");
    this.getContentPane().setLayout(gridBagLayout1);
    newInvoiceButton.setText("New");
    newInvoiceButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        newInvoiceButton_actionPerformed(e);
      }
    });
    removeInvoiceButton.setText("Remove");
    removeInvoiceButton.setValueHolder(invoices);
    removeInvoiceButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        removeInvoiceButton_actionPerformed(e);
      }
    });
    newItemButton.setText("New");
    newItemButton.setValueHolder(invoices);
    newItemButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        newItemButton_actionPerformed(e);
      }
    });
    removeItemButton.setText("Remove");
    removeItemButton.setValueHolder(items);
    removeItemButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(ActionEvent e) {
        removeItemButton_actionPerformed(e);
      }
    });
    issueDateField.setFormat(java.text.SimpleDateFormat.getInstance());
    issueDateField.setFormatPattern("MM/dd/yyyy");
    issueDateField.setPropertyName("issueDate");
    issueDateField.setValueHolder(invoices);
    issueDateField.setPreferredSize(new Dimension(100, 19));
    customerIDField.setPropertyName("customerID");
    customerIDField.setValueHolder(invoices);
    customerIDField.setPreferredSize(new Dimension(100, 19));
    termsField.setPropertyName("terms");
    termsField.setValueHolder(invoices);
    termsField.setPreferredSize(new Dimension(150, 19));
    jLabel1.setText("Inv no:");
    jLabel2.setText("Date:");
    jLabel3.setText("Cust ID:");
    jLabel4.setText("Terms:");
    invoiceNumberField.setPropertyName("invoiceNumber");
    invoiceNumberField.setValueHolder(invoices);
    invoiceNumberField.setPreferredSize(new Dimension(100, 19));
    invoiceNumberCol.setPropertyName("invoiceNumber");
    issueDateCol.setFormat(java.text.SimpleDateFormat.getInstance());
    issueDateCol.setFormatPattern("MM/dd/yyyy");
    issueDateCol.setPropertyName("issueDate");
    customerIDCol.setPropertyName("customerID");
    termsCol.setPropertyName("terms");
    invoiceTable.setListValueHolder(invoices);
    invoiceTable.addColumn(invoiceNumberCol);
    invoiceTable.addColumn(customerIDCol);
    invoiceTable.addColumn(issueDateCol);
    invoiceTable.addColumn(termsCol);
    jLabel5.setText("Item no:");
    itemNoField.setPropertyName("itemNo");
    itemNoField.setValueHolder(items);
    quantityField.setPropertyName("quantity");
    quantityField.setValueHolder(items);
    jLabel6.setText("Quantity:");
    productIDField.setPropertyName("productID");
    productIDField.setValueHolder(items);
    jLabel7.setText("Product ID:");
    unitPriceField.setFormat(java.text.DecimalFormat.getInstance());
    unitPriceField.setFormatPattern("###,##0.00");
    unitPriceField.setPropertyName("unitPrice");
    unitPriceField.setValueHolder(items);
    jLabel8.setText("Unit price:");
    itemNoCol.setPropertyName("itemNo");
    quantityCol.setPropertyName("quantity");
    productIDCol.setPropertyName("productID");
    unitPriceCol.setFormat(java.text.DecimalFormat.getInstance());
    unitPriceCol.setFormatPattern("###,##0.00");
    unitPriceCol.setPropertyName("unitPrice");
    itemTable.setListValueHolder(items);
    itemTable.addColumn(itemNoCol);
    itemTable.addColumn(quantityCol);
    itemTable.addColumn(productIDCol);
    itemTable.addColumn(unitPriceCol);
    this.getContentPane().add(jScrollPane2, new GridBagConstraints(0, 8, 5, 1, 1.0, 1.0
            ,GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(11, 24, 25, 23), 124, -332));
    jScrollPane2.getViewport().add(itemTable, null);
    this.getContentPane().add(jScrollPane1, new GridBagConstraints(0, 3, 5, 1, 1.0, 1.0
            ,GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(11, 18, 0, 23), 130, -308));
    jScrollPane1.getViewport().add(invoiceTable, null);
    this.getContentPane().add(newInvoiceButton, new GridBagConstraints(0, 2, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(17, 25, 0, 6), 0, 0));
    this.getContentPane().add(removeInvoiceButton, new GridBagConstraints(1, 2, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(18, 47, 0, 0), 0, 0));
    this.getContentPane().add(newItemButton, new GridBagConstraints(0, 7, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(11, 31, 0, 0), 0, 0));
    this.getContentPane().add(removeItemButton, new GridBagConstraints(1, 7, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(12, 49, 0, 0), -1, 0));
    this.getContentPane().add(issueDateField, new GridBagConstraints(1, 1, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(8, 0, 0, 29), 1, 0));
    this.getContentPane().add(customerIDField, new GridBagConstraints(3, 0, 2, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(13, 6, 0, 246), 3, 0));
    this.getContentPane().add(termsField, new GridBagConstraints(3, 1, 2, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(10, 6, 0, 207), -8, 0));
    this.getContentPane().add(jLabel2, new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(11, 52, 0, 8), 0, 0));
    this.getContentPane().add(jLabel1, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(13, 44, 0, 6), 0, 0));
    this.getContentPane().add(invoiceNumberField, new GridBagConstraints(1, 0, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(13, 0, 0, 26), 4, 0));
    this.getContentPane().add(itemNoField, new GridBagConstraints(1, 4, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(23, 0, 0, 17), 109, 0));
    this.getContentPane().add(jLabel5, new GridBagConstraints(0, 4, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(26, 27, 0, 14), 0, 0));
    this.getContentPane().add(productIDField, new GridBagConstraints(1, 6, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(13, 0, 0, 16), 110, 0));
    this.getContentPane().add(jLabel7, new GridBagConstraints(0, 6, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(16, 18, 0, 6), 0, 0));
    this.getContentPane().add(jLabel6, new GridBagConstraints(0, 5, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(16, 28, 0, 7), 0, 0));
    this.getContentPane().add(quantityField, new GridBagConstraints(1, 5, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(13, 0, 0, 16), 110, 0));
    this.getContentPane().add(unitPriceField, new GridBagConstraints(4, 4, 1, 1, 1.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(24, 18, 0, 174), 106, 0));
    this.getContentPane().add(jLabel8, new GridBagConstraints(2, 4, 2, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(26, 37, 0, 0), 0, 0));
    this.getContentPane().add(jLabel4, new GridBagConstraints(2, 1, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(12, 0, 0, 0), 0, 0));
    this.getContentPane().add(jLabel3, new GridBagConstraints(2, 0, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(13, 0, 0, 0), 0, 0));
  }

  static public void main(String[] args) {
    try {
      TestFrameParentChild frame = new TestFrameParentChild();
      frame.setVisible(true);
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }

  void newInvoiceButton_actionPerformed(ActionEvent e) {
    invoices.add(new InvoiceVO());
  }

  void removeInvoiceButton_actionPerformed(ActionEvent e) {
    invoices.remove();
  }

  void newItemButton_actionPerformed(ActionEvent e) {
    items.add(new InvoiceItemVO());
  }

  void removeItemButton_actionPerformed(ActionEvent e) {
    items.remove();
  }
}
```

File: com.taursys.swing.test.InvoiceItemVO
```java
package com.taursys.swing.test;

import java.math.BigDecimal;

public class InvoiceItemVO {
  private int itemNo;
  private int quantity;
  private String productID;
  private BigDecimal unitPrice;
  private int quantityShipped;

  public InvoiceItemVO() {
  }

  public InvoiceItemVO(
      int itemNo
      ,int quantity
      ,String productID
      ,BigDecimal unitPrice
      ,int quantityShipped
      ) {
    this.itemNo = itemNo;
    this.quantity = quantity;
    this.productID = productID;
    this.unitPrice = unitPrice;
    this.quantityShipped = quantityShipped;
  }

  public void setItemNo(int itemNo) {
    this.itemNo = itemNo;
  }

  public int getItemNo() {
    return itemNo;
  }

  public void setQuantity(int quantity) {
    this.quantity = quantity;
  }

  public int getQuantity() {
    return quantity;
  }

  public void setProductID(String productID) {
    this.productID = productID;
  }

  public String getProductID() {
    return productID;
  }

  public void setUnitPrice(BigDecimal unitPrice) {
    this.unitPrice = unitPrice;
  }

  public BigDecimal getUnitPrice() {
    return unitPrice;
  }

  public void setQuantityShipped(int quantityShipped) {
    this.quantityShipped = quantityShipped;
  }

  public int getQuantityShipped() {
    return quantityShipped;
  }

}
```

File: com.taursys.swing.test.InvoiceVO
```java
package com.taursys.swing.test;

import java.util.Date;
import java.util.ArrayList;

public class InvoiceVO {
  private int invoiceNumber;
  private Date issueDate;
  private int customerID;
  private AddressVO shippingAddress;
  private String terms;
  private ArrayList items = new ArrayList();

  public InvoiceVO() {
  }

  public InvoiceVO(
      int invoiceNumber
      ,Date issueDate
      ,int customerID
      ,AddressVO shippingAddress
      ,String terms
      ,ArrayList items
      ) {
    this.invoiceNumber = invoiceNumber;
    this.issueDate = issueDate;
    this.customerID = customerID;
    this.shippingAddress = shippingAddress;
    this.terms = terms;
    this.items = items;
  }

  public void setInvoiceNumber(int invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }

  public int getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setIssueDate(Date issueDate) {
    this.issueDate = issueDate;
  }

  public Date getIssueDate() {
    return issueDate;
  }

  public void setCustomerID(int customerID) {
    this.customerID = customerID;
  }

  public int getCustomerID() {
    return customerID;
  }

  public void setShippingAddress(AddressVO shippingAddress) {
    this.shippingAddress = shippingAddress;
  }

  public AddressVO getShippingAddress() {
    return shippingAddress;
  }

  public void setTerms(String terms) {
    this.terms = terms;
  }

  public String getTerms() {
    return terms;
  }

  public void setItems(ArrayList items) {
    this.items = items;
  }

  public ArrayList getItems() {
    return items;
  }

}
```

File: com.taursys.swing.test.AddressVO
```java
package com.taursys.swing.test;

public class AddressVO {
  private String addressLine1;
  private String addressLine2;
  private String city;
  private String state;
  private String postalCode;
  private String country;
  private String attn;

  public AddressVO() {
  }

  public AddressVO(
      String addressLine1
      ,String addressLine2
      ,String city
      ,String state
      ,String postalCode
      ,String country
      ,String attn
      ) {
    this.addressLine1 = addressLine1;
    this.addressLine2 = addressLine2;
    this.city = city;
    this.state = state;
    this.postalCode = postalCode;
    this.country = country;
    this.attn = attn;
  }

  public void setAddressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
  }

  public String getAddressLine1() {
    return addressLine1;
  }

  public void setAddressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
  }

  public String getAddressLine2() {
    return addressLine2;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public String getCity() {
    return city;
  }

  public void setState(String state) {
    this.state = state;
  }

  public String getState() {
    return state;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }

  public String getPostalCode() {
    return postalCode;
  }

  public void setCountry(String country) {
    this.country = country;
  }

  public String getCountry() {
    return country;
  }

  public void setAttn(String attn) {
    this.attn = attn;
  }

  public String getAttn() {
    return attn;
  }

}
```

File: com.taursys.swing.test.JeanLucPicardVO
```java
package com.taursys.swing.test;

import java.util.Date;
import java.math.BigDecimal;

public class JeanLucPicardVO extends com.taursys.swing.test.PersonVO {

  public JeanLucPicardVO() {
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  private void jbInit() throws Exception {
    this.setPersonID(18622);
    this.setLastName("Picard");
    this.setFirstName("Jean Luc");
    this.setAddress1("2033 Mission Street");
    this.setCity("San Francisco");
    this.setState("CA");
    this.setPostalCode("94110");
    this.setSalary(new BigDecimal("4500.00"));
    this.setBirthdate(toDate("7/13/2305"));
    this.setNotes("He was raised on a vinyard in France.");
  }
}
```

File: com.taursys.html.HTMLInputText
```java
package com.taursys.html;

import com.taursys.xml.render.AttributeTextFieldRenderer;
import com.taursys.xml.render.TextFieldRenderer;
import com.taursys.xml.TextField;

public class HTMLInputText extends TextField {

  public HTMLInputText() {
    setAttributeName("value");
  }

  public HTMLInputText(int javaDataType) {
    super(javaDataType);
    setAttributeName("value");
  }

  protected TextFieldRenderer createDefaultRenderer() {
    return new AttributeTextFieldRenderer(this);
  }
}
```

File: com.taursys.html.HTMLComponentFactory
```java
package com.taursys.html;

import java.util.*;
import java.text.*;
import org.w3c.dom.*;
import com.taursys.xml.*;
import com.taursys.html.*;
import com.taursys.model.*;
import com.taursys.debug.*;
import com.taursys.dom.*;

public class HTMLComponentFactory extends ComponentFactory {
  private static HTMLComponentFactory factory;

  public HTMLComponentFactory() {
    super();
  }

  public static HTMLComponentFactory getInstance() {
    if (factory == null) {
      factory = new HTMLComponentFactory();
    }
    return factory;
  }


  protected void initTagTable() {
    Vector suggestions = new Vector();
    suggestions.add(HTMLAnchorURL.class.getName());
    tagTable.put("a", suggestions);

    suggestions = new Vector();
    suggestions.add(HTMLSelect.class.getName());
    tagTable.put("select", suggestions);

    suggestions = new Vector();
    suggestions.add(TextField.class.getName());
    tagTable.put("span", suggestions);

    suggestions = new Vector();
    suggestions.add(TextField.class.getName());
    tagTable.put("td", suggestions);

    suggestions = new Vector();
    suggestions.add(HTMLTextArea.class.getName());
    tagTable.put("textarea", suggestions);

    suggestions = new Vector();
    suggestions.add(HTMLInputText.class.getName());
    tagTable.put("input-hidden", suggestions);

    suggestions = new Vector();
    suggestions.add(HTMLInputText.class.getName());
    tagTable.put("input-password", suggestions);

    suggestions = new Vector();
    suggestions.add(Button.class.getName());
    suggestions.add(Trigger.class.getName());
    tagTable.put("input-submit", suggestions);

    suggestions = new Vector();
    suggestions.add(HTMLInputText.class.getName());
    tagTable.put("input-text", suggestions);

    suggestions = new Vector();
    suggestions.add(HTMLCheckBox.class.getName());
    tagTable.put("input-checkbox", suggestions);
  }

  public Vector getSuggestedComponents(Element element) {
    String tagName = element.getTagName();
    if (tagName.equals("input"))
      tagName += "-" + element.getAttribute("type");
    String id = element.getAttribute("id");
    return getSuggestedComponents(tagName, id, element);
  }

  protected Component createComponentForElement(String id, Element element,
      ValueHolder[] holders) {
    if (id == null)
      throw new IllegalArgumentException(
          "Null id passed to createComponentForElement");

    int pos = id.indexOf(ID_DELIMITER);
    if (pos < 1)
      return null;
    String alias = id.substring(0, pos);

    pos += 2;
    if (id.length() <= pos)
      return null;
    String propertyName = id.substring(pos);
    pos = propertyName.indexOf(ID_DELIMITER);
    if (pos != -1)
      propertyName = propertyName.substring(0, pos);

    ValueHolder holder = null;
    for (int i = 0; i < holders.length; i++) {
      holder = holders[i];
      if (alias.equals(holder.getAlias()))
        break;
    }
    if (holder == null)
      return null;

    Vector suggestions = getSuggestedComponents(element);
    if (suggestions.size() == 0)
      return null;
    Component component = null;
    try {
      component = (Component)
          Class.forName((String)suggestions.get(0)).newInstance();
    } catch (Exception ex) {
      Debug.error("Error during create component: " + ex.getMessage(), ex);
      return null;
    }

    if (component instanceof AbstractField) {
      ((AbstractField)component).setId(id);
      ((AbstractField)component).setValueHolder(holder);
      ((AbstractField)component).setPropertyName(propertyName);
      String parameter = element.getAttribute("name");
      if (parameter != null && parameter.length() == 0)
        parameter = null;
      ((AbstractField)component).setParameter(parameter);
      setupFormat((AbstractField)component, element);
      return component;
    } else if (component instanceof Template) {
      ((Template)component).setId(id);
      if (holder instanceof CollectionValueHolder) {
        ((Template)component).setCollectionValueHolder((CollectionValueHolder)holder);
        return component;
      } else {
        return null;
      }
    } else {
      return null;
    }
  }

  private void setupFormat(AbstractField field, Element element) {
    String formatInfo = element.getAttribute("value");
    if (formatInfo == null || formatInfo.length() == 0)
      formatInfo = element.getAttribute("href");
    if (formatInfo == null || formatInfo.length() == 0)
      formatInfo = DOM_1_20000929_DocumentAdapter.getElementText(element);
    if (formatInfo != null && formatInfo.length() > 0) {
      if (formatInfo.startsWith("DATE:")) {
        field.setFormat(new java.text.SimpleDateFormat());
        field.setFormatPattern(formatInfo.substring(5));
      } else if (formatInfo.startsWith("NUMBER:")) {
        field.setFormat(new DecimalFormat());
        field.setFormatPattern(formatInfo.substring(7));
      } else if (formatInfo.startsWith("MSG:")) {
        field.setFormat(new MessageFormat(""));
        field.setFormatPattern(formatInfo.substring(4));
      }
    }
  }
}
```

File: com.taursys.html.HTMLSelect
```java
package com.taursys.html;

import com.taursys.html.render.HTMLSelectFieldRenderer;
import com.taursys.model.ObjectArrayValueHolder;

public class HTMLSelect extends com.taursys.xml.SelectField {

  public HTMLSelect() {
    setRenderer(new HTMLSelectFieldRenderer(this));
  }

  public HTMLSelect(int javaDataType) {
    super(javaDataType);
    setRenderer(new HTMLSelectFieldRenderer(this));
  }

  public HTMLSelect(Object[] array) {
    setRenderer(new HTMLSelectFieldRenderer(this));
    setList(new ObjectArrayValueHolder(array));
  }

  public HTMLSelect(int javaDataType, Object[] array) {
    super(javaDataType);
    setRenderer(new HTMLSelectFieldRenderer(this));
    setList(new ObjectArrayValueHolder(array));
  }

}
```

File: com.taursys.html.HTMLCheckBox
```java
package com.taursys.html;

import com.taursys.xml.render.CheckboxFieldRenderer;
import com.taursys.html.render.HTMLCheckboxFieldRenderer;
import com.taursys.xml.*;

public class HTMLCheckBox extends CheckboxField {

  public HTMLCheckBox() {
    setAttributeName("value");
  }

  public HTMLCheckBox(int javaDataType) {
    super(javaDataType);
    setAttributeName("value");
  }

  protected CheckboxFieldRenderer createDefaultRenderer() {
    return new HTMLCheckboxFieldRenderer(this);
  }

  public void setDefaultValue(String newDefaultValue) {
    super.setUnselectedValue( newDefaultValue);
  }

  public String getDefaultValue() {
    return getUnselectedValue();
  }
}
```

File: com.taursys.html.HTMLAnchorURL
```java
package com.taursys.html;

import com.taursys.xml.render.AttributeTextFieldRenderer;
import com.taursys.xml.render.TextFieldRenderer;
import com.taursys.xml.TextField;

public class HTMLAnchorURL extends TextField {

  public HTMLAnchorURL() {
    setAttributeName("href");
  }

  public HTMLAnchorURL(int javaDataType) {
    super(javaDataType);
    setAttributeName("href");
  }

  protected TextFieldRenderer createDefaultRenderer() {
    return new AttributeTextFieldRenderer(this);
  }
}
```

File: com.taursys.html.HTMLTextArea
```java
package com.taursys.html;

public class HTMLTextArea extends com.taursys.xml.TextField {

  public HTMLTextArea() {
  }
}
```

File: com.taursys.html.test.HTMLComponentFactoryTest
```java
package com.taursys.html.test;

import junit.framework.TestCase;
import com.taursys.html.*;
import com.taursys.util.*;
import com.taursys.xml.*;
import com.taursys.model.*;
import com.taursys.model.test.*;
import com.taursys.dom.*;
import org.w3c.dom.*;
import java.util.*;
import org.xml.sax.InputSource;
import org.apache.xerces.parsers.DOMParser;


public class HTMLComponentFactoryTest extends TestCase {
  private TestContainer container = new TestContainer();
  private TestFactory factory = null;
  private VOValueHolder personHolder = new VOValueHolder();
  private VOCollectionValueHolder invoiceHolder = new VOCollectionValueHolder();
  private VOValueHolder unnamedHolder = new VOValueHolder();
  private ValueHolder[] holders = new ValueHolder[] {
      personHolder, invoiceHolder, unnamedHolder};

  public HTMLComponentFactoryTest(String _name) {
    super(_name);
  }

  protected void setUp() {
    factory = new TestFactory();
    personHolder.setAlias("Person");
    invoiceHolder.setAlias("Invoice");
    unnamedHolder.setAlias(null);
  }

  protected void setupTestPage1() throws Exception {
    DOMParser parser = new DOMParser();
    InputSource is = new InputSource(
        getClass().getResourceAsStream("TestPage1.html"));
    parser.parse(is);
    container.setDocument(parser.getDocument());
  }

  protected void tearDown() {
  }

  public void testGetSuggestedComponentsForSpan() throws Exception {
    setupTestPage1();
    Vector suggestions = factory.getSuggestedComponents(
        container.getDocumentAdapter().getElementById("Person__fullName"));
    assertEquals("size", 2, suggestions.size());
    assertEquals("Suggestion 1", TextField.class.getName(),
        suggestions.elementAt(0));
    assertEquals("Suggestion 2", DocumentElement.class.getName(),
        suggestions.elementAt(1));
  }

  public void testGetSuggestedComponentsForTemplate() throws Exception {
    setupTestPage1();
    Vector suggestions = factory.getSuggestedComponents(
        container.getDocumentAdapter().getElementById("Invoice__TEMPLATE_NODE"));
    assertEquals("size", 2, suggestions.size());
    assertEquals("Suggestion 1", Template.class.getName(),
        suggestions.elementAt(0));
    assertEquals("Suggestion 2", DocumentElement.class.getName(),
        suggestions.elementAt(1));
  }

  public void testGetSuggestedComponentsForTD() throws Exception {
    setupTestPage1();
    Vector suggestions = factory.getSuggestedComponents(
        container.getDocumentAdapter().getElementById("Invoice__invoiceNumber"));
    assertEquals("size", 2, suggestions.size());
    assertEquals("Suggestion 1", TextField.class.getName(),
        suggestions.elementAt(0));
    assertEquals("Suggestion 2", DocumentElement.class.getName(),
        suggestions.elementAt(1));
  }

  public void testGetSuggestedComponentsForInputText() throws Exception {
    setupTestPage1();
    Vector suggestions = factory.getSuggestedComponents(
        container.getDocumentAdapter().getElementById("Person__lastName"));
    assertEquals("size", 2, suggestions.size());
    assertEquals("Suggestion 1", HTMLInputText.class.getName(),
        suggestions.elementAt(0));
    assertEquals("Suggestion 2", DocumentElement.class.getName(),
        suggestions.elementAt(1));
  }

  public void testGetSuggestedComponentsForSubmitButton() throws Exception {
    setupTestPage1();
    Vector suggestions = factory.getSuggestedComponents(
        container.getDocumentAdapter().getElementById("SaveButton"));
    assertEquals("size", 3, suggestions.size());
    assertEquals("Suggestion 1", Button.class.getName(),
        suggestions.elementAt(0));
    assertEquals("Suggestion 2", Trigger.class.getName(),
        suggestions.elementAt(1));
    assertEquals("Suggestion 3", DocumentElement.class.getName(),
        suggestions.elementAt(2));
  }

  public void testCreateComponentForSpan() throws Exception {
    setupTestPage1();
    Component component = factory.createComponentForElement(
        "Person__fullName",
        container.getDocumentAdapter().getElementById("Person__fullName"),
        holders
    );
    assertNotNull("Expected component not null", component);
    assertEquals("Component class", TextField.class, component.getClass());
    assertEquals("Component id", "Person__fullName",
        ((TextField)component).getId());
    assertEquals("Component holder", personHolder,
        ((TextField)component).getValueHolder());
    assertEquals("Component property name", "fullName",
        ((TextField)component).getPropertyName());
    assertNull("Component parameter not null",
        ((TextField)component).getParameter());
  }

  public void testCreateComponentForSpan2() throws Exception {
    setupTestPage1();
    Component component = factory.createComponentForElement(
        "Person__fullName__2",
        container.getDocumentAdapter().getElementById("Person__fullName__2"),
        holders
    );
    assertNotNull("Expected component not null", component);
    assertEquals("Component class", TextField.class, component.getClass());
    assertEquals("Component id", "Person__fullName__2",
        ((TextField)component).getId());
    assertEquals("Component holder", personHolder,
        ((TextField)component).getValueHolder());
    assertEquals("Component property name", "fullName",
        ((TextField)component).getPropertyName());
    assertNull("Component parameter not null",
        ((TextField)component).getParameter());
  }

  public void testCreateComponentForTemplate() throws Exception {
    setupTestPage1();
    Component component = factory.createComponentForElement(
        "Invoice__TEMPLATE_NODE",
        container.getDocumentAdapter().getElementById("Invoice__TEMPLATE_NODE"),
        holders
    );
    assertNotNull("Expected component not null", component);
    assertEquals("Component class", Template.class, component.getClass());
    assertEquals("Component id", "Invoice__TEMPLATE_NODE",
        ((Template)component).getId());
    assertEquals("Component holder", invoiceHolder,
        ((Template)component).getCollectionValueHolder());
  }

  public void testCreateComponentForBad1() throws Exception {
    setupTestPage1();
    Component component = factory.createComponentForElement(
        "__",
        container.getDocumentAdapter().getElementById("__"),
        holders
    );
    assertNull("Expected null", component);
  }

  public void testCreateComponentForBad2() throws Exception {
    setupTestPage1();
    Component component = factory.createComponentForElement(
        "Person__",
        container.getDocumentAdapter().getElementById("Person__"),
        holders
    );
    assertNull("Expected null", component);
  }

  public void testCreateComponentForInputText() throws Exception {
    setupTestPage1();
    Component component = factory.createComponentForElement(
        "Person__lastName",
        container.getDocumentAdapter().getElementById("Person__lastName"),
        holders
    );
    assertNotNull("Expected component not null", component);
    assertEquals("Component class", HTMLInputText.class, component.getClass());
    assertEquals("Component id", "Person__lastName",
        ((HTMLInputText)component).getId());
    assertEquals("Component holder", personHolder,
        ((HTMLInputText)component).getValueHolder());
    assertEquals("Component property name", "lastName",
        ((HTMLInputText)component).getPropertyName());
    assertEquals("Component parameter", "lastName",
        ((HTMLInputText)component).getParameter());
  }

  public void testCreateComponentForInputCheckbox() throws Exception {
    setupTestPage1();
    Component component = factory.createComponentForElement(
        "Person__active",
        container.getDocumentAdapter().getElementById("Person__active"),
        holders
    );
    assertNotNull("Expected component not null", component);
    assertEquals("Component class", HTMLCheckBox.class, component.getClass());
    assertEquals("Component id", "Person__active",
        ((HTMLCheckBox)component).getId());
    assertEquals("Component holder", personHolder,
        ((HTMLCheckBox)component).getValueHolder());
    assertEquals("Component property name", "active",
        ((HTMLCheckBox)component).getPropertyName());
    assertEquals("Component parameter", "active",
        ((HTMLCheckBox)component).getParameter());
    assertEquals("Component unselected value", "",
        ((HTMLCheckBox)component).getUnselectedValue());
  }

  public void testCreateComponentsWithoutExisting() throws Exception {
    setupTestPage1();
    factory.createComponents(container, holders);

    Component[] components = container.getComponents();
    assertEquals("Component count in master container", 7, components.length);
    assertEquals("Component 0", TextField.class, components[0].getClass());
    assertEquals("Component 1", TextField.class, components[1].getClass());
    assertEquals("Component 2", Template.class, components[2].getClass());
    assertEquals("Component 3", HTMLInputText.class, components[3].getClass());
    assertEquals("Component 4", HTMLInputText.class, components[4].getClass());
    assertEquals("Component 5", HTMLCheckBox.class, components[5].getClass());
    assertEquals("Component 6", HTMLAnchorURL.class, components[6].getClass());

    components = ((Template)components[2]).getComponents();
    assertEquals("Component count in template container", 3, components.length);
    assertEquals("Component 0", TextField.class, components[0].getClass());
    assertEquals("Component 1", TextField.class, components[1].getClass());
    assertEquals("Component 2", TextField.class, components[2].getClass());
  }

  public void testCreateComponentsWithExistingTopContainer() throws Exception {
    setupTestPage1();
    Button button = new Button();
    button.setId("SaveButton");
    button.setParameter("action");
    button.setText("Save");
    container.add(button);
    factory.createComponents(container, holders);

    Component[] components = container.getComponents();
    assertEquals("Component count in master container", 8, components.length);
    assertEquals("Component 0", TextField.class, components[0].getClass());
    assertEquals("Component 1", TextField.class, components[1].getClass());
    assertEquals("Component 2", Template.class, components[2].getClass());
    assertEquals("Component 3", HTMLInputText.class, components[3].getClass());
    assertEquals("Component 4", HTMLInputText.class, components[4].getClass());
    assertEquals("Component 5", HTMLCheckBox.class, components[5].getClass());
    assertEquals("Component 6", Button.class, components[6].getClass());
    assertEquals("Component 7", HTMLAnchorURL.class, components[7].getClass());

    components = ((Template)components[2]).getComponents();
    assertEquals("Component count in template container", 3, components.length);
    assertEquals("Component 0", TextField.class, components[0].getClass());
    assertEquals("Component 1", TextField.class, components[1].getClass());
    assertEquals("Component 2", TextField.class, components[2].getClass());
  }

  public void testCreateComponentsWithExistingSubContainer() throws Exception {
    setupTestPage1();

    Button button = new Button();
    button.setId("SaveButton");
    button.setParameter("action");
    button.setText("Save");
    container.add(button);

    TextField field = new TextField();
    field.setId("Invoice__issueDate");
    container.add(field);
    factory.createComponents(container, holders);

    Component[] components = container.getComponents();
    assertEquals("Component count in master container", 8, components.length);
    assertEquals("Component 0", TextField.class, components[0].getClass());
    assertEquals("Component 1", TextField.class, components[1].getClass());
    assertEquals("Component 2", Template.class, components[2].getClass());
    assertEquals("Component 3", HTMLInputText.class, components[3].getClass());
    assertEquals("Component 4", HTMLInputText.class, components[4].getClass());
    assertEquals("Component 5", HTMLCheckBox.class, components[5].getClass());
    assertEquals("Component 6", Button.class, components[6].getClass());
    assertEquals("Component 7", HTMLAnchorURL.class, components[7].getClass());

    components = ((Template)components[2]).getComponents();
    assertEquals("Component count in template container", 3, components.length);
    assertEquals("Component 0", TextField.class, components[0].getClass());
    assertEquals("Component 1", field, components[1]);
    assertEquals("Component 2", TextField.class, components[2].getClass());
  }

  public void testCreateComponentWithDateFormat() throws Exception {
    setupTestPage1();
    Component component = factory.createComponentForElement(
        "Invoice__issueDate",
        container.getDocumentAdapter().getElementById("Invoice__issueDate"),
        holders
    );
    assertNotNull("Expected component not null", component);
    assertEquals("Component class", TextField.class, component.getClass());
    assertNotNull("Component format should not be null",
        ((TextField)component).getFormat());
    assertEquals("Component format class", java.text.SimpleDateFormat.class,
        ((TextField)component).getFormat().getClass());
    assertEquals("Component format pattern", "MM/dd/yyyy",
        ((TextField)component).getFormatPattern());
  }

  public void testCreateComponentWithNumberFormat() throws Exception {
    setupTestPage1();
    Component component = factory.createComponentForElement(
        "Invoice__invoiceNumber",
        container.getDocumentAdapter().getElementById("Invoice__invoiceNumber"),
        holders
    );
    assertNotNull("Expected component not null", component);
    assertEquals("Component class", TextField.class, component.getClass());
    assertNotNull("Component format should not be null",
        ((TextField)component).getFormat());
    assertEquals("Component format class", java.text.DecimalFormat.class,
        ((TextField)component).getFormat().getClass());
    assertEquals("Component format pattern", "0000000",
        ((TextField)component).getFormatPattern());
  }

  public void testCreateComponentWithMessageFormat() throws Exception {
    setupTestPage1();
    Component component = factory.createComponentForElement(
        "Invoice__customerID",
        container.getDocumentAdapter().getElementById("Invoice__customerID"),
        holders
    );
    assertNotNull("Expected component not null", component);
    assertEquals("Component class", TextField.class, component.getClass());
    assertNotNull("Component format should not be null",
        ((TextField)component).getFormat());
    assertEquals("Component format class", java.text.MessageFormat.class,
        ((TextField)component).getFormat().getClass());
    assertEquals("Component format pattern", "CustNo={0}",
        ((TextField)component).getFormatPattern());
  }

  public void testCreateComponentWithMessageFormatInValueAttribute() throws Exception {
    setupTestPage1();
    Component component = factory.createComponentForElement(
        "Person__lastName",
        container.getDocumentAdapter().getElementById("Person__lastName"),
        holders
    );
    assertNotNull("Expected component not null", component);
    assertEquals("Component class", HTMLInputText.class, component.getClass());
    assertNotNull("Component format should not be null",
        ((HTMLInputText)component).getFormat());
    assertEquals("Component format class", java.text.MessageFormat.class,
        ((HTMLInputText)component).getFormat().getClass());
    assertEquals("Component format pattern", "{0}",
        ((HTMLInputText)component).getFormatPattern());
  }

  public void testCreateComponentWithoutFormat() throws Exception {
    setupTestPage1();
    Component component = factory.createComponentForElement(
        "Person__fullName",
        container.getDocumentAdapter().getElementById("Person__fullName"),
        holders
    );
    assertNotNull("Expected component not null", component);
    assertEquals("Component class", TextField.class, component.getClass());
    assertNull("Component format should be null",
        ((TextField)component).getFormat());
    assertNull("Component format pattern should be null",
        ((TextField)component).getFormatPattern());
  }

  public void testCreateComponentWithMessageFormatInHrefAttribute() throws Exception {
    setupTestPage1();
    Component component = factory.createComponentForElement(
        "Person__personID",
        container.getDocumentAdapter().getElementById("Person__personID"),
        holders
    );
    assertNotNull("Expected component not null", component);
    assertEquals("Component class", HTMLAnchorURL.class, component.getClass());
    assertNotNull("Component format should not be null",
        ((HTMLAnchorURL)component).getFormat());
    assertEquals("Component format class", java.text.MessageFormat.class,
        ((HTMLAnchorURL)component).getFormat().getClass());
    assertEquals("Component format pattern", "http://localhost/mypage.mxform?pid={0}",
        ((HTMLAnchorURL)component).getFormatPattern());
  }


  class TestFactory extends HTMLComponentFactory {
    protected Component createComponentForElement(String id, Element element,
        ValueHolder[] holders) {
      return super.createComponentForElement(id, element, holders);
    }
  }

  class TestContainer extends Container {
    private DocumentAdapter documentAdapter;

    public DocumentAdapter getDocumentAdapter() {
      return documentAdapter;
    }

    public void setDocument(org.w3c.dom.Document newDocument) {
      documentAdapter = new DOM_1_20000929_DocumentAdapter(newDocument);
    }

    public void removeNotify() {}
    public void addNotify() {}

    public org.w3c.dom.Document getDocument() {
      if (documentAdapter == null)
        return null;
      else
        return documentAdapter.getDocument();
    }
  }

  public static void main(String[] argv) {
    String[] testCaseList = {HTMLComponentFactoryTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.html.render.HTMLCheckboxFieldRenderer
```java
package com.taursys.html.render;

import com.taursys.xml.render.CheckboxFieldRenderer;
import com.taursys.xml.CheckboxField;
import com.taursys.model.ModelException;
import com.taursys.model.CheckboxModel;
import com.taursys.dom.DocumentAdapter;
import com.taursys.xml.event.RenderException;
import com.taursys.xml.DocumentComponent;
import org.w3c.dom.*;

public class HTMLCheckboxFieldRenderer extends CheckboxFieldRenderer {

  public HTMLCheckboxFieldRenderer(CheckboxField field) {
    super(field);
  }

  public void render() throws RenderException {
    init();
    if (getComponent().isVisible()) {
      restoreSelf();
      try {
        DocumentAdapter da = getComponent().getParent().getDocumentAdapter();
        Element element = (Element)da.getElementById(((DocumentComponent)getComponent()).getId());
        CheckboxField field = (CheckboxField)getComponent();
        CheckboxModel model = (CheckboxModel)field.getModel();
        element.setAttribute(field.getAttributeName(), field.getSelectedValue());
        if (model.isSelected()) {
          element.setAttribute("checked","checked");
        } else {
          element.removeAttribute("checked");
        }
      } catch (ModelException ex) {
        throw new RenderException(RenderException.REASON_MODEL_EXCEPTION, ex);
      }
    } else {
      removeSelf();
    }
  }
}
```

File: com.taursys.html.render.HTMLSelectFieldRenderer
```java
package com.taursys.html.render;

import com.taursys.xml.render.SelectFieldRenderer;
import com.taursys.xml.event.RenderException;
import com.taursys.xml.SelectField;
import com.taursys.model.ModelException;
import com.taursys.model.*;
import com.taursys.xml.DocumentComponent;
import com.taursys.dom.DocumentAdapter;
import org.w3c.dom.*;
import org.w3c.dom.html.*;
import java.util.Collection;
import java.util.Iterator;

public class HTMLSelectFieldRenderer extends SelectFieldRenderer {

  public HTMLSelectFieldRenderer() {
    super(null);
  }

  public HTMLSelectFieldRenderer(SelectField c) {
    super(c);
  }

  public void render(SelectField field) throws RenderException {
    try {
      DocumentAdapter da = field.getParent().getDocumentAdapter();
      Element element = (Element)da.getElementById(field.getId());
      SelectModel model = (SelectModel)field.getModel();
      while(element.hasChildNodes())
        element.removeChild(element.getFirstChild());
      Collection c = model.getDisplayOptionList();
      Iterator iter = c.iterator();
      while (iter.hasNext()) {
        SelectModelOption option = (SelectModelOption)iter.next();
        addOPTION(element, option.getOptionText(), option.isSelected());
      }
    } catch (ModelException ex) {
      throw new RenderException(RenderException.REASON_MODEL_EXCEPTION, ex);
    }
  }

  public void render() throws RenderException {
    init();
    if (getComponent().isVisible()) {
      restoreSelf();
      try {
        DocumentAdapter da = getComponent().getParent().getDocumentAdapter();
        Element element = (Element)da.getElementById(((DocumentComponent)getComponent()).getId());
        if (element != null) {
          SelectModel model = (SelectModel)((SelectField)getComponent()).getModel();
          while(element.hasChildNodes())
            element.removeChild(element.getFirstChild());
          Collection c = model.getDisplayOptionList();
          Iterator iter = c.iterator();
          while (iter.hasNext()) {
            SelectModelOption option = (SelectModelOption)iter.next();
            addOPTION(element, option.getOptionText(), option.isSelected());
          }
        }
      } catch (ModelException ex) {
        throw new RenderException(RenderException.REASON_MODEL_EXCEPTION, ex);
      }
    } else {
      removeSelf();
    }
  }

  private void addOPTION(Element element, String value, boolean selected) {
    Element option = element.getOwnerDocument().createElement("OPTION");
    option.appendChild(element.getOwnerDocument().createTextNode(value));
    if (selected)
      option.setAttribute("Selected","Selected");
    element.appendChild(option);
  }
}
```

File: com.taursys.xml.Form
```java
package com.taursys.xml;

import com.taursys.xml.render.*;
import com.taursys.xml.event.*;
import com.taursys.servlet.*;
import com.taursys.dom.*;
import java.util.*;

public class Form extends DocumentElement {
  public static final String PARAMETER_MAP = "com.taursys.xml.ParameterMap";
  private transient ArrayList initContextListeners;
  private transient ArrayList initFormListeners;
  private transient ArrayList openFormListeners;
  private transient ArrayList closeFormListeners;

  private InitContextDispatcher initContextDispatcher = new InitContextDispatcher(this);
  private InitFormDispatcher initFormDispatcher = new InitFormDispatcher(this);
  private OpenFormDispatcher openFormDispatcher = new OpenFormDispatcher(this);
  private CloseFormDispatcher closeFormDispatcher = new CloseFormDispatcher(this);

  private String sourceId;
  private boolean initialized;
  private DocumentAdapter documentAdapter;
  private Map formContext = new HashMap();


  public Form() {
    super();

    addEventType(InitContextEvent.class.getName());
    addEventType(InitFormEvent.class.getName());
    addEventType(OpenFormEvent.class.getName());
    addEventType(CloseFormEvent.class.getName());

    addDispatcher(InitContextEvent.class.getName(), initContextDispatcher);
    addDispatcher(InitFormEvent.class.getName(),initFormDispatcher);
    addDispatcher(OpenFormEvent.class.getName(),openFormDispatcher);
    addDispatcher(CloseFormEvent.class.getName(),closeFormDispatcher);
  }

  protected DocumentElementRenderer createDefaultRenderer() {
    return new FormRenderer(this);
  }


  protected void dispatchInitContext() throws Exception {
    HashMap newContext = new HashMap(formContext);
    newContext.put(PARAMETER_MAP, getParameterMap());
    initContextDispatcher.dispatch(newContext);
  }

  protected void dispatchInitForm() throws Exception {
    initFormDispatcher.dispatch();
  }

  protected void dispatchOpenForm() throws Exception {
    openFormDispatcher.dispatch();
  }

  protected void dispatchCloseForm() throws Exception {
    closeFormDispatcher.dispatch();
  }


  protected void processEvent(EventObject e) throws Exception {
    if (e instanceof InitContextEvent)
      processInitContextEvent((InitContextEvent)e);
    if (e instanceof InitFormEvent)
      processInitFormEvent((InitFormEvent)e);
    if (e instanceof OpenFormEvent)
      processOpenFormEvent((OpenFormEvent)e);
    if (e instanceof CloseFormEvent)
      processCloseFormEvent((CloseFormEvent)e);
    else
      super.processEvent(e);
  }


  protected void processInitContextEvent(InitContextEvent e) throws Exception {
    formContext = e.getContext();
    setParameterMap((Map)lookup(PARAMETER_MAP));
    initContextDispatcher.dispatch(e);
    fireInitContextReceived(e);
  }

  public void removeInitContextListener(InitContextListener l) {
    if (initContextListeners != null && initContextListeners.contains(l)) {
      initContextListeners.remove(l);
    }
  }

  public void addInitContextListener(InitContextListener l) {
    if (initContextListeners != null) {
      if (!initContextListeners.contains(l)) {
        initContextListeners.add(l);
      }
    } else {
      initContextListeners = new ArrayList();
      initContextListeners.add(l);
    }
  }

  protected void fireInitContextReceived(InitContextEvent e) throws Exception {
    if (initContextListeners != null) {
      Iterator iter = initContextListeners.iterator();
      while (iter.hasNext()) {
        ((InitContextListener)iter.next()).initContext(e);
      }
    }
  }


  protected void initForm() throws Exception {
    initialized = true;
  }

  protected void processInitFormEvent(InitFormEvent e) throws Exception {
    if (!initialized)
      initForm();
    initFormDispatcher.dispatch(e);
    fireInitFormReceived(e);
  }

  public void removeInitFormListener(InitFormListener l) {
    if (initFormListeners != null && initFormListeners.contains(l)) {
      initFormListeners.remove(l);
    }
  }

  public void addInitFormListener(InitFormListener l) {
    if (initFormListeners != null) {
      if (!initFormListeners.contains(l)) {
        initFormListeners.add(l);
      }
    } else {
      initFormListeners = new ArrayList();
      initFormListeners.add(l);
    }
  }

  protected void fireInitFormReceived(InitFormEvent e) throws Exception {
    if (initFormListeners != null) {
      Iterator iter = initFormListeners.iterator();
      while (iter.hasNext()) {
        ((InitFormListener)iter.next()).initForm(e);
      }
    }
  }


  protected void openForm() throws Exception {
  }

  protected void processOpenFormEvent(OpenFormEvent e) throws Exception {
    openForm();
    openFormDispatcher.dispatch(e);
    fireOpenFormReceived(e);
  }

  public void removeOpenFormListener(OpenFormListener l) {
    if (openFormListeners != null && openFormListeners.contains(l)) {
      openFormListeners.remove(l);
    }
  }

  public void addOpenFormListener(OpenFormListener l) {
    if (openFormListeners != null) {
      if (!openFormListeners.contains(l)) {
        openFormListeners.add(l);
      }
    } else {
      openFormListeners = new ArrayList();
      openFormListeners.add(l);
    }
  }

  protected void fireOpenFormReceived(OpenFormEvent e) throws Exception {
    if (openFormListeners != null) {
      Iterator iter = openFormListeners.iterator();
      while (iter.hasNext()) {
        ((OpenFormListener)iter.next()).openForm(e);
      }
    }
  }


  protected void closeForm() throws Exception {
  }

  protected void processCloseFormEvent(CloseFormEvent e) throws Exception {
    closeForm();
    closeFormDispatcher.dispatch(e);
    fireCloseFormReceived(e);
  }

  public void removeCloseFormListener(CloseFormListener l) {
    if (closeFormListeners != null && closeFormListeners.contains(l)) {
      closeFormListeners.remove(l);
    }
  }

  public void addCloseFormListener(CloseFormListener l) {
    if (closeFormListeners != null) {
      if (!closeFormListeners.contains(l)) {
        closeFormListeners.add(l);
      }
    } else {
      closeFormListeners = new ArrayList();
      closeFormListeners.add(l);
    }
  }

  protected void fireCloseFormReceived(CloseFormEvent e) throws Exception {
    if (closeFormListeners != null) {
      Iterator iter = closeFormListeners.iterator();
      while (iter.hasNext()) {
        ((CloseFormListener)iter.next()).closeForm(e);
      }
    }
  }


  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }

  public void setDocument(org.w3c.dom.Document newDocument) {
    documentAdapter = new DOM_1_20000929_DocumentAdapter(newDocument);
  }

  public org.w3c.dom.Document getDocument() {
    if (documentAdapter == null)
      return null;
    else
      return documentAdapter.getDocument();
  }

  public void setDocumentAdapter(DocumentAdapter newDocumentAdapter) {
    documentAdapter = newDocumentAdapter;
  }

  public DocumentAdapter getDocumentAdapter() {
    return documentAdapter;
  }

  public void setInitialized(boolean newInitialized) {
    initialized = newInitialized;
  }

  public boolean isInitialized() {
    return initialized;
  }

  public Map getFormContext() {
    return formContext;
  }

  public void setFormContext(Map formContext) {
    if (formContext == null)
      throw new IllegalArgumentException("Attempt to set formContext to null");
    this.formContext = formContext;
  }

  public Object lookup(Object key) {
    return formContext.get(key);
  }
}
```

File: com.taursys.xml.ComponentFactory
```java
package com.taursys.xml;

import java.util.*;
import org.w3c.dom.*;
import com.taursys.model.ValueHolder;
import javax.swing.tree.*;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import com.taursys.xml.*;
import com.taursys.dom.DOM_1_20000929_DocumentAdapter;
import com.taursys.debug.Debug;

public abstract class ComponentFactory {
  public static final String ID_DELIMITER = "__";
  public static final String TEMPLATE_NODE = "TEMPLATE_NODE";
  protected Hashtable tagTable = new Hashtable();


  public ComponentFactory() {
    initTagTable();
  }


  public abstract Vector getSuggestedComponents(Element element);

  public void createComponents(Container container, ValueHolder[] holders) {
    createComponents(
        container.getDocumentAdapter().getDocument(),
        container,
        holders,
        container);
  }


  protected abstract void initTagTable();

  protected Vector getSuggestedComponents(
      String tagName, String id, Element element) {
    Vector suggestions = (Vector)tagTable.get(tagName);
    if (suggestions == null)
      suggestions = new Vector();
    if (id != null && id.length() > 0) {
      if (id.indexOf(TEMPLATE_NODE) > -1) {
        suggestions.add(0,Template.class.getName());
      } else {
        if (DOM_1_20000929_DocumentAdapter.hasChildElements(element))
          suggestions.add(Template.class.getName());
      }
      suggestions.add(DocumentElement.class.getName());
    }
    return suggestions;
  }

  protected abstract Component createComponentForElement(
      String id, Element element, ValueHolder[] holders);


  private void createComponents(Node parentNode, Container parentContainer,
      ValueHolder[] holders, Container rootContainer) {
    Node childNode = parentNode.getFirstChild();
    Component childComponent = null;
    while (childNode != null) {
      if (childNode.getNodeType() == Node.ELEMENT_NODE) {
        String id = ((Element)childNode).getAttribute("id");
        if (id != null && id.length() > 0) {
          childComponent = (Component)rootContainer.get(id);
          if (childComponent != null) {
            rootContainer.remove(childComponent);
            traceCreateComponents("Element with existing component - moving component. id=" + id + " element=" + childNode);
          } else {
            childComponent = createComponentForElement(
                id, (Element)childNode, holders);
            traceCreateComponents("Creating new component for element. id=" + id
                + " element=" + childNode + " componentType=" + childComponent);
          }
          if (childComponent != null)
            parentContainer.add(childComponent);
        } else {
          childComponent = null;
          traceCreateComponents("Skipped element with no id. Element=" + childNode);
        }
        if (childComponent instanceof Container)
          createComponents(
              childNode, (Container)childComponent, holders, rootContainer);
        else
          createComponents(childNode, parentContainer, holders, rootContainer);
      }
      childNode = childNode.getNextSibling();
    }
  }

  private void traceCreateComponents(String msg) {
    Debug.debug("ComponentFactory.createComponents: " + msg);
  }
}
```

File: com.taursys.xml.AbstractField
```java
package com.taursys.xml;

import com.taursys.xml.event.RenderException;
import com.taursys.xml.event.ParameterEvent;
import com.taursys.xml.event.InputEvent;
import com.taursys.xml.event.RecycleEvent;
import com.taursys.xml.event.RenderEvent;
import com.taursys.xml.event.Dispatcher;

public abstract class AbstractField extends Parameter
    implements DocumentComponent {
  private String id;
  private String attributeName = "value";
  private boolean earlyInputNotify;


  public AbstractField() {
    super();
    removeEventType(ParameterEvent.class.getName());
    addEventType(InputEvent.class.getName());
    addEventType(RenderEvent.class.getName());
    addEventType(RecycleEvent.class.getName());
  }

  public AbstractField(int javaDataType) {
    super(javaDataType);
    removeEventType(ParameterEvent.class.getName());
    addEventType(InputEvent.class.getName());
    addEventType(RenderEvent.class.getName());
    addEventType(RecycleEvent.class.getName());
  }


  protected void processInputEvent(InputEvent e) throws Exception {
    if (getParameter() != null && getParameter().equals(e.getName())) {
      getModel().setText(e.getValue());
      fireInputReceived(e);
    }
  }

  public abstract void processRenderEvent(RenderEvent e) throws RenderException;

  public void setEarlyInputNotify(boolean earlyInputNotify) {
    boolean b = isNotifySet(); // save old state
    if (isNotifySet())
      removeNotify();
    this.earlyInputNotify = earlyInputNotify;
    if (earlyInputNotify) {
      removeEventType(InputEvent.class.getName());
      addEventType(ParameterEvent.class.getName());
    } else {
      removeEventType(ParameterEvent.class.getName());
      addEventType(InputEvent.class.getName());
    }
    if (b)
      addNotify(); // only if was originally set
  }

  public boolean isEarlyInputNotify() {
    return earlyInputNotify;
  }


  public void setId(String newId) {
    id = newId;
  }

  public String getId() {
    return id;
  }

  public void setAttributeName(String newAttributeName) {
    attributeName = newAttributeName;
  }

  public String getAttributeName() {
    return attributeName;
  }
}
```

File: com.taursys.xml.DocumentElement
```java
package com.taursys.xml;

import com.taursys.xml.event.RenderEvent;
import com.taursys.xml.event.RenderDispatcher;
import com.taursys.xml.event.RenderException;
import com.taursys.xml.render.DocumentElementRenderer;
import com.taursys.xml.event.RecycleEvent;
import com.taursys.xml.event.RecycleDispatcher;
import com.taursys.xml.event.RecycleException;

public class DocumentElement extends DispatchingContainer implements DocumentComponent {
  private String id;
  private DocumentElementRenderer renderer;


  public DocumentElement() {
    renderer = createDefaultRenderer();
  }

  protected DocumentElementRenderer createDefaultRenderer() {
    return new DocumentElementRenderer(this);
  }

  public DocumentElementRenderer getRenderer() {
    return renderer;
  }


  public String getId() {
    return id;
  }

  public void setId(String newId) {
    id = newId;
  }


  public void processRenderEvent(RenderEvent e) throws RenderException {
    fireRender(e);
    renderer.render();
  }

  public void processRecycleEvent(RecycleEvent e) throws RecycleException {
    renderer.recycle();
    fireRecycle(e);
  }

}
```

File: com.taursys.xml.Parameter
```java
package com.taursys.xml;

import java.text.ParseException;
import com.taursys.model.TextModel;
import com.taursys.model.DefaultTextModel;
import com.taursys.model.ModelException;
import com.taursys.util.UnsupportedDataTypeException;
import com.taursys.xml.event.ParameterEvent;
import com.taursys.xml.event.Dispatcher;

public class Parameter extends Component {
  private String parameter;
  private TextModel model;
  private com.taursys.model.ValueHolder valueHolder;
  private String defaultValue;


  public Parameter() {
    addEventType(ParameterEvent.class.getName());
    model = createDefaultModel();
  }

  public Parameter(int javaDataType) {
    addEventType(ParameterEvent.class.getName());
    model = createDefaultModel(javaDataType);
  }


  public TextModel getModel() {
    return model;
  }

  public void setModel(TextModel newModel) {
    if (newModel.getFormat() == null) {
      newModel.setFormat(model.getFormat());
      newModel.setFormatPattern(model.getFormatPattern());
    }
    model = newModel;
  }

  protected TextModel createDefaultModel() {
    return new DefaultTextModel();
  }

  protected TextModel createDefaultModel(int javaDataType) {
    return new DefaultTextModel(javaDataType);
  }


  public String getText() throws ModelException {
    return model.getText();
  }

  public void setText(String text) throws ModelException {
    model.setText(text);
  }

  public Object getValue() throws ModelException {
    return model.getValueHolder().getPropertyValue(model.getPropertyName());
  }

  public void setValue(Object value) throws ModelException {
    model.getValueHolder().setPropertyValue(model.getPropertyName(), value);
  }


  protected void processParameterEvent(ParameterEvent e) throws Exception {
    if (parameter != null && parameter.equals(e.getName())) {
      model.setText(e.getValue());
      fireParameterReceived(e);
    }
  }


  public void setParameter(String newParameter) {
    parameter = newParameter;
  }

  public String getParameter() {
    return parameter;
  }


  public void setFormat(java.text.Format format) {
    model.setFormat(format);
  }

  public java.text.Format getFormat() {
    return model.getFormat();
  }

  public void setFormatPattern(String newPattern) {
    model.setFormatPattern(newPattern);
  }

  public String getFormatPattern() {
    return model.getFormatPattern();
  }

  public void setValueHolder(com.taursys.model.ValueHolder newValueHolder) {
    model.setValueHolder(newValueHolder);
  }

  public com.taursys.model.ValueHolder getValueHolder() {
    return model.getValueHolder();
  }

  public void setPropertyName(String newPropertyName) {
    model.setPropertyName(newPropertyName);
  }

  public String getPropertyName() {
    return model.getPropertyName();
  }

  public void setDefaultValue(String newDefaultValue) {
    defaultValue = newDefaultValue;
  }

  public String getDefaultValue() {
    return defaultValue;
  }
}
```

File: com.taursys.xml.Button
```java
package com.taursys.xml;

import com.taursys.xml.event.Dispatcher;
import com.taursys.xml.event.RenderEvent;
import com.taursys.xml.event.RenderDispatcher;
import com.taursys.xml.event.RenderException;
import com.taursys.xml.render.AbstractRenderer;
import com.taursys.xml.render.VisibleRenderer;

public class Button extends Trigger implements DocumentComponent {
  private String id;
  private VisibleRenderer renderer;

  public Button() {
    super();
    addEventType(RenderEvent.class.getName());
    renderer = createDefaultRenderer();
  }

  public String getId() {
    return id;
  }

  public void setId(String newId) {
    id = newId;
  }

  protected VisibleRenderer createDefaultRenderer() {
    return new VisibleRenderer(this);
  }

  public VisibleRenderer getRenderer() {
    return renderer;
  }

  public void processRenderEvent(RenderEvent e) throws RenderException {
    fireRender(e);
    renderer.render();
  }

}
```

File: com.taursys.xml.DispatchingContainer
```java
package com.taursys.xml;

import com.taursys.xml.event.*;
import java.util.*;

public class DispatchingContainer extends Container {
  private ParameterDispatcher parameterDispatcher;
  private InputDispatcher inputDispatcher;
  private TriggerDispatcher triggerDispatcher;
  private RenderDispatcher renderDispatcher;
  private RecycleDispatcher recycleDispatcher;
  private Map parameterMap = Collections.EMPTY_MAP;

  public DispatchingContainer() {
    parameterDispatcher = createParameterDispatcher();
    inputDispatcher = createInputDispatcher();
    triggerDispatcher = createTriggerDispatcher();
    renderDispatcher = createRenderDispatcher();
    recycleDispatcher = createRecycleDispatcher();
    addDispatcher(ParameterEvent.class.getName(), parameterDispatcher);
    addDispatcher(InputEvent.class.getName(), inputDispatcher);
    addDispatcher(TriggerEvent.class.getName(), triggerDispatcher);
    addDispatcher(RenderEvent.class.getName(), renderDispatcher);
    addDispatcher(RecycleEvent.class.getName(), recycleDispatcher);
    addEventType(ParameterEvent.class.getName());
    addEventType(InputEvent.class.getName());
    addEventType(TriggerEvent.class.getName());
    addEventType(RenderEvent.class.getName());
    addEventType(RecycleEvent.class.getName());
  }


  protected ParameterDispatcher createParameterDispatcher() {
    return new ParameterDispatcher();
  }

  protected InputDispatcher createInputDispatcher() {
    return new InputDispatcher();
  }

  protected TriggerDispatcher createTriggerDispatcher() {
    return new TriggerDispatcher();
  }

  protected RenderDispatcher createRenderDispatcher() {
    return new RenderDispatcher(this);
  }

  protected RecycleDispatcher createRecycleDispatcher() {
    return new RecycleDispatcher(this);
  }



  public Map getParameterMap() {
    return parameterMap;
  }

  public void setParameterMap(Map map) {
    parameterMap = map;
  }


  protected void dispatchParameters() throws Exception {
    parameterDispatcher.dispatch(parameterMap);
  }

  protected void dispatchInput() throws Exception {
    inputDispatcher.dispatch(parameterMap);
  }

  protected void dispatchActions() throws Exception {
    triggerDispatcher.dispatch(parameterMap);
  }

  protected void dispatchRender() throws Exception {
    renderDispatcher.dispatch();
  }

  protected void dispatchRecycle() throws Exception {
    recycleDispatcher.dispatch();
  }


  protected void processParameterEvent(ParameterEvent e) throws Exception {
    parameterDispatcher.dispatch(e.getMap());
    fireParameterReceived(e);

  }

  protected void processInputEvent(InputEvent e) throws Exception {
    inputDispatcher.dispatch(e.getMap());
    fireInputReceived(e);
  }

  protected void processTriggerEvent(TriggerEvent e) throws Exception {
    triggerDispatcher.dispatch(e.getMap());
    fireActionPerformed(e);
  }

  public void processRenderEvent(RenderEvent e) throws RenderException {
    fireRender(e);
    renderDispatcher.dispatch();
  }

  public void processRecycleEvent(RecycleEvent e) throws RecycleException {
    recycleDispatcher.dispatch();
    fireRecycle(e);
  }
}
```

File: com.taursys.xml.Component
```java
package com.taursys.xml;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.Iterator;
import com.taursys.xml.event.RenderException;
import com.taursys.util.MapperComponent;
import com.taursys.xml.event.*;

public abstract class Component implements MapperComponent {
  private transient ArrayList parameterListeners;
  private transient ArrayList inputListeners;
  private transient ArrayList renderListeners;
  private transient ArrayList recycleListeners;
  private transient ArrayList triggerListeners;
  com.taursys.xml.Container parent;
  private boolean visible = true;
  private ArrayList eventTypeList = new ArrayList();
  private boolean notifySet = false;

  public Component() {
  }


  public com.taursys.xml.Container getParent() {
    return parent;
  }

  public void setVisible(boolean visible) {
    this.visible = visible;
  }

  public boolean isVisible() {
    return visible;
  }


  protected void removeEventType(String eventType) {
    if (eventTypeList.contains(eventType)) {
      eventTypeList.remove(eventType);
    }
  }

  protected void addEventType(String eventType) {
    if (!eventTypeList.contains(eventType)) {
      eventTypeList.add(eventType);
    }
  }

  public void addNotify() {
    lazyAddNotify();
  }

  public void removeNotify() {
    lazyRemoveNotify();
  }

  protected void lazyAddNotify() {
    if (!notifySet && parent != null) {
      Iterator iter = eventTypeList.iterator();
      while (iter.hasNext()) {
        Dispatcher dispatcher = parent.getDispatcher((String)iter.next());
        if (dispatcher != null) {
          dispatcher.addNotify(this);
        }
      }
      notifySet = true;
    }
  }

  protected void lazyRemoveNotify() {
    if (notifySet && parent != null) {
      Iterator iter = eventTypeList.iterator();
      while (iter.hasNext()) {
        Dispatcher dispatcher = parent.getDispatcher((String)iter.next());
        if (dispatcher != null)
          dispatcher.removeNotify(this);
      }
      notifySet = false;
    }
  }

  protected boolean isNotifySet() {
    return notifySet;
  }


  public void dispatchEvent(EventObject e) throws Exception {
    processEvent(e);
  }

  protected void processEvent(EventObject e) throws Exception {
    if (e instanceof InputEvent)
      processInputEvent((InputEvent)e);
    if (e instanceof ParameterEvent)
      processParameterEvent((ParameterEvent)e);
    if (e instanceof RenderEvent)
      processRenderEvent((RenderEvent)e);
    if (e instanceof TriggerEvent)
      processTriggerEvent((TriggerEvent)e);
    if (e instanceof RecycleEvent)
      processRecycleEvent((RecycleEvent)e);
  }


  protected void processParameterEvent(ParameterEvent e) throws Exception {
    fireParameterReceived(e);
  }

  public void removeParameterListener(ParameterListener l) {
    if (parameterListeners != null && parameterListeners.contains(l)) {
      parameterListeners.remove(l);
    }
  }

  public void addParameterListener(ParameterListener l) {
    if (parameterListeners != null) {
      if (!parameterListeners.contains(l)) {
        parameterListeners.add(l);
      }
    } else {
      parameterListeners = new ArrayList();
      parameterListeners.add(l);
    }
  }

  protected void fireParameterReceived(ParameterEvent e) throws Exception {
    if (parameterListeners != null) {
      Iterator iter = parameterListeners.iterator();
      while (iter.hasNext()) {
        ((ParameterListener)iter.next()).parameterReceived(e);
      }
    }
  }


  protected void processInputEvent(InputEvent e) throws Exception {
    fireInputReceived(e);
  }


  public synchronized void removeInputListener(InputListener l) {
    if (inputListeners != null && inputListeners.contains(l)) {
      inputListeners.remove(l);
    }
  }

  public synchronized void addInputListener(InputListener l) {
    if (inputListeners != null) {
      if (!inputListeners.contains(l)) {
        inputListeners.add(l);
      }
    } else {
      inputListeners = new ArrayList();
      inputListeners.add(l);
    }
  }

  protected void fireInputReceived(InputEvent e) throws Exception {
    if (inputListeners != null) {
      Iterator iter = inputListeners.iterator();
      while (iter.hasNext()) {
        ((InputListener)iter.next()).inputReceived(e);
      }
    }
  }


  public void processRenderEvent(RenderEvent e) throws RenderException {
    fireRender(e);
  }

  public synchronized void removeRenderListener(RenderListener l) {
    if (renderListeners != null && renderListeners.contains(l)) {
      renderListeners.remove(l);
    }
  }

  public synchronized void addRenderListener(RenderListener l) {
    if (renderListeners != null) {
      if (!renderListeners.contains(l)) {
        renderListeners.add(l);
      }
    } else {
      renderListeners = new ArrayList();
      renderListeners.add(l);
    }
  }

  protected void fireRender(RenderEvent e) throws RenderException {
    if (renderListeners != null) {
      Iterator iter = renderListeners.iterator();
      while (iter.hasNext()) {
        ((RenderListener)iter.next()).render(e);
      }
    }
  }


  protected void processTriggerEvent(TriggerEvent e) throws Exception {
    fireActionPerformed(e);
  }

  public synchronized void removeTriggerListener(TriggerListener l) {
    if (triggerListeners != null && triggerListeners.contains(l)) {
      triggerListeners.remove(l);
    }
  }

  public synchronized void addTriggerListener(TriggerListener l) {
    if (triggerListeners != null) {
      if (!triggerListeners.contains(l)) {
        triggerListeners.add(l);
      }
    } else {
      triggerListeners = new ArrayList();
      triggerListeners.add(l);
    }
  }

  protected void fireActionPerformed(TriggerEvent e) throws Exception {
    if (triggerListeners != null) {
      Iterator iter = triggerListeners.iterator();
      while (iter.hasNext()) {
        ((TriggerListener)iter.next()).actionPerformed(e);
      }
    }
  }


  public void processRecycleEvent(RecycleEvent e) throws RecycleException {
    fireRecycle(e);
  }

  public synchronized void removeRecycleListener(RecycleListener l) {
    if (recycleListeners != null && recycleListeners.contains(l)) {
      recycleListeners.remove(l);
    }
  }

  public synchronized void addRecycleListener(RecycleListener l) {
    if (recycleListeners != null) {
      if (!recycleListeners.contains(l)) {
        recycleListeners.add(l);
      }
    } else {
      recycleListeners = new ArrayList();
      recycleListeners.add(l);
    }
  }

  protected void fireRecycle(RecycleEvent e) throws RecycleException {
    if (recycleListeners != null) {
      Iterator iter = recycleListeners.iterator();
      while (iter.hasNext()) {
        ((RecycleListener)iter.next()).recycle(e);
      }
    }
  }
}
```

File: com.taursys.xml.Container
```java
package com.taursys.xml;

import java.util.ArrayList;
import java.util.EventObject;
import com.taursys.dom.DocumentAdapter;
import java.util.Iterator;
import com.taursys.xml.event.*;
import java.util.HashMap;

public abstract class Container extends Component {
  private ArrayList components = new ArrayList();
  private HashMap dispatchers = new HashMap();

  public Container() {
  }


  public void add(Component c) {
    if (!components.contains(c)) {
      if (c.parent != null)
        c.parent.remove(c);
      components.add(c);
      c.parent = this;
      c.addNotify();
    }
  }

  public void remove(Component c) {
    c.removeNotify();
    components.remove(c);
    c.parent = null;
  }

  public boolean contains(Component c) {
    if (components.contains(c))
      return true;
    Iterator iter = components.iterator();
    while (iter.hasNext()) {
      Object item = iter.next();
      if (item instanceof Container) {
        if (((Container)item).contains(c))
          return true;
      }
    }
    return false;
  }

  public DocumentComponent get(String id) {
    if (id == null)
      return null;
    Iterator iter = components.iterator();
    while (iter.hasNext()) {
      Object item = iter.next();
      if (item instanceof DocumentComponent)
        if (id.equals(((DocumentComponent)item).getId()))
          return (DocumentComponent)item;
      if (item instanceof Container) {
        DocumentComponent dc = ((Container)item).get(id);
        if (dc != null)
          return dc;
      }
    }
    return null;
  }

  public Component[] getComponents() {
    return (Component[])components.toArray(new Component[]{});
  }


  public DocumentAdapter getDocumentAdapter() {
    if (this.parent != null)
      return parent.getDocumentAdapter();
    else
      return null;
  }


  public void addDispatcher(String eventType, Dispatcher d) {
    dispatchers.put(eventType, d);
  }

  public void removeDispatcher(String eventType) {
    dispatchers.remove(eventType);
  }

  public Dispatcher getDispatcher(String eventType) {
    Dispatcher d = (Dispatcher)dispatchers.get(eventType);
    if (d == null && parent != null)
      d = parent.getDispatcher(eventType);
    return d;
  }


  public Dispatcher getParameterDispatcher() {
    return getDispatcher(ParameterEvent.class.getName());
  }

  public Dispatcher getInputDispatcher() {
    return getDispatcher(InputEvent.class.getName());
  }

  public Dispatcher getTriggerDispatcher() {
    return getDispatcher(TriggerEvent.class.getName());
  }

  public RenderDispatcher getRenderDispatcher() {
    return (RenderDispatcher)getDispatcher(RenderEvent.class.getName());
  }

  public RecycleDispatcher getRecycleDispatcher() {
    return (RecycleDispatcher)getDispatcher(RecycleEvent.class.getName());
  }
}
```

File: com.taursys.xml.TextField
```java
package com.taursys.xml;

import com.taursys.xml.event.RenderException;
import com.taursys.xml.render.TextFieldRenderer;
import com.taursys.xml.event.RenderEvent;

public class TextField extends AbstractField {
  private TextFieldRenderer renderer;

  public TextField() {
    super();
    renderer = createDefaultRenderer();
  }

  public TextField(int javaDataType) {
    super(javaDataType);
    renderer = createDefaultRenderer();
  }

  protected TextFieldRenderer createDefaultRenderer() {
    return new TextFieldRenderer(this);
  }

  public void processRenderEvent(RenderEvent e) throws RenderException {
    fireRender(e);
    renderer.render();
  }

  public void setRenderer(TextFieldRenderer newRenderer) {
    renderer = newRenderer;
  }

  public TextFieldRenderer getRenderer() {
    return renderer;
  }
}
```

File: com.taursys.xml.SelectField
```java
package com.taursys.xml;

import com.taursys.model.DefaultSelectModel;
import com.taursys.model.SelectModel;
import com.taursys.model.TextModel;
import com.taursys.model.ObjectArrayValueHolder;
import com.taursys.model.ModelException;
import com.taursys.xml.render.SelectFieldRenderer;
import com.taursys.xml.event.RenderEvent;
import com.taursys.xml.event.RenderException;

public class SelectField extends AbstractField {
  private SelectFieldRenderer renderer;


  public SelectField() {
    renderer = createDefaultRenderer();
  }

  public SelectField(int javaDataType) {
    super(javaDataType);
    renderer = createDefaultRenderer();
  }

  public SelectField(Object[] array) {
    renderer = createDefaultRenderer();
    setList(new ObjectArrayValueHolder(array));
  }

  public SelectField(int javaDataType, Object[] array) {
    super(javaDataType);
    renderer = createDefaultRenderer();
    setList(new ObjectArrayValueHolder(array));
  }


  protected TextModel createDefaultModel() {
    return new DefaultSelectModel();
  }

  protected TextModel createDefaultModel(int javaDataType) {
    return new DefaultSelectModel(javaDataType);
  }

  public void setModel(TextModel newModel) throws IllegalArgumentException {
    if (!(newModel instanceof SelectModel))
      throw new IllegalArgumentException(
          "Invalid Model type passed - must be instance of SelectModel.");
    super.setModel( newModel);
  }

  protected SelectModel getSelectModel() {
    return (SelectModel)getModel();
  }

  protected SelectFieldRenderer createDefaultRenderer() {
    return new SelectFieldRenderer(this);
  }

  public void setRenderer(SelectFieldRenderer newRenderer) {
    renderer = newRenderer;
  }

  public SelectFieldRenderer getRenderer() {
    return renderer;
  }


  public String getText() throws ModelException {
    return getModel().getText();
  }

  public void setText(String text) throws ModelException {
    getModel().setText(text);
  }

  public Object getSelection() throws ModelException {
    return getSelectModel().getSelectedItem();
  }

  public void setSelection(Object value) throws ModelException {
    getSelectModel().setSelectedItem(value);
  }


  public void processRenderEvent(RenderEvent e) throws RenderException {
    fireRender(e);
    renderer.render();
  }


  public void setList(com.taursys.model.CollectionValueHolder newList) {
    getSelectModel().setList(newList);
  }

  public com.taursys.model.CollectionValueHolder getList() {
    return getSelectModel().getList();
  }

  public void setDisplayPropertyName(String newDisplayPropertyName) {
    getSelectModel().setDisplayPropertyName(newDisplayPropertyName);
  }

  public String getDisplayPropertyName() {
    return getSelectModel().getDisplayPropertyName();
  }

  public void setListPropertyNames(String[] newListPropertyNames) {
    getSelectModel().setListPropertyNames(newListPropertyNames);
  }

  public String[] getListPropertyNames() {
    return getSelectModel().getListPropertyNames();
  }

  public void setPropertyNames(String[] newPropertyNames) {
    getSelectModel().setPropertyNames(newPropertyNames);
  }

  public String[] getPropertyNames() {
    return getSelectModel().getPropertyNames();
  }

  public void setPropertyName(String newPropertyName) {
    getSelectModel().setPropertyName(newPropertyName);
  }

  public String getPropertyName() {
    return getSelectModel().getPropertyName();
  }

  public void setNullAllowed(boolean nullAllowed) {
    getSelectModel().setNullAllowed(nullAllowed);
  }

  public boolean isNullAllowed() {
    return getSelectModel().isNullAllowed();
  }

  public void setNullDisplay(String newNullDisplay) {
    getSelectModel().setNullDisplay(newNullDisplay);
  }

  public String getNullDisplay() {
    return getSelectModel().getNullDisplay();
  }
}
```

File: com.taursys.xml.Trigger
```java
package com.taursys.xml;

import javax.swing.ButtonModel;
import javax.swing.DefaultButtonModel;
import com.taursys.xml.event.TriggerEvent;

public class Trigger extends Component {
  private ButtonModel model;
  private String parameter;
  private String text = null;
  private boolean defaultTrigger;

  public Trigger() {
    addEventType(TriggerEvent.class.getName());
    model = createDefaultModel();
  }

  protected ButtonModel createDefaultModel() {
    return new DefaultButtonModel();
  }

  public ButtonModel getModel() {
    return model;
  }

  public void setModel(ButtonModel newModel) {
    model = newModel;
  }

  protected void processTriggerEvent(TriggerEvent e) throws Exception {
    model.setSelected(true);
    model.setPressed(true);
    fireActionPerformed(e);
  }

  public void setParameter(String newParameter) {
    parameter = newParameter;
  }

  public String getParameter() {
    return parameter;
  }

  public void setText(String newText) {
    text = newText;
  }

  public String getText() {
    return text;
  }

  public void setDefaultTrigger(boolean newDefaultTrigger) {
    defaultTrigger = newDefaultTrigger;
  }

  public boolean isDefaultTrigger() {
    return defaultTrigger;
  }
}
```

File: com.taursys.xml.CheckboxField
```java
package com.taursys.xml;

import com.taursys.model.DefaultCheckboxModel;
import com.taursys.model.CheckboxModel;
import com.taursys.model.TextModel;
import com.taursys.model.ModelException;
import com.taursys.xml.render.CheckboxFieldRenderer;
import com.taursys.xml.event.RenderEvent;
import com.taursys.xml.event.RenderException;

public class CheckboxField extends AbstractField {
  private CheckboxFieldRenderer renderer;


  public CheckboxField() {
    renderer = createDefaultRenderer();
  }

  public CheckboxField(int javaDataType) {
    super(javaDataType);
    renderer = createDefaultRenderer();
  }


  protected TextModel createDefaultModel() {
    return new DefaultCheckboxModel();
  }

  protected TextModel createDefaultModel(int javaDataType) {
    return new DefaultCheckboxModel(javaDataType);
  }

  public void setModel(TextModel newModel) throws IllegalArgumentException {
    if (!(newModel instanceof CheckboxModel))
      throw new IllegalArgumentException(
          "Invalid Model type passed - must be instance of CheckboxModel.");
    super.setModel( newModel);
  }

  protected CheckboxModel getCheckboxModel() {
    return (CheckboxModel)getModel();
  }

  protected CheckboxFieldRenderer createDefaultRenderer() {
    return new CheckboxFieldRenderer(this);
  }

  public void setRenderer(CheckboxFieldRenderer newRenderer) {
    renderer = newRenderer;
  }

  public CheckboxFieldRenderer getRenderer() {
    return renderer;
  }


  public String getText() throws ModelException {
    return getModel().getText();
  }

  public void setText(String text) throws ModelException {
    getModel().setText(text);
  }

  public boolean isSelected() throws ModelException {
    return getCheckboxModel().isSelected();
  }

  public void setSelected(boolean newSelected) throws ModelException {
    getCheckboxModel().setSelected(newSelected);
  }


  public void processRenderEvent(RenderEvent e) throws RenderException {
    fireRender(e);
    renderer.render();
  }


  public void setSelectedValue(String newSelectedValue) {
    getCheckboxModel().setSelectedValue(newSelectedValue);
  }

  public String getSelectedValue() {
    return getCheckboxModel().getSelectedValue();
  }

  public void setUnselectedValue(String newUnselectedValue) {
    getCheckboxModel().setUnselectedValue(newUnselectedValue);
  }

  public String getUnselectedValue() {
    return getCheckboxModel().getUnselectedValue();
  }
}
```

File: com.taursys.xml.Template
```java
package com.taursys.xml;

import com.taursys.xml.event.*;
import com.taursys.xml.render.TemplateRenderer;
import com.taursys.xml.render.DocumentElementRenderer;
import com.taursys.model.CollectionValueHolder;

public class Template extends DocumentElement {
  private CollectionValueHolder collectionValueHolder;

  public Template() {
  }


  protected InputDispatcher createInputDispatcher() {
    return new TemplateInputDispatcher(this);
  }

  protected TriggerDispatcher createTriggerDispatcher() {
    return new TemplateTriggerDispatcher(this);
  }


  protected DocumentElementRenderer createDefaultRenderer() {
    return new TemplateRenderer(this);
  }

  public void setCollectionValueHolder(CollectionValueHolder holder) {
    collectionValueHolder = holder;
  }


  public CollectionValueHolder getCollectionValueHolder() {
    return collectionValueHolder;
  }
}
```

File: com.taursys.xml.DocumentComponent
```java
package com.taursys.xml;

public interface DocumentComponent {

  public String getId();

  public void setId(String newId);
}
```

File: com.taursys.xml.test.CheckboxFieldTest
```java
package com.taursys.xml.test;

import junit.framework.TestCase;
import com.taursys.model.*;
import com.taursys.servlet.*;
import com.taursys.swing.*;
import com.taursys.util.*;
import com.taursys.xml.*;


public class CheckboxFieldTest extends TestCase {
  CheckboxField field;

  public CheckboxFieldTest(String _name) {
    super(_name);
  }

  protected void setUp() {
  }

  protected void tearDown() {
  }

  public void testCreateDefaultModel() {
    field = new CheckboxField();
    assertEquals("Model", "com.taursys.model.DefaultCheckboxModel",
        field.getModel().getClass().getName());
  }

  public void testCreateDefaultModel2() {
    field = new CheckboxField(DataTypes.TYPE_BOOLEAN);
    assertEquals("Model", "com.taursys.model.DefaultCheckboxModel",
        field.getModel().getClass().getName());
  }

  public static void main(String[] argv) {
    String[] testCaseList = {CheckboxFieldTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.xml.test.SelectFieldTest
```java
package com.taursys.xml.test;

import junit.framework.TestCase;
import com.taursys.html.*;
import com.taursys.model.*;
import com.taursys.model.test.*;
import com.taursys.servlet.*;
import com.taursys.swing.*;
import com.taursys.util.*;
import com.taursys.xml.*;
import java.text.*;
import java.util.*;
import java.math.*;


public class SelectFieldTest extends TestCase {

  public SelectFieldTest(String _name) {
    super(_name);
  }

  protected void setUp() {
  }

  protected void tearDown() {
  }

  public void testGetTextDefaults() throws Exception {
    SelectField select = new SelectField();
    assertEquals("text value", "--none--", select.getText());
  }

  public void testSetTextNullDefaults() throws Exception {
    SelectField select = new SelectField();
    select.setText(null);
    assertEquals("text value", "--none--", select.getText());
  }

  public void testSetTextNoneDefaults() throws Exception {
    SelectField select = new SelectField();
    select.setText("--none--");
    assertEquals("text value", "--none--", select.getText());
  }

  public void testSetTextSecondStringArray() throws Exception {
    String[] array = new String[] {"First","Second","Third"};
    SelectField select = new SelectField(array);
    select.setText("Second");
    assertEquals("text value", "Second", select.getText());
  }

  public void testSetTextSecondPersonArray() throws Exception {
    TestValueObject[] array = new TestValueObject[] {
        new JeanLucPicard(),
        new BeverlyCrusher(),
        new WillRiker(),
        };
    SelectField select = new SelectField(array);
    select.setText("Beverly Crusher");
    assertEquals("text value", "Beverly Crusher", select.getText());
  }

  public void testSetTextSupervisor() throws Exception {
    TestValueObject[] array = new TestValueObject[] {
        new JeanLucPicard(),
        new BeverlyCrusher(),
        new WillRiker(),
        };
    SelectField select = new SelectField(array);
    TestValueObject anon = new TestValueObject();
    VOValueHolder holder = new VOValueHolder();
    holder.setValueObject(anon);
    select.setValueHolder(holder);
    select.setPropertyName("supervisor");

    select.setText("Beverly Crusher");

    assertEquals("text value", "Beverly Crusher", anon.getSupervisor().toString());
  }

  public void testGetSelectionDefaults() throws Exception {
    SelectField select = new SelectField();
    assertNull("selection value", select.getSelection());
  }

  public void testSetSelectionNullDefaults() throws Exception {
    SelectField select = new SelectField();
    select.setSelection(null);
    assertNull("selection value", select.getSelection());
  }

  public void testSetSelectionSupervisor() throws Exception {
    TestValueObject[] array = new TestValueObject[] {
        new JeanLucPicard(),
        new BeverlyCrusher(),
        new WillRiker(),
        };
    SelectField select = new SelectField(array);
    TestValueObject anon = new TestValueObject();
    VOValueHolder holder = new VOValueHolder();
    holder.setValueObject(anon);
    select.setValueHolder(holder);
    select.setPropertyName("supervisor");

    select.setSelection(array[1]);

    assertEquals("text value", "Beverly Crusher", anon.getSupervisor().toString());
  }

  public static void main(String[] argv) {
    String[] testCaseList = {SelectFieldTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.xml.test.ParameterTest
```java
package com.taursys.xml.test;

import junit.framework.TestCase;
import java.text.*;
import java.util.*;
import com.taursys.html.*;
import com.taursys.model.*;
import com.taursys.model.test.*;
import com.taursys.servlet.*;
import com.taursys.swing.*;
import com.taursys.util.*;
import com.taursys.xml.*;

public class ParameterTest extends TestCase {

  public ParameterTest(String _name) {
    super(_name);
  }

  protected void setUp() {
  }

  protected void tearDown() {
  }

  public void testGetTextStringNull() throws Exception {
    Parameter parameter = new Parameter();
    assertEquals("text value", "", parameter.getText());
  }

  public void testSetTextStringEmpty() throws Exception {
    Parameter parameter = new Parameter();
    parameter.setText("");
    assertEquals("text value", "", parameter.getText());
  }

  public void testSetTextStringNull() throws Exception {
    Parameter parameter = new Parameter();
    parameter.setText(null);
    assertEquals("text value", "", parameter.getText());
  }

  public void testSetTextString() throws Exception {
    Parameter parameter = new Parameter();
    parameter.setText("Marty");
    assertEquals("text value", "Marty", parameter.getText());
  }

  public void testSetTextDate() throws Exception {
    Parameter parameter = new Parameter(DataTypes.TYPE_DATE);
    parameter.setFormat(SimpleDateFormat.getDateInstance(DateFormat.SHORT));
    parameter.setText("01/31/2002");
    assertEquals("text value", "1/31/02", parameter.getText());
  }

  public void testGetValueStringNull() throws Exception {
    Parameter parameter = new Parameter();
    assertNull("object value", parameter.getValue());
  }

  public void testGetValueString() throws Exception {
    Parameter parameter = new Parameter();
    parameter.setText("Marty");
    assertEquals("object value", "Marty", parameter.getValue());
  }

  public void testGetValueDate() throws Exception {
    Parameter parameter = new Parameter(DataTypes.TYPE_DATE);
    DateFormat df = SimpleDateFormat.getDateInstance(DateFormat.SHORT);
    parameter.setFormat(df);
    parameter.setText("01/31/2002");
    assertEquals("object value", df.parse("01/31/2002"), parameter.getValue());
  }

  public void testSetValueStringNull() throws Exception {
    Parameter parameter = new Parameter();
    parameter.setValue(null);
    assertNull("object value", parameter.getValue());
  }

  public void testSetValueString() throws Exception {
    Parameter parameter = new Parameter();
    parameter.setValue("Marty");
    assertEquals("object value", "Marty", parameter.getValue());
  }

  public void testSetValueDate() throws Exception {
    Parameter parameter = new Parameter(DataTypes.TYPE_DATE);
    DateFormat df = SimpleDateFormat.getDateInstance(DateFormat.SHORT);
    parameter.setValue(df.parse("01/31/2002"));
    assertEquals("object value", df.parse("01/31/2002"), parameter.getValue());
  }

  public void testGetValueVODate() throws Exception {
    Parameter parameter = new Parameter();
    JeanLucPicard jean = new JeanLucPicard();
    VOValueHolder holder = new VOValueHolder();
    holder.setValueObject(jean);
    parameter.setValueHolder(holder);
    parameter.setPropertyName("birthdate");
    assertEquals("object value", jean.getBirthdate(), parameter.getValue());
  }

  public static void main(String[] argv) {
    String[] testCaseList = {ParameterTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.xml.render.CheckboxFieldRenderer
```java
package com.taursys.xml.render;

import com.taursys.xml.CheckboxField;
import com.taursys.model.ModelException;
import com.taursys.dom.DocumentAdapter;
import com.taursys.xml.event.RenderException;
import com.taursys.xml.Component;
import com.taursys.xml.DocumentComponent;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

public class CheckboxFieldRenderer extends AbstractRenderer {

  public CheckboxFieldRenderer(CheckboxField field) {
    super(field);
  }

  public void render() throws RenderException {
    init();
    if (getComponent().isVisible()) {
      restoreSelf();
      try {
        DocumentAdapter da = getComponent().getParent().getDocumentAdapter();
        da.setElementText(((DocumentComponent)getComponent()).getId(),
            ((CheckboxField)getComponent()).getModel().getText());
      } catch (ModelException ex) {
        throw new RenderException(RenderException.REASON_MODEL_EXCEPTION, ex);
      }
    } else {
      removeSelf();
    }
  }
}
```

File: com.taursys.xml.render.TextFieldRenderer
```java
package com.taursys.xml.render;

import com.taursys.xml.TextField;
import com.taursys.model.ModelException;
import com.taursys.dom.DocumentAdapter;
import com.taursys.xml.event.RenderException;
import com.taursys.xml.Component;
import com.taursys.xml.DocumentComponent;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

public class TextFieldRenderer extends AbstractRenderer {

  public TextFieldRenderer() {
    super(null);
  }

  public TextFieldRenderer(TextField textField) {
    super(textField);
  }

  public void render(TextField textField) throws RenderException {
    try {
      DocumentAdapter da = textField.getParent().getDocumentAdapter();
      da.setElementText(textField.getId(), textField.getModel().getText());
    } catch (ModelException ex) {
      throw new RenderException(RenderException.REASON_MODEL_EXCEPTION, ex);
    }
  }

  public void render() throws RenderException {
    init();
    if (getComponent().isVisible()) {
      restoreSelf();
      try {
        DocumentAdapter da = getComponent().getParent().getDocumentAdapter();
        da.setElementText(((DocumentComponent)getComponent()).getId(),
            ((TextField)getComponent()).getModel().getText());
      } catch (ModelException ex) {
        throw new RenderException(RenderException.REASON_MODEL_EXCEPTION, ex);
      }
    } else {
      removeSelf();
    }
  }
}
```

File: com.taursys.xml.render.AttributeSelectFieldRenderer
```java
package com.taursys.xml.render;

import com.taursys.xml.SelectField;
import com.taursys.model.ModelException;
import com.taursys.dom.DocumentAdapter;
import com.taursys.xml.event.RenderException;
import com.taursys.xml.DocumentComponent;

public class AttributeSelectFieldRenderer extends SelectFieldRenderer {

  public AttributeSelectFieldRenderer() {
  }

  public AttributeSelectFieldRenderer(SelectField c) {
    super(c);
  }

  public void render(SelectField field) throws RenderException {
    try {
      DocumentAdapter da = field.getParent().getDocumentAdapter();
      da.setAttributeText(field.getId(), field.getAttributeName(),
          field.getModel().getText());
    } catch (ModelException ex) {
      throw new RenderException(RenderException.REASON_MODEL_EXCEPTION, ex);
    }
  }

  public void render() throws RenderException {
    init();
    if (getComponent().isVisible()) {
      restoreSelf();
      try {
        DocumentAdapter da = getComponent().getParent().getDocumentAdapter();
        da.setAttributeText(((DocumentComponent)getComponent()).getId(),
            ((SelectField)getComponent()).getAttributeName(),
            ((SelectField)getComponent()).getModel().getText());
      } catch (ModelException ex) {
        throw new RenderException(RenderException.REASON_MODEL_EXCEPTION, ex);
      }
    } else {
      removeSelf();
    }
  }
}
```

File: com.taursys.xml.render.TemplateRenderer
```java
package com.taursys.xml.render;

import com.taursys.debug.Debug;
import com.taursys.xml.event.Dispatcher;
import com.taursys.xml.event.RenderEvent;
import com.taursys.xml.event.RenderDispatcher;
import com.taursys.xml.event.RenderException;
import com.taursys.xml.event.RecycleEvent;
import com.taursys.xml.event.RecycleDispatcher;
import com.taursys.xml.event.RecycleException;
import com.taursys.model.CollectionValueHolder;
import com.taursys.xml.Component;
import com.taursys.xml.Container;
import com.taursys.xml.DocumentComponent;
import com.taursys.xml.Template;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

public class TemplateRenderer extends DocumentElementRenderer {
  private Collection clones = new ArrayList();

  public TemplateRenderer(Template template) {
    super(template);
  }

  public void recycle() throws RecycleException {
    super.recycle();
    removeClones();
  }

  public void render() throws RenderException {
    init();
    removeClones();
    if (getComponent().isVisible()) {
      restoreSelf();
      CollectionValueHolder collectionValueHolder =
          ((Template)getComponent()).getCollectionValueHolder();
      if (collectionValueHolder != null) {
        int i = 1;
        collectionValueHolder.reset();
        RenderDispatcher dispatcher = (RenderDispatcher)
            ((Container)getComponent()).getDispatcher(
                RenderEvent.class.getName());
        while (collectionValueHolder.hasNext()) {
          collectionValueHolder.next();
          dispatcher.dispatch();
          cloneSelf("__row" + i);
          i++;
        }
      } else {
        Debug.warn("Template with id=" + ((Template)getComponent()).getId()
            + " has a null CollectionValueHolder during rendering.");
      }
    }
    removeSelf();
  }

  protected void removeClones() {
    Iterator i = clones.iterator();
    while(i.hasNext())
      getParentNode().removeChild((Node)i.next());
    clones.clear();
  }

  protected void cloneSelf(String appendValue) {
    Node cloneNode = getComponentNode().cloneNode(true);
    alterIDs((Element)cloneNode, appendValue);
    getParentNode().insertBefore(cloneNode, getComponentNode());
    clones.add(cloneNode);
  }

  protected void alterIDs(Element parent, String appendValue) {
    String id = parent.getAttribute("id");
    if (id != null && id.length() > 0) {
      id += appendValue;
      parent.setAttribute("id", id);
    }
    Node child = parent.getFirstChild();
    while (child != null) {
      if (child.getNodeType() == Node.ELEMENT_NODE) {
        alterIDs((Element)child, appendValue);
      }
      child = child.getNextSibling();
    }
  }

  public Collection getClones() {
    return clones;
  }
}
```

File: com.taursys.xml.render.FormRenderer
```java
package com.taursys.xml.render;

import com.taursys.xml.*;
import com.taursys.xml.event.*;
import com.taursys.dom.*;
import com.taursys.servlet.*;
import com.taursys.debug.Debug;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.w3c.dom.Document;

public class FormRenderer extends DocumentElementRenderer {
  private Node sourceNode;
  private Document sourceDoc;

  public FormRenderer(Form de) {
    super(de);
  }

  protected void init() throws RenderException {
    super.init();
    Form form = ((Form)getComponent());
    DocumentAdapter da = form.getDocumentAdapter();
    if (da == null)
      throw new RenderException(RenderException.REASON_DOCUMENT_IS_NULL);
    Document d = da.getDocument();
    if (d == null)
      throw new RenderException(RenderException.REASON_DOCUMENT_IS_NULL);
    if (sourceDoc != d) {
      sourceDoc = d;
      sourceNode = null;
    }
    if (sourceNode == null) {
      String id = form.getSourceId();
      if (id != null) {
        sourceNode = da.getElementById(id);
        if (sourceNode == null) {
          Debug.warn("SubFormRenderer.init: Attempt to render a component which is not in document. ID="
            + id);
        }
      } else {
          Debug.warn("SubFormRenderer.init: Attempt to render a component whose ID is null. Class="
            + form.getClass().getName());
      }
    }
  }

  public void render() throws RenderException {
    init();

    if (getComponent().isVisible()) {

      restoreSelf();

      Form form = ((Form)getComponent());

      RenderDispatcher d = (RenderDispatcher)
          form.getDispatcher(RenderEvent.class.getName());
      d.dispatch();

      if (sourceNode != null && getComponentNode() != null) {
        importContents(sourceNode, getComponentNode());
      }

    } else {
      removeSelf();
    }
  }

  private void importContents(Node source, Node destination) {
    Node child;
    while ((child = destination.getFirstChild()) != null) {
      destination.removeChild(child);
    }
    destination.appendChild(getDocument().importNode(source, true));
  }
}
```

File: com.taursys.xml.render.SelectFieldRenderer
```java
package com.taursys.xml.render;

import com.taursys.xml.SelectField;
import com.taursys.model.ModelException;
import com.taursys.dom.DocumentAdapter;
import com.taursys.xml.event.RenderException;
import com.taursys.xml.DocumentComponent;

public class SelectFieldRenderer extends AbstractRenderer {

  public SelectFieldRenderer() {
    super(null);
  }

  public SelectFieldRenderer(SelectField c) {
    super(c);
  }

  public void render(SelectField textField) throws RenderException {
    try {
      DocumentAdapter da = textField.getParent().getDocumentAdapter();
      da.setElementText(textField.getId(), textField.getModel().getText());
    } catch (ModelException ex) {
      throw new RenderException(RenderException.REASON_MODEL_EXCEPTION, ex);
    }
  }

  public void render() throws RenderException {
    init();
    if (getComponent().isVisible()) {
      restoreSelf();
      try {
        DocumentAdapter da = getComponent().getParent().getDocumentAdapter();
        da.setElementText(((DocumentComponent)getComponent()).getId(),
            ((SelectField)getComponent()).getModel().getText());
      } catch (ModelException ex) {
        throw new RenderException(RenderException.REASON_MODEL_EXCEPTION, ex);
      }
    } else {
      removeSelf();
    }
  }
}
```

File: com.taursys.xml.render.DocumentElementRenderer
```java
package com.taursys.xml.render;

import com.taursys.debug.Debug;
import com.taursys.xml.event.*;
import com.taursys.xml.*;

public class DocumentElementRenderer extends AbstractRenderer {

  public DocumentElementRenderer(DocumentElement de) {
    super(de);
  }

  public void recycle() throws RecycleException {
    try {
      init();
    } catch (RenderException ex) {
      throw new RecycleException(ex.getReason(), ex);
    }
    restoreSelf();
    RecycleDispatcher d = (RecycleDispatcher)
        ((Container)getComponent()).getDispatcher(RecycleEvent.class.getName());
    d.dispatch();
  }

  public void render() throws RenderException {
    init();
    if (getComponent().isVisible()) {
      restoreSelf();
      RenderDispatcher d = (RenderDispatcher)
          ((Container)getComponent()).getDispatcher(RenderEvent.class.getName());
      d.dispatch();
    } else {
      removeSelf();
    }
  }
}
```

File: com.taursys.xml.render.VisibleRenderer
```java
package com.taursys.xml.render;

import com.taursys.xml.Component;
import com.taursys.xml.event.RenderException;

public class VisibleRenderer extends AbstractRenderer {

  public VisibleRenderer(Component c) {
    super(c);
  }

  public void render() throws RenderException {
    init();
    if (getComponent().isVisible()) {
      restoreSelf();
    } else {
      removeSelf();
    }
  }
}
```

File: com.taursys.xml.render.AttributeTextFieldRenderer
```java
package com.taursys.xml.render;

import com.taursys.xml.TextField;
import com.taursys.model.ModelException;
import com.taursys.dom.DocumentAdapter;
import com.taursys.xml.event.RenderException;
import com.taursys.xml.DocumentComponent;

public class AttributeTextFieldRenderer extends TextFieldRenderer {

  public AttributeTextFieldRenderer() {
  }

  public AttributeTextFieldRenderer(TextField textField) {
    super(textField);
  }

  public void render(TextField textField) throws RenderException {
    try {
      DocumentAdapter da = textField.getParent().getDocumentAdapter();
      da.setAttributeText(textField.getId(), textField.getAttributeName(),
          textField.getModel().getText());
    } catch (ModelException ex) {
      throw new RenderException(RenderException.REASON_MODEL_EXCEPTION, ex);
    }
  }

  public void render() throws RenderException {
    init();
    if (getComponent().isVisible()) {
      restoreSelf();
      try {
        DocumentAdapter da = getComponent().getParent().getDocumentAdapter();
        da.setAttributeText(((DocumentComponent)getComponent()).getId(),
            ((TextField)getComponent()).getAttributeName(),
            ((TextField)getComponent()).getModel().getText());
      } catch (ModelException ex) {
        throw new RenderException(RenderException.REASON_MODEL_EXCEPTION, ex);
      }
    } else {
      removeSelf();
    }
  }
}
```

File: com.taursys.xml.render.AbstractRenderer
```java
package com.taursys.xml.render;

import com.taursys.debug.Debug;
import com.taursys.xml.Component;
import com.taursys.xml.Container;
import com.taursys.xml.DocumentComponent;
import com.taursys.xml.event.RenderException;
import com.taursys.dom.DocumentAdapter;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.w3c.dom.Document;

public class AbstractRenderer {
  private Component component = null;
  private boolean removed = false;
  private Node componentNode;
  private Node parentNode;
  private Node siblingNode;
  private Document doc;

  public AbstractRenderer(Component c) {
    this.component = c;
  }

  protected void init() throws RenderException {
    Container parent = component.getParent();
    if (parent == null)
      throw new RenderException(RenderException.REASON_PARENT_CONTAINER_NULL);
    DocumentAdapter da = parent.getDocumentAdapter();
    if (da == null)
      throw new RenderException(RenderException.REASON_DOCUMENT_IS_NULL);
    Document currentDoc = da.getDocument();
    if (currentDoc == null)
      throw new RenderException(RenderException.REASON_DOCUMENT_IS_NULL);
    if (doc != currentDoc) {
      doc = currentDoc;
      componentNode = null;
    }
    if (componentNode == null) {
      String id = ((DocumentComponent)component).getId();
      if (id != null) {
        componentNode = component.getParent().getDocumentAdapter().getElementById(
            ((DocumentComponent)component).getId());
        if (componentNode != null) {
          parentNode = componentNode.getParentNode();
          siblingNode = componentNode.getNextSibling();
        } else {
          Debug.warn("AbstractRenderer.init: Attempt to render a component which is not in document. ID="
            + ((DocumentComponent)component).getId());
        }
      } else {
          Debug.warn("AbstractRenderer.init: Attempt to render a component whose ID is null. Class="
            + component.getClass().getName());
      }
    }
  }

  protected void removeSelf() {
    if (!removed && parentNode != null && componentNode != null) {
      parentNode.removeChild(componentNode);
      removed = true;
    }
  }

  protected void restoreSelf() {
    if (removed && parentNode != null && componentNode != null) {
      parentNode.insertBefore(componentNode, siblingNode);
      removed = false;
    }
  }

  protected Node getComponentNode() {
    return componentNode;
  }

  public Node getParentNode() {
    return parentNode;
  }

  public Node getSiblingNode() {
    return siblingNode;
  }

  public Component getComponent() {
    return component;
  }

  public Document getDocument() {
    return doc;
  }

  public void setRemoved(boolean b) {
    removed = b;
  }

  public boolean isRemoved() {
    return removed;
  }
}
```

File: com.taursys.xml.event.InitContextListener
```java
package com.taursys.xml.event;

import java.util.EventListener;

public interface InitContextListener extends EventListener {

  public void initContext(InitContextEvent e) throws Exception;
}
```

File: com.taursys.xml.event.OpenFormDispatcher
```java
package com.taursys.xml.event;

import com.taursys.xml.event.*;
import com.taursys.xml.*;

public class OpenFormDispatcher extends Dispatcher {
  private Component source;

  public OpenFormDispatcher(Component source) {
    this.source = source;
  }

  public void dispatchToComponent(Component c) throws Exception {
    c.dispatchEvent(new OpenFormEvent(source));
  }

}
```

File: com.taursys.xml.event.RecycleEvent
```java
package com.taursys.xml.event;

public class RecycleEvent extends java.util.EventObject {

  public RecycleEvent(Object source) {
    super(source);
  }
}
```

File: com.taursys.xml.event.CloseFormEvent
```java
package com.taursys.xml.event;

import java.util.*;

public class CloseFormEvent extends EventObject {

  public CloseFormEvent(Object source) {
    super(source);
  }
}
```

File: com.taursys.xml.event.TemplateTriggerDispatcher
```java
package com.taursys.xml.event;

import com.taursys.xml.Parameter;
import com.taursys.xml.Trigger;
import com.taursys.xml.Component;
import com.taursys.xml.Container;
import com.taursys.xml.Template;
import com.taursys.debug.Debug;
import java.util.Map;
import com.taursys.model.CollectionValueHolder;

public class TemplateTriggerDispatcher extends TriggerDispatcher {
  private Template template;

  public TemplateTriggerDispatcher(Template template) {
    this.template = template;
  }

  public void dispatch(Map map) throws Exception {
    CollectionValueHolder collectionValueHolder =
        template.getCollectionValueHolder();
    if (collectionValueHolder != null) {
      resetIndex();
      collectionValueHolder.reset();
      while (collectionValueHolder.hasNext()) {
        collectionValueHolder.next();
        super.dispatch(map);
        incrementIndex();
      }
    } else {
      Debug.warn("Template with id=" + template.getId()
          + " has a null CollectionValueHolder during trigger processing.");
    }
  }
}
```

File: com.taursys.xml.event.TemplateInputDispatcher
```java
package com.taursys.xml.event;

import com.taursys.xml.Parameter;
import com.taursys.xml.Component;
import com.taursys.xml.Container;
import com.taursys.xml.Template;
import com.taursys.debug.Debug;
import java.util.Map;
import com.taursys.model.CollectionValueHolder;

public class TemplateInputDispatcher extends InputDispatcher {
  private Template template;

  public TemplateInputDispatcher(Template template) {
    this.template = template;
  }

  public void dispatch(Map map) throws Exception {
    CollectionValueHolder collectionValueHolder =
        template.getCollectionValueHolder();
    if (collectionValueHolder != null) {
      resetIndex();
      collectionValueHolder.reset();
      while (collectionValueHolder.hasNext()) {
        collectionValueHolder.next();
        super.dispatch(map);
        incrementIndex();
      }
    } else {
      Debug.warn("Template with id=" + template.getId()
          + " has a null CollectionValueHolder during input processing.");
    }
  }
}
```

File: com.taursys.xml.event.RecycleListener
```java
package com.taursys.xml.event;

import java.util.*;

public interface RecycleListener extends EventListener {

  public void recycle(RecycleEvent e) throws RecycleException;
}
```

File: com.taursys.xml.event.InitFormDispatcher
```java
package com.taursys.xml.event;

import com.taursys.xml.event.*;
import com.taursys.xml.*;

public class InitFormDispatcher extends Dispatcher {
  private Component source;

  public InitFormDispatcher(Component source) {
    this.source = source;
  }

  public void dispatchToComponent(Component c) throws Exception {
    c.dispatchEvent(new InitFormEvent(source));
  }

}
```

File: com.taursys.xml.event.CloseFormDispatcher
```java
package com.taursys.xml.event;

import com.taursys.xml.event.*;
import com.taursys.xml.*;

public class CloseFormDispatcher extends Dispatcher {
  private Component source;

  public CloseFormDispatcher(Component source) {
    this.source = source;
  }

  public void dispatchToComponent(Component c) throws Exception {
    c.dispatchEvent(new CloseFormEvent(source));
  }

}
```

File: com.taursys.xml.event.TriggerEvent
```java
package com.taursys.xml.event;

import java.util.EventObject;
import java.util.Map;

public class TriggerEvent extends EventObject {
  private String name;
  private String value;
  private Map map;

  public TriggerEvent(Object source, String name, String value) {
    super(source);
    this.name = name;
    this.value = value;
  }

  public TriggerEvent(Object source, Map map) {
    super(source);
    this.map = map;
  }

  public String getName() {
    return name;
  }

  public String getValue() {
    return value;
  }

  public Map getMap() {
    return map;
  }
}
```

File: com.taursys.xml.event.InputListener
```java
package com.taursys.xml.event;

import java.util.EventListener;

public interface InputListener extends EventListener {

  public void inputReceived(InputEvent e) throws Exception;
}
```

File: com.taursys.xml.event.RecycleException
```java
package com.taursys.xml.event;

import com.taursys.util.ChainedException;

public class RecycleException extends ChainedException {
  public static final int REASON_OFFSET                       = 3000;
  public static final int REASON_MODEL_EXCEPTION              = 0 + REASON_OFFSET;
  public static final int REASON_PARENT_CONTAINER_NULL        = 1 + REASON_OFFSET;
  public static final int REASON_DOCUMENT_IS_NULL             = 2 + REASON_OFFSET;
  private static final String[] messages = new String[] {
    "ModelException occurred during recycling.",
    "Parent container is null",
    "Document and/or DocumentAdapter is null",
  };


  public static String getReasonMessage(int reason) {
    if (reason >=  + REASON_OFFSET && reason < messages.length + REASON_OFFSET)
      return messages[reason - REASON_OFFSET];
    else
      return getInvalidMessage();
  }


  public RecycleException(int reason) {
    super(getReasonMessage(reason), reason);
  }

  public RecycleException(int reason, Throwable cause) {
    super(getReasonMessage(reason), reason, cause);
  }
}
```

File: com.taursys.xml.event.RenderDispatcher
```java
package com.taursys.xml.event;

import java.util.Iterator;
import com.taursys.xml.Container;
import com.taursys.xml.Component;

public class RenderDispatcher extends Dispatcher {
  private RenderEvent renderEvent;

  public RenderDispatcher(Container c) {
    renderEvent = new RenderEvent(c);
  }

  public void dispatchToComponent(Component c) throws Exception {
    c.processRenderEvent(renderEvent);
  }

  public void dispatch() throws RenderException {
    Iterator iter = components.iterator();
    while (iter.hasNext()) {
      try {
        dispatchToComponent((Component)iter.next());
      } catch (RenderException ex) {
        throw ex;
      } catch (Exception ex) {
        throw new RenderException(RenderException.REASON_UNSPECIFIED, ex);
      }
    }
  }
}
```

File: com.taursys.xml.event.RenderEvent
```java
package com.taursys.xml.event;

import java.util.*;

public class RenderEvent extends EventObject {

  public RenderEvent(Object source) {
    super(source);
  }
}
```

File: com.taursys.xml.event.RecycleDispatcher
```java
package com.taursys.xml.event;

import java.util.Iterator;
import com.taursys.xml.Container;
import com.taursys.xml.Component;

public class RecycleDispatcher extends Dispatcher {
  private RecycleEvent recycleEvent;

  public RecycleDispatcher(Container c) {
    recycleEvent = new RecycleEvent(c);
  }

  public void dispatchToComponent(Component c) throws Exception {
    c.processRecycleEvent(recycleEvent);
  }

  public void dispatch() throws RecycleException {
    Iterator iter = components.iterator();
    while (iter.hasNext()) {
      try {
        dispatchToComponent((Component)iter.next());
      } catch (RecycleException ex) {
        throw ex;
      } catch (Exception ex) {
        throw new RecycleException(RecycleException.REASON_UNSPECIFIED, ex);
      }
    }
  }
}
```

File: com.taursys.xml.event.InitFormEvent
```java
package com.taursys.xml.event;

import java.util.*;

public class InitFormEvent extends EventObject {

  public InitFormEvent(Object source) {
    super(source);
  }
}
```

File: com.taursys.xml.event.CloseFormListener
```java
package com.taursys.xml.event;

import java.util.*;

public interface CloseFormListener extends EventListener {

  public void closeForm(CloseFormEvent e) throws Exception;
}
```

File: com.taursys.xml.event.OpenFormListener
```java
package com.taursys.xml.event;

import java.util.*;

public interface OpenFormListener extends EventListener {

  public void openForm(OpenFormEvent e) throws Exception;
}
```

File: com.taursys.xml.event.InitContextDispatcher
```java
package com.taursys.xml.event;

import com.taursys.xml.event.*;
import com.taursys.xml.*;

public class InitContextDispatcher extends Dispatcher {
  private Component source;

  public InitContextDispatcher(Component source) {
    this.source = source;
  }

  public void dispatchToComponent(Component c) throws Exception {
    c.dispatchEvent(new InitContextEvent(source, map));
  }

}
```

File: com.taursys.xml.event.InitFormListener
```java
package com.taursys.xml.event;

import java.util.*;

public interface InitFormListener extends EventListener {

  public void initForm(InitFormEvent e) throws Exception;
}
```

File: com.taursys.xml.event.InputEvent
```java
package com.taursys.xml.event;

import java.util.Map;

public class InputEvent extends ParameterEvent {

  public InputEvent(Object source) {
    super(source);
  }

  public InputEvent(Object source, String name, String value) {
    super(source, name, value);
  }

  public InputEvent(Object source, Map map) {
    super(source, map);
  }

}
```

File: com.taursys.xml.event.ParameterEvent
```java
package com.taursys.xml.event;

import java.util.EventObject;
import java.util.Map;

public class ParameterEvent extends EventObject {
  private String name;
  private String value;
  private Map map;

  public ParameterEvent(Object source) {
    super(source);
  }

  public ParameterEvent(Object source, String name, String value) {
    super(source);
    this.name = name;
    this.value = value;
  }

  public ParameterEvent(Object source, Map map) {
    super(source);
    this.map = map;
  }

  public String getName() {
    return name;
  }

  public String getValue() {
    return value;
  }

  public Map getMap() {
    return map;
  }
}
```

File: com.taursys.xml.event.InitContextEvent
```java
package com.taursys.xml.event;

import java.util.EventObject;
import java.util.Map;

public class InitContextEvent extends EventObject {
  private Map context;

  public InitContextEvent(Object source, Map context) {
    super(source);
    this.context = context;
  }

  public Map getContext() {
    return context;
  }
}
```

File: com.taursys.xml.event.OpenFormEvent
```java
package com.taursys.xml.event;

import java.util.*;

public class OpenFormEvent extends EventObject {

  public OpenFormEvent(Object source) {
    super(source);
  }
}
```

File: com.taursys.xml.event.InputDispatcher
```java
package com.taursys.xml.event;

import com.taursys.xml.Parameter;
import com.taursys.xml.Component;
import com.taursys.xml.Container;
import com.taursys.debug.Debug;

public class InputDispatcher extends Dispatcher {

  public InputDispatcher() {
  }

  public void dispatchToComponent(Component c) throws Exception {
    if (map != null) {
      if (c instanceof Parameter) {
        dispatchToParameter((Parameter)c);
      } else if (c instanceof Container) {
        c.dispatchEvent(new InputEvent(c, map));
      }
    } else {
      Debug.error(
          "InputDispatcher.dispatchToComponent: map is null");
    }
  }

  private void dispatchToParameter(Parameter field) throws Exception {
    String pname = field.getParameter();
    if (pname != null && pname.length()>0) {
      String value = getParameter(pname, field.getDefaultValue());
      if (value != null) {
        field.dispatchEvent(
            new InputEvent(field, field.getParameter(), value));
      }
    }
  }
}
```

File: com.taursys.xml.event.ParameterListener
```java
package com.taursys.xml.event;

import java.util.EventListener;

public interface ParameterListener extends EventListener {

  public void parameterReceived(ParameterEvent e) throws Exception;
}
```

File: com.taursys.xml.event.RenderListener
```java
package com.taursys.xml.event;

import java.util.*;

public interface RenderListener extends EventListener {

  public void render(RenderEvent e) throws RenderException;
}
```

File: com.taursys.xml.event.Dispatcher
```java
package com.taursys.xml.event;

import java.util.ArrayList;
import java.util.Map;
import java.util.Collections;
import java.util.Iterator;
import java.util.EventObject;
import com.taursys.xml.Component;

public abstract class Dispatcher {
  protected ArrayList components = new ArrayList();
  protected Map map;
  private int index;

  public abstract void dispatchToComponent(Component c) throws Exception;

  public void dispatch(Map map) throws Exception {
    this.map = map;
    Iterator iter = components.iterator();
    while (iter.hasNext()) {
      dispatchToComponent((Component)iter.next());
    }
  }

  public void dispatch() throws Exception {
    dispatch(Collections.EMPTY_MAP);
  }

  public void dispatch(EventObject e) throws Exception {
    this.map = Collections.EMPTY_MAP;
    Iterator iter = components.iterator();
    while (iter.hasNext()) {
      ((Component)iter.next()).dispatchEvent(e);
    }
  }

  protected String getParameter(String key, String defaultValue) {
    String[] values = (String[])map.get(key);
    return (values == null || index >= values.length)
        ? defaultValue : values[index];
  }

  public void addNotify(Component c) {
    if (!components.contains(c))
      components.add(c);
  }

  public void removeNotify(Component c) {
    if (components.contains(c))
      components.remove(c);
  }

  protected void resetIndex() {
    index = 0;
  }

  protected void incrementIndex() {
    index++;
  }
}
```

File: com.taursys.xml.event.TriggerDispatcher
```java
package com.taursys.xml.event;

import com.taursys.xml.Parameter;
import com.taursys.xml.Trigger;
import com.taursys.xml.Component;
import com.taursys.xml.Container;
import com.taursys.debug.Debug;

public class TriggerDispatcher extends Dispatcher {

  public TriggerDispatcher() {
  }

  public void dispatchToComponent(Component c) throws Exception {
    if (map != null) {
      if (c instanceof Trigger) {
        dispatchToTrigger((Trigger)c);
      } else if (c instanceof Container) {
        c.dispatchEvent(new TriggerEvent(c, map));
      }
    } else {
      Debug.error(
          "TriggerDispatcher.dispatchToComponent: map is null");
    }
  }

  private void dispatchToTrigger(Trigger trigger) throws Exception {
    String pname = trigger.getParameter();
    if (pname != null && pname.length()>0) {
      String value = getParameter(pname, null);
      if (value == null && trigger.isDefaultTrigger()) {
        value = trigger.getText();
        TriggerEvent e = new TriggerEvent(trigger, pname, value);
        trigger.dispatchEvent(e);
      } else if (value != null && value.equals(trigger.getText())) {
        TriggerEvent e = new TriggerEvent(trigger, pname, value);
        trigger.dispatchEvent(e);
      }
    }
  }
}
```

File: com.taursys.xml.event.RenderException
```java
package com.taursys.xml.event;

import com.taursys.util.ChainedException;

public class RenderException extends ChainedException {
  public static final int REASON_OFFSET                       = 2000;
  public static final int REASON_MODEL_EXCEPTION              = 0 + REASON_OFFSET;
  public static final int REASON_PARENT_CONTAINER_NULL        = 1 + REASON_OFFSET;
  public static final int REASON_DOCUMENT_IS_NULL             = 2 + REASON_OFFSET;
  private static final String[] messages = new String[] {
    "ModelException occurred during rendering.",
    "Parent container is null",
    "Document and/or DocumentAdapter is null",
  };


  public static String getReasonMessage(int reason) {
    if (reason >=  + REASON_OFFSET && reason < messages.length + REASON_OFFSET)
      return messages[reason - REASON_OFFSET];
    else
      return getInvalidMessage();
  }


  public RenderException(int reason) {
    super(getReasonMessage(reason), reason);
  }

  public RenderException(int reason, Throwable cause) {
    super(getReasonMessage(reason), reason, cause);
  }
}
```

File: com.taursys.xml.event.ParameterDispatcher
```java
package com.taursys.xml.event;

import com.taursys.xml.Parameter;
import com.taursys.xml.Component;
import com.taursys.xml.Container;
import com.taursys.debug.Debug;

public class ParameterDispatcher extends Dispatcher {

  public ParameterDispatcher() {
  }

  public void dispatchToComponent(Component c) throws Exception {
    if (map != null) {
      if (c instanceof Parameter) {
        dispatchToParameter((Parameter)c);
      } else if (c instanceof Container) {
        c.dispatchEvent(new ParameterEvent(c, map));
      }
    } else {
      Debug.error(
          "ParameterDispatcher.dispatchToComponent: map is null");
    }
  }

  private void dispatchToParameter(Parameter field) throws Exception {
    String pname = field.getParameter();
    if (pname != null && pname.length()>0) {
      String value = getParameter(pname, field.getDefaultValue());
      if (value != null) {
        field.dispatchEvent(
            new ParameterEvent(field, field.getParameter(), value));
      }
    }
  }

}
```

File: com.taursys.xml.event.TriggerListener
```java
package com.taursys.xml.event;

import java.util.*;

public interface TriggerListener extends EventListener {

  public void actionPerformed(TriggerEvent e) throws Exception;
}
```

File: com.taursys.xml.event.test.ParameterDispatcherTest
```java
package com.taursys.xml.event.test;

import junit.framework.TestCase;
import com.taursys.xml.event.ParameterDispatcher;
import com.taursys.xml.Parameter;
import com.taursys.xml.event.ParameterEvent;
import java.util.HashMap;

public class ParameterDispatcherTest extends TestCase {
  protected TestParameter testParm;
  private ParameterDispatcher dispatcher;
  private HashMap map;

  public ParameterDispatcherTest(String _name) {
    super(_name);
  }

  protected void setUp() {
    testParm = new TestParameter();
    testParm.setParameter("parm1");
    dispatcher = new ParameterDispatcher();
    map = new HashMap();
  }

  protected void tearDown() {
  }

  private void addParameter(String key, String value) {
    map.put(key, new String[]{value});
  }

  public void testDispatchWithValue() throws Exception {
    addParameter("parm1", "red");
    dispatcher.addNotify(testParm);
    dispatcher.dispatch(map);
    assertEquals("red",testParm.getSavedEvent().getValue());
  }

  public void testDispatchWithBlankValue() throws Exception {
    addParameter("parm1", "");
    dispatcher.addNotify(testParm);
    dispatcher.dispatch(map);
    assertEquals("",testParm.getSavedEvent().getValue());
  }

  public void testDispatchWithNullValue() throws Exception {
    dispatcher.addNotify(testParm);
    dispatcher.dispatch(map);
    assertEquals(null,testParm.getSavedEvent());
  }

  public void testDispatchDefaultWithValue() throws Exception {
    addParameter("parm1", "red");
    testParm.setDefaultValue("green");
    dispatcher.addNotify(testParm);
    dispatcher.dispatch(map);
    assertEquals("red",testParm.getSavedEvent().getValue());
  }

  public void testDispatchDefaultWithNullValue() throws Exception {
    dispatcher.addNotify(testParm);
    testParm.setDefaultValue("green");
    dispatcher.dispatch(map);
    assertEquals("green",testParm.getSavedEvent().getValue());
  }


  public class TestParameter extends Parameter {
    private ParameterEvent savedEvent = null;
    protected void processParameterEvent(ParameterEvent e) throws Exception {
      savedEvent = e;
    }
    public ParameterEvent getSavedEvent() {
      return savedEvent;
    }
  }

  public static void main(String[] argv) {
    String[] testCaseList = {ParameterDispatcherTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.xml.event.test.InputDispatcherTest
```java
package com.taursys.xml.event.test;

import junit.framework.TestCase;
import com.taursys.xml.AbstractField;
import com.taursys.xml.event.InputDispatcher;
import com.taursys.xml.event.InputEvent;
import com.taursys.xml.event.RenderEvent;
import com.taursys.xml.event.RenderException;
import java.util.HashMap;

public class InputDispatcherTest extends TestCase {
  protected TestComponent testComponent;
  private InputDispatcher dispatcher;
  private HashMap map;

  public InputDispatcherTest(String _name) {
    super(_name);
  }

  protected void setUp() {
    testComponent = new TestComponent();
    testComponent.setParameter("parm1");
    dispatcher = new InputDispatcher();
    map = new HashMap();
  }

  protected void tearDown() {
  }

  private void addParameter(String key, String value) {
    map.put(key, new String[]{value});
  }

  public void testDispatchWithValue() throws Exception {
    addParameter("parm1", "red");
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(map);
    assertEquals("red",testComponent.getSavedEvent().getValue());
  }

  public void testDispatchWithBlankValue() throws Exception {
    addParameter("parm1", "");
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(map);
    assertEquals("",testComponent.getSavedEvent().getValue());
  }

  public void testDispatchWithNullValue() throws Exception {
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(map);
    assertEquals(null,testComponent.getSavedEvent());
  }

  public void testDispatchDefaultWithValue() throws Exception {
    addParameter("parm1", "red");
    testComponent.setDefaultValue("green");
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(map);
    assertEquals("red",testComponent.getSavedEvent().getValue());
  }

  public void testDispatchDefaultWithNullValue() throws Exception {
    dispatcher.addNotify(testComponent);
    testComponent.setDefaultValue("green");
    dispatcher.dispatch(map);
    assertEquals("green",testComponent.getSavedEvent().getValue());
  }


  public class TestComponent extends AbstractField {
    private InputEvent savedEvent = null;
    protected void processInputEvent(InputEvent e) throws Exception {
      savedEvent = e;
    }
    public InputEvent getSavedEvent() {
      return savedEvent;
    }
    public void processRenderEvent(RenderEvent e) throws RenderException {
    }
  }

  public static void main(String[] argv) {
    String[] testCaseList = {InputDispatcherTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.xml.event.test.TriggerDispatcherTest
```java
package com.taursys.xml.event.test;

import junit.framework.TestCase;
import com.taursys.xml.Trigger;
import com.taursys.xml.event.TriggerEvent;
import com.taursys.xml.event.TriggerDispatcher;
import java.util.HashMap;

public class TriggerDispatcherTest extends TestCase {
  protected TestComponent testComponent;
  protected TriggerDispatcher dispatcher;
  private HashMap map;

  public TriggerDispatcherTest(String _name) {
    super(_name);
  }

  private void addParameter(String key, String value) {
    map.put(key, new String[]{value});
  }

  protected void setUp() {
    testComponent = new TestComponent();
    testComponent.setParameter("parm1");
    testComponent.setText("red");
    dispatcher = new TriggerDispatcher();
    map = new HashMap();
  }

  protected void tearDown() {
  }

  public void testDispatchWithMatchValue() throws Exception {
    addParameter("parm1", "red");
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(map);
    assertEquals("red",testComponent.getSavedEvent().getValue());
  }

  public void testDispatchWithBlankValue() throws Exception {
    addParameter("parm1", "");
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(map);
    assertEquals(null,testComponent.getSavedEvent());
  }

  public void testDispatchWithNonMatchValue() throws Exception {
    addParameter("parm1", "blue");
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(map);
    assertEquals(null,testComponent.getSavedEvent());
  }

  public void testDispatchWithNullValue() throws Exception {
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(map);
    assertEquals(null,testComponent.getSavedEvent());
  }

  public void testDispatchDefaultWithMatchValue() throws Exception {
    addParameter("parm1", "red");
    testComponent.setDefaultTrigger(true);
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(map);
    assertEquals("red",testComponent.getSavedEvent().getValue());
  }

  public void testDispatchDefaultWithNonMatchValue() throws Exception {
    addParameter("parm1", "green");
    testComponent.setDefaultTrigger(true);
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(map);
    assertEquals(null,testComponent.getSavedEvent());
  }

  public void testDispatchDefaultWithNoValueNoText() throws Exception {
    testComponent.setDefaultTrigger(true);
    testComponent.setText(null);
    dispatcher.addNotify(testComponent);
    dispatcher.dispatch(map);
    assertNotNull("Saved event",testComponent.getSavedEvent());
  }

  public void testDispatchDefaultWithNullValue() throws Exception {
    dispatcher.addNotify(testComponent);
    testComponent.setDefaultTrigger(true);
    dispatcher.dispatch(map);
    assertEquals("red",testComponent.getSavedEvent().getValue());
  }


  public class TestComponent extends Trigger {
    private TriggerEvent savedEvent = null;
    protected void processTriggerEvent(TriggerEvent e) throws Exception {
      savedEvent = e;
    }
    public TriggerEvent getSavedEvent() {
      return savedEvent;
    }
  }

  public static void main(String[] argv) {
    String[] testCaseList = {TriggerDispatcherTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }

}
```

File: com.taursys.beans.editors.HAlignEditor
```java
package com.taursys.beans.editors;

import java.beans.*;
import javax.swing.SwingConstants;


public class HAlignEditor extends PropertyEditorSupport {
  static private String[] resourceStrings = {
      "LEADING",
      "LEFT",
      "CENTER",
      "RIGHT",
      "TRAILING",
      };
  static private int[] intValues = {
      SwingConstants.LEADING,
      SwingConstants.LEFT,
      SwingConstants.CENTER,
      SwingConstants.RIGHT,
      SwingConstants.TRAILING,
      };
  static private String[] sourceCodeStrings = {
      "SwingConstants.LEADING",
      "SwingConstants.LEFT",
      "SwingConstants.CENTER",
      "SwingConstants.RIGHT",
      "SwingConstants.TRAILING",
      };

  public HAlignEditor() {
  }
  public String[] getTags() {
    return resourceStrings;
  }
  public String getJavaInitializationString() {
    Object value = getValue();
    for (int i = 0; i < intValues.length; i++) {
      if (value.equals(new Integer(intValues[i]))) {
        return sourceCodeStrings[i];
      }
    }
    return null;
  }
  public String getAsText() {
    Object value = getValue();
    for (int i = 0; i < intValues.length; i++) {
      if (value.equals(new Integer(intValues[i]))) {
        return resourceStrings[i];
      }
    }
    return null;
  }
  public void setAsText(String text) throws IllegalArgumentException {
    for (int i = 0; i < resourceStrings.length; i++) {
      if (text.equals(resourceStrings[i])) {
        setValue(new Integer(intValues[i]));
        return;
      }
    }
    throw new IllegalArgumentException();
  }
}
```

File: com.taursys.beans.editors.FormatEditor
```java
package com.taursys.beans.editors;

import java.beans.*;
import java.text.*;

public class FormatEditor extends PropertyEditorSupport {
  private static String[] resourceStrings = { "none", "Decimal Format", "Simple Date Format", "Message Format", };
  private static String[] sourceCodeStrings = { null, "java.text.DecimalFormat.getInstance()", "java.text.SimpleDateFormat.getInstance()", "new java.text.MessageFormat(\"\")", };
  private static String[] classNameStrings = { null, "java.text.DecimalFormat", "java.text.SimpleDateFormat", "java.text.MessageFormat", };

  public FormatEditor() {
  }

  public String[] getTags() {
    return resourceStrings;
  }

  public String getJavaInitializationString() {
    String className = getValue().getClass().getName();
    for (int i = 0; i < classNameStrings.length; i++) {
      if (className.equals(classNameStrings[i])) {
        return sourceCodeStrings[i];
      }
    }
    return null;
  }

  public String getAsText() {
    Object o = getValue();
    if (o==null)
      return "none";
    String className = o.getClass().getName();
    for (int i = 0; i < classNameStrings.length; i++) {
      if (className.equals(classNameStrings[i])) {
        return resourceStrings[i];
      }
    }
    return "unknown";
  }

  public void setAsText(String text) throws IllegalArgumentException {
    for (int i = 0; i < resourceStrings.length; i++) {
      if (text.equals(resourceStrings[i])) {
        Format form;
        if (classNameStrings[i]==null)
          form = null;
        else if (classNameStrings[i].equals("java.text.MessageFormat"))
          form = new MessageFormat("");
        else
          try {
            form = (Format)Class.forName(classNameStrings[i]).newInstance();
          } catch (Exception ex) {
            throw new IllegalArgumentException("Cannot create class: " + classNameStrings[i]);
          }
        setValue(form);
        return;
      }
    }
    throw new IllegalArgumentException();
  }
}
```

File: com.taursys.model.NotInListException
```java
package com.taursys.model;

public class NotInListException extends SelectModelException {
  public static final int REASON_OFFSET                       =
      SelectModelException.REASON_OFFSET + 10;
  public static final int CURRENT_VALUE_NOT_IN_LIST           = 0 + REASON_OFFSET;
  public static final int GIVEN_VALUE_NOT_IN_LIST             = 1 + REASON_OFFSET;
  private static String[] messages = new String[] {
    "Current value not found in list.",
    "Given value not found in list."
  };
  private String value;


  public static String getReasonMessage(int reason) {
    if (reason >=  + REASON_OFFSET && reason < messages.length + REASON_OFFSET)
      return messages[reason - REASON_OFFSET];
    else
      return getInvalidMessage();
  }


  public NotInListException(int reason) {
    super(getReasonMessage(reason), reason);
  }

  public NotInListException(int reason, String value) {
    super(getReasonMessage(reason), reason);
    this.value = value;
    diagnosticInfo = "Given value=" + value;
  }


  public String getValue() {
    return value;
  }
}
```

File: com.taursys.model.ModelException
```java
package com.taursys.model;

import com.taursys.util.ChainedException;

public class ModelException extends ChainedException {
  public static final int REASON_OFFSET                       = 1000;
  public static final int REASON_MODEL_IS_WRONG_CLASS         = 0 + REASON_OFFSET;
  public static final int REASON_OBJECTS_ARE_IMMUTABLE        = 1 + REASON_OFFSET;
  public static final int REASON_INTERNAL_ERROR               = 2 + REASON_OFFSET;
  public static final int REASON_PARSE_CONVERSION_ERROR       = 3 + REASON_OFFSET;
  public static final int REASON_MULTI_PROPERTY_MISMATCH      = 4 + REASON_OFFSET;
  private static final String[] messages = new String[] {
    "Model is wrong class.",
    "Objects in a Variant Collection Value Holder are immutable",
    "Internal error - see chained exception for cause",
    "UnsupportedConversionException while converting parsed value",
    "propertyNames[] and/or values[] are null or different sizes",
    };


  public static String getReasonMessage(int reason) {
    if (reason >=  + REASON_OFFSET && reason < messages.length + REASON_OFFSET)
      return messages[reason - REASON_OFFSET];
    else
      return getInvalidMessage();
  }


  public ModelException(int reason) {
    super(getReasonMessage(reason), reason);
  }

  public ModelException(int reason, Throwable cause) {
    super(getReasonMessage(reason), reason, cause);
  }

  public ModelException(int reason, String diagnosticInfo) {
    super(getReasonMessage(reason), reason);
  }


  protected ModelException(String message, int reason) {
    super(message, reason);
  }

  protected ModelException(String message, int reason, Throwable cause) {
    super(message, reason, cause);
  }
}
```

File: com.taursys.model.ObjectValueHolder
```java
package com.taursys.model;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import com.taursys.model.event.ContentChangeEvent;
import java.util.Vector;
import com.taursys.util.DataTypes;

public class ObjectValueHolder extends AbstractValueHolder
    implements ChangeListener {
  protected Object obj;
  private ValueHolder parentValueHolder = null;
  private String parentPropertyName = null;

  public ObjectValueHolder() {
  }


  public Object getObject() {
    return obj;
  }

  public void setObject(Object obj) {
    setObject(obj,
        new ContentChangeEvent(this, obj == null));
  }

  public void setObject(Object obj, ChangeEvent e) {
    this.obj = obj;
    if (e != null)
      fireStateChanged(e);
  }


  public int getJavaDataType(String propertyName) throws ModelException {
    return DataTypes.TYPE_UNDEFINED;
  }

  public Object getPropertyValue(String propertyName) throws ModelException {
    return obj;
  }

  public void setPropertyValue(String propertyName, Object value)
      throws ModelException {
    obj = value;
    if (!isMultiplePropertiesChanging())
      fireContentValueChanged();
  }

  protected void setPropertyValues(String propertyName, Object value, Object vo)
      throws ModelException {
  }

  protected void setPropertyValues(String[] propertyNames, Object[] values, Object vo)
      throws ModelException {
  }


  public void setParentValueHolder(ValueHolder parentValueHolder) {
    if (parentValueHolder != null)
      parentValueHolder.removeChangeListener(this);
    this.parentValueHolder = parentValueHolder;
    if (parentValueHolder != null)
      parentValueHolder.addChangeListener(this);
  }

  public ValueHolder getParentValueHolder() {
    return parentValueHolder;
  }

  public void setParentPropertyName(String parentPropertyName) {
    this.parentPropertyName = parentPropertyName;
  }

  public String getParentPropertyName() {
    return parentPropertyName;
  }

  public void stateChanged(ChangeEvent e) {
    try {
      if (parentPropertyName != null && parentPropertyName.length() > 0) {
        Object o = parentValueHolder.getPropertyValue(parentPropertyName);
        setObject(o);
      }
    } catch (Exception ex) {
      com.taursys.debug.Debug.error(
          "Problem getting new value object from parent",ex);
      setObject(null);
    }
  }


  protected Object getPropertyValue(String propertyName, Object vo)
      throws ModelException {
    return vo;
  }

  protected Object[] getPropertyValues(String[] propertyNames, Object vo)
      throws ModelException {
    return new Object[] {vo};
  }


  public synchronized void addChangeListener(ChangeListener l) {
    super.addChangeListener(l);
  }

  public void fireContentValueChanged() {
    fireStateChanged(new ContentChangeEvent(this, obj == null));
  }
}
```

File: com.taursys.model.DefaultSelectModel
```java
package com.taursys.model;

import java.text.Format;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Collection;
import com.taursys.util.DataTypes;
import com.taursys.util.UnsupportedDataTypeException;
import com.taursys.debug.Debug;

public class DefaultSelectModel extends DefaultTextModel implements SelectModel {
  private com.taursys.model.CollectionValueHolder list;
  private String displayPropertyName = "value";
  private String[] listPropertyNames = new String[] {"value"};
  private String[] propertyNames = new String[] {"value"};
  private String nullDisplay = "--none--";
  private boolean nullAllowed = true;


  public DefaultSelectModel() {
    setList(createDefaultList());
  }

  public DefaultSelectModel(int javaDataType) throws UnsupportedDataTypeException {
    super(javaDataType);
    setList(createDefaultList());
  }


  protected CollectionValueHolder createDefaultList() {
    return new ObjectArrayValueHolder(new Object[]{});
  }


  public String getText() throws com.taursys.model.ModelException {
    if (positionListToCurrentSelection())
      return getCurrentDisplayValue();
    else
      return nullDisplay;
  }

  public void setText(String value) throws ModelException {
    if (value == null || value.equals(nullDisplay)) {
      if (nullAllowed) {
        setNullValues();
        return;
      } else {
        throw new NotInListException(
            NotInListException.GIVEN_VALUE_NOT_IN_LIST, value);
      }
    }
    list.reset();
    while (list.hasNext()) {
      list.next();
      if (value.equals(getCurrentDisplayValue())) {
        copyValues();
        return;
      }
    }
    throw new NotInListException(NotInListException.GIVEN_VALUE_NOT_IN_LIST, value);
  }

  public Object getSelectedItem() throws com.taursys.model.ModelException {
    if (positionListToCurrentSelection())
      return list.getObject();
    else
      return null;
  }

  public void setSelectedItem(Object value) throws ModelException {
    if (value == null) {
      setNullValues();
      return;
    }
    list.reset();
    while (list.hasNext()) {
      list.next();
      if (value.equals(list.getObject())) {
        copyValues();
        return;
      }
    }
    throw new NotInListException(NotInListException.GIVEN_VALUE_NOT_IN_LIST,
      value.toString());
  }

  public Collection getDisplayOptionList() throws ModelException {
    ArrayList arrayList = new ArrayList();
    boolean found = false;
    if (nullAllowed) {
      found = isValueNull();
      arrayList.add(new SelectModelOption(nullDisplay, found));
    }
    list.reset();
    while (list.hasNext()) {
      list.next();
      String displayValue = getCurrentDisplayValue();
      if (isCurrentMatch()) {
        arrayList.add(new SelectModelOption(displayValue, true));
        found = true;
      } else {
        arrayList.add(new SelectModelOption(displayValue, false));
      }
    }
    if (!found)
      Debug.warn("Current selection not in list. "
          + getCurrentPropertyValues());
    return arrayList;
  }


  private boolean positionListToCurrentSelection() throws ModelException {
    list.reset();
    if (isValueNull())
      return false;
    while (list.hasNext()) {
      list.next();
      if (isCurrentMatch())
        return true;
    }
    throw new NotInListException(NotInListException.CURRENT_VALUE_NOT_IN_LIST);
  }

  private String getCurrentDisplayValue() throws ModelException {
    Object value = getList().getPropertyValue(displayPropertyName);
    int javaDataType = getList().getJavaDataType(displayPropertyName);
    if (value == null)
      return "";
    Format form = getFormat();
    if (form == null)
      return DataTypes.format(javaDataType, value);
    else if (form instanceof MessageFormat)
      return ((MessageFormat)form).format(new Object[] {value});
    else
      return form.format(value);
  }

  protected String getCurrentPropertyValues() throws ModelException {
    String values = "";
    for (int i = 0; i < propertyNames.length; i++)
      values += propertyNames[i] + "=" +
          getValueHolder().getPropertyValue(propertyNames[i]);
    return values;
  }

  protected boolean isCurrentMatch() throws ModelException {
    validateProperties();
    for (int i = 0; i < propertyNames.length; i++) {
      Object value = getValueHolder().getPropertyValue(propertyNames[i]);
      Object listValue = getList().getPropertyValue(listPropertyNames[i]);
      if ( value == null || !value.equals(listValue)) {
        return false;
      }
    }
    return true;
  }

  protected boolean isValueNull() throws ModelException {
    validateProperties();
    for (int i = 0; i < propertyNames.length; i++) {
      Object value = getValueHolder().getPropertyValue(propertyNames[i]);
      if ( value != null) {
        return false;
      }
    }
    return true;
  }

  private void validateProperties() throws ModelException {
    if (propertyNames == null || listPropertyNames == null
        || propertyNames.length != listPropertyNames.length) {
      throw new SelectModelException(
          SelectModelException.REASON_HOLDER_LIST_MISMATCH,
          displayPropertyName, listPropertyNames, propertyNames, true,
          nullDisplay);
    }
  }

  protected void copyValues() throws ModelException {
    validateProperties();
    for (int i = 0; i < propertyNames.length; i++) {
      Object listValue = getList().getPropertyValue(listPropertyNames[i]);
      getValueHolder().setPropertyValue(propertyNames[i], listValue);
    }
  }

  protected void setNullValues() throws ModelException {
    validateProperties();
    for (int i = 0; i < propertyNames.length; i++) {
      getValueHolder().setPropertyValue(propertyNames[i], null);
    }
  }

  protected ValueHolder createDefaultValueHolder() {
    return new ObjectValueHolder();
  }


  public void setList(com.taursys.model.CollectionValueHolder newList) {
    list = newList;
  }

  public com.taursys.model.CollectionValueHolder getList() {
    return list;
  }

  public void setDisplayPropertyName(String newDisplayPropertyName) {
    displayPropertyName = newDisplayPropertyName;
  }

  public String getDisplayPropertyName() {
    return displayPropertyName;
  }

  public void setListPropertyNames(String[] newListPropertyNames) {
    listPropertyNames = newListPropertyNames;
  }

  public String[] getListPropertyNames() {
    return listPropertyNames;
  }

  public void setPropertyNames(String[] newPropertyNames) {
    propertyNames = newPropertyNames;
  }

  public String[] getPropertyNames() {
    return propertyNames;
  }

  public void setPropertyName(String newPropertyName) {
    propertyNames[0] = newPropertyName;
  }

  public String getPropertyName() {
    return propertyNames[0];
  }

  public void setNullAllowed(boolean nullAllowed) {
    this.nullAllowed = nullAllowed;
  }

  public boolean isNullAllowed() {
    return nullAllowed;
  }

  public void setNullDisplay(String newNullDisplay) {
    nullDisplay = newNullDisplay;
  }

  public String getNullDisplay() {
    return nullDisplay;
  }
}
```

File: com.taursys.model.ListValueHolder
```java
package com.taursys.model;

import javax.swing.event.ListSelectionListener;
import java.util.List;

public interface ListValueHolder extends CollectionValueHolder, List {

  public Object getPropertyValue(String propertyName, int row) throws ModelException;

  public Object[] getPropertyValues(String[] propertyNames, int index) throws ModelException;

  public int indexOf(String[] propertyNames, Object[] values)
      throws ModelException;

  public boolean hasPrior();

  public boolean hasAny();

  public void moveTo(int row);

  public int getPosition();

  public int getRowCount();

  public void first();

  public void prior();

  public void last();

  public void removeListSelectionListener(ListSelectionListener l);

  public void addListSelectionListener(ListSelectionListener l);
 }
```

File: com.taursys.model.AbstractCollectionValueHolder
```java
package com.taursys.model;

import java.util.Iterator;
import java.util.Collection;
import javax.swing.event.ChangeListener;
import java.util.ArrayList;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.util.Collections;
import com.taursys.debug.Debug;

public class AbstractCollectionValueHolder implements CollectionValueHolder,
    ChangeListener {
  private Collection collection;
  private Iterator iterator;
  private ValueHolder parentValueHolder = null;
  private String parentPropertyName = null;
  private com.taursys.model.ObjectValueHolder objectValueHolder;

  public AbstractCollectionValueHolder(ObjectValueHolder holder) {
    this(holder, new ArrayList());
  }

  public AbstractCollectionValueHolder(ObjectValueHolder holder,
      Collection collection) {
    objectValueHolder = holder;
    setCollection(collection);
  }


  protected ObjectValueHolder getObjectValueHolder() {
    return objectValueHolder;
  }

  public Object getPropertyValue(String propertyName) throws ModelException {
    return objectValueHolder.getPropertyValue(propertyName);
  }

  public Object[] getPropertyValues(String[] propertyNames)
      throws ModelException {
    return objectValueHolder.getPropertyValues(propertyNames);
  }

  public void setPropertyValue(String propertyName, Object value)
      throws ModelException {
    objectValueHolder.setPropertyValue(propertyName, value);
  }


  public void setPropertyValues(String[] propertyNames, Object[] values)
      throws ModelException {
    objectValueHolder.setPropertyValues(propertyNames, values);
  }

  public int getJavaDataType(String propertyName) throws ModelException {
    return objectValueHolder.getJavaDataType(propertyName);
  }

  public String getAlias() {
    return objectValueHolder.getAlias();
  }

  public void setAlias(String newAlias) {
    objectValueHolder.setAlias(newAlias);
  }

  public void removeChangeListener(ChangeListener l) {
    objectValueHolder.removeChangeListener(l);
  }

  public void addChangeListener(ChangeListener l) {
    objectValueHolder.addChangeListener(l);
  }

  public Object getObject() {
    return objectValueHolder.getObject();
  }

  public void setObject(Object obj) {
    Object old = getObject();
    objectValueHolder.setObject(obj);
    collection.remove(old);
    collection.add(obj);
  }


  public void setParentValueHolder(ValueHolder parentValueHolder) {
    if (parentValueHolder != null)
      parentValueHolder.removeChangeListener(this);
    this.parentValueHolder = parentValueHolder;
    if (parentValueHolder != null)
      parentValueHolder.addChangeListener(this);
  }

  public ValueHolder getParentValueHolder() {
    return parentValueHolder;
  }

  public void setParentPropertyName(String parentPropertyName) {
    this.parentPropertyName = parentPropertyName;
  }

  public String getParentPropertyName() {
    return parentPropertyName;
  }

  public void stateChanged(ChangeEvent e) {
    try {
      if (parentPropertyName != null && parentPropertyName.length() > 0) {
        Collection c = (Collection)parentValueHolder.getPropertyValue(
            parentPropertyName);
        setCollection(c);
      }
    } catch (Exception ex) {
      com.taursys.debug.Debug.error(
          "Problem getting new collection from parent",ex);
      setCollection(null);
    }
  }


  public boolean hasNext() {
    if (getInternalIterator() != null)
      return iterator.hasNext();
    else
      return false;
  }

  public void next() {
    if (getInternalIterator() != null)
      objectValueHolder.setObject(iterator.next());
    else
      objectValueHolder.setObject(null);
  }

  public void reset() {
    iterator = null;
    objectValueHolder.setObject(null);
  }

  private Iterator getInternalIterator() {
    if (iterator == null)
      if (getCollection() != null)
        iterator = getCollection().iterator();
    return iterator;
  }


  public Collection getCollection() {
    return collection;
  }

  public void setCollection(Collection collection) {
    this.collection = collection == null ? Collections.EMPTY_LIST : collection;
    reset();
  }

  public int size() {
    return collection.size();
  };

  public boolean isEmpty() {
    return collection.isEmpty();
  }

  public boolean contains(Object o) {
    return collection.contains(o);
  }

  public Iterator iterator() {
    return collection.iterator();
  }

  public Object[] toArray() {
    return collection.toArray();
  }

  public Object[] toArray(Object[] a) {
    return collection.toArray(a);
  }

  public boolean add(Object o) {
    return collection.add(o);
  }

  public boolean remove(Object o) {
    return collection.remove(o);
  }

  public boolean containsAll(Collection c) {
    return collection.containsAll(c);
  }

  public boolean addAll(Collection c) {
    return collection.addAll(c);
  }

  public boolean removeAll(Collection c) {
    return collection.removeAll(c);
  }

  public boolean retainAll(Collection c) {
    return collection.retainAll(c);
  }

  public void clear() {
    collection.clear();
  }
}
```

File: com.taursys.model.ObjectListValueHolder
```java
package com.taursys.model;

import java.util.*;

public class ObjectListValueHolder extends AbstractListValueHolder {

  public ObjectListValueHolder() {
    super(new ObjectValueHolder());
  }

  public ObjectListValueHolder(int size) {
    super(new ObjectValueHolder(), new ArrayList(size));
  }

  public ObjectListValueHolder(List list) {
    super(new ObjectValueHolder(), list);
  }

  public ObjectListValueHolder(Object[] array) {
    super(new ObjectValueHolder(), new ArrayList(Arrays.asList(array)));
  }
}
```

File: com.taursys.model.TextModel
```java
package com.taursys.model;

import java.text.Format;
import com.taursys.model.ValueHolder;
import javax.swing.event.ChangeListener;

public interface TextModel {

  public String getText() throws ModelException;

  public void setText(String text) throws ModelException;

  public Format getFormat();

  public void setFormat(Format format);

  public String getFormatPattern();

  public void setFormatPattern(String newPattern);

  public void setValueHolder(ValueHolder newValueHolder);

  public com.taursys.model.ValueHolder getValueHolder();

  public void setPropertyName(String newPropertyName);

  public String getPropertyName();

  public void removeChangeListener(ChangeListener l);

  public void addChangeListener(ChangeListener l);
}
```

File: com.taursys.model.DefaultCheckboxModel
```java
package com.taursys.model;

import com.taursys.util.UnsupportedDataTypeException;

public class DefaultCheckboxModel extends DefaultTextModel implements CheckboxModel {
  private String selectedValue = "true";
  private String unselectedValue = "";


  public DefaultCheckboxModel() {
  }

  public DefaultCheckboxModel(int javaDataType) throws UnsupportedDataTypeException {
    super(javaDataType);
  }


  public String getText() throws UnknownStateValueException, ModelException {
    String v = super.getText();
    if (v == "" || v.equals(unselectedValue)) {
      return unselectedValue;
    } else if (v.equals(selectedValue)) {
      return selectedValue;
    } else {
      throw new UnknownStateValueException(
          UnknownStateValueException.REASON_UNKNOWN_VALUE, v);
    }
  }

  public void setText(String value) throws UnknownStateValueException,
      ModelException {
    if (value == null || value.equals("") || value.equals(selectedValue)
        || value.equals(unselectedValue)) {
      super.setText(value);
    } else {
      throw new UnknownStateValueException(
          UnknownStateValueException.REASON_UNKNOWN_VALUE, value);
    }
  }

  public void setSelected(boolean newSelected) throws ModelException {
    if (newSelected) {
      setText(selectedValue);
    } else {
      setText(unselectedValue);
    }
  }

  public boolean isSelected() throws UnknownStateValueException, ModelException {
    String v = super.getText();
    if (v == "" || v.equals(unselectedValue)) {
      return false;
    } else if (v.equals(selectedValue)) {
      return true;
    } else {
      throw new UnknownStateValueException(
          UnknownStateValueException.REASON_UNKNOWN_VALUE, v);
    }
  }


  public void setSelectedValue(String newSelectedValue) {
    selectedValue = newSelectedValue;
  }

  public String getSelectedValue() {
    return selectedValue;
  }

  public void setUnselectedValue(String newUnselectedValue) {
    unselectedValue = newUnselectedValue;
  }

  public String getUnselectedValue() {
    return unselectedValue;
  }
}
```

File: com.taursys.model.VOListValueHolder
```java
package com.taursys.model;

import java.util.*;

public class VOListValueHolder extends AbstractListValueHolder
    implements ListValueHolder {

  public VOListValueHolder() {
    super(new VOValueHolder());
  }

  public VOListValueHolder(int size) {
    super(new VOValueHolder(), new ArrayList(size));
  }

  public VOListValueHolder(List list) {
    super(new VOValueHolder(), list);
  }


  public void setValueObjectClass(Class clazz) {
    ((VOValueHolder)getObjectValueHolder()).setValueObjectClass(clazz);
  }

  public Class getValueObjectClass() {
    return ((VOValueHolder)getObjectValueHolder()).getValueObjectClass();
  }

  public Object getValueObject() {
    return getObject();
  }

  public void setValueObject(Object obj) {
    setObject(obj);
  }

  public void setComparator(Comparator comparator) {
    if (getComparator() != null && getComparator() instanceof VOComparator)
      ((VOComparator)getComparator()).setVOValueHolder(null);
    super.setComparator(comparator);
    if (comparator != null && comparator instanceof VOComparator)
      ((VOComparator)comparator).setVOValueHolder(
          (VOValueHolder)getObjectValueHolder());
  }
}
```

File: com.taursys.model.DefaultTextModel
```java
package com.taursys.model;

import java.text.Format;
import java.text.MessageFormat;
import java.text.ChoiceFormat;
import com.taursys.util.DataTypes;
import com.taursys.util.UnsupportedConversionException;
import com.taursys.util.UnsupportedDataTypeException;
import java.text.ParseException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.lang.reflect.InvocationTargetException;
import java.lang.IllegalAccessException;
import java.beans.IntrospectionException;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.util.Vector;

public class DefaultTextModel implements TextModel ,ChangeListener {
  private com.taursys.model.ValueHolder valueHolder;
  private String propertyName;
  private java.text.Format format;
  private String formatPattern;
  private transient Vector changeListeners;

  public DefaultTextModel() {
    valueHolder = createDefaultValueHolder();
  }

  public DefaultTextModel(int javaDataType) throws UnsupportedDataTypeException {
    valueHolder = new VariantValueHolder(javaDataType);
  }

  protected ValueHolder createDefaultValueHolder() {
    return new VariantValueHolder(DataTypes.TYPE_STRING);
  }


  public String getText()
      throws ModelException {
    Object value = getValueHolder().getPropertyValue(propertyName);
    int javaDataType = getValueHolder().getJavaDataType(propertyName);
    if (value == null)
      return "";
    if (format == null)
      return DataTypes.format(javaDataType, value);
    else if (format instanceof MessageFormat)
      return ((MessageFormat)format).format(new Object[] {value});
    else
      return format.format(value);
  }

  public void setText(String value) throws ModelException {
    int javaDataType = -1;
    try {
      Object newValue = null;
      javaDataType = getValueHolder().getJavaDataType(propertyName);
      if (value == null || value.length() == 0) {
        newValue = null;
      } else if (format == null) {
        newValue = DataTypes.parse(javaDataType, value);
      } else if (format instanceof MessageFormat) {
        Object[] values = ((MessageFormat)format).parse(value);
        newValue = DataTypes.convert(javaDataType, values[0]);
      } else {
        newValue = DataTypes.convert(javaDataType, format.parseObject(value));
      }
      getValueHolder().setPropertyValue(propertyName, newValue);
    } catch (ParseException ex) {
      throw new ModelParseException(propertyName, javaDataType, format,
          formatPattern, value, ex);
    } catch (NumberFormatException ex) {
      throw new ModelParseException(propertyName, javaDataType, format,
          formatPattern, value, ex);
    } catch (UnsupportedConversionException ex) {
      throw new ModelException(ModelException.REASON_PARSE_CONVERSION_ERROR,
        "Property name: " + propertyName + "\n"
        + "Converting from output of Format type: "
        + format.getClass().getName() + "\n"
        + "to data type of value holder: "
        + DataTypes.getJavaNameForType(javaDataType));
    }
  }

  protected void setupFormat() {
    if (format != null && formatPattern != null) {
      if (format instanceof MessageFormat)
        ((MessageFormat)format).applyPattern(formatPattern);
      if (format instanceof SimpleDateFormat)
        ((SimpleDateFormat)format).applyPattern(formatPattern);
      if (format instanceof DecimalFormat)
        ((DecimalFormat)format).applyPattern(formatPattern);
      if (format instanceof ChoiceFormat)
        ((ChoiceFormat)format).applyPattern(formatPattern);
    }
  }


  public void setValueHolder(com.taursys.model.ValueHolder newValueHolder) {
    if (valueHolder != null)
      valueHolder.removeChangeListener(this);
    valueHolder = newValueHolder;
    valueHolder.addChangeListener(this);
  }

  public com.taursys.model.ValueHolder getValueHolder() {
    return valueHolder;
  }

  public void setPropertyName(String newPropertyName) {
    propertyName = newPropertyName;
  }

  public String getPropertyName() {
    return propertyName;
  }

  public void setFormat(java.text.Format newFormat) {
    format = newFormat;
    setupFormat();
  }

  public java.text.Format getFormat() {
    return format;
  }

  public void setFormatPattern(String newPattern) {
    formatPattern = newPattern;
    setupFormat();
  }

  public String getFormatPattern() {
    return formatPattern;
  }



  public void stateChanged(ChangeEvent e) {
    fireStateChanged(e);
  }

  public synchronized void removeChangeListener(ChangeListener l) {
    if (changeListeners != null && changeListeners.contains(l)) {
      Vector v = (Vector) changeListeners.clone();
      v.removeElement(l);
      changeListeners = v;
    }
  }

  public synchronized void addChangeListener(ChangeListener l) {
    Vector v = changeListeners == null ? new Vector(2) : (Vector) changeListeners.clone();
    if (!v.contains(l)) {
      v.addElement(l);
      changeListeners = v;
    }
  }

  protected void fireStateChanged(ChangeEvent e) {
    if (changeListeners != null) {
      Vector listeners = changeListeners;
      int count = listeners.size();
      for (int i = 0; i < count; i++) {
        ((ChangeListener) listeners.elementAt(i)).stateChanged(e);
      }
    }
  }
}
```

File: com.taursys.model.VOComparator
```java
package com.taursys.model;

import java.util.*;
import com.taursys.debug.Debug;

public class VOComparator implements Comparator {
  private VOValueHolder holder;
  private String[] propertyNames;
  private boolean[] ascendingOrders;
  private boolean ordering;

  public VOComparator() {
  }

  public int compare(Object o1, Object o2) {
    if (holder == null) {
      Debug.error("VOComparator.compare: Cannot compare - VOValueHolder is null.");
      return 0;
    }
    if (propertyNames == null || propertyNames.length == 0) {
      Debug.error("VOComparator.compare: Cannot compare - sort property name(s) is missing.");
      return 0;
    }
    int result = nullTest(o1, o2);
    if (result == Integer.MAX_VALUE) {
      for (int i = 0; i < propertyNames.length; i++) {
        if (propertyNames[i] == null) {
          Debug.error("VOComparator.compare: Cannot compare - sort property name #"
              + i + " is null.");
          return 0;
        } else {
          try {
            Comparable value1 = (Comparable)holder.getPropertyValue(
                propertyNames[i], o1);
            Comparable value2 = (Comparable)holder.getPropertyValue(
                propertyNames[i], o2);
            result = nullTest(value1, value2);
            if (result == Integer.MAX_VALUE) {
              result = value1.compareTo(value2);
              if (result != 0)
                return isAscendingOrder(i) ? result : -result;
            } else {
              return result;
            }
          } catch (ModelException ex) {
            Debug.error("VOComparator.compare: cannot compare - "
                + ex.getMessage(), ex);
            return 0;
          }
        }
      }
    }
    return result;
  }

  private int nullTest(Object o1, Object o2) {
    if ((o1 != null && o2 != null))
      return Integer.MAX_VALUE;
    if ((o1 == null && o2 == null))
      return 0;
    if (o1 == null)
      return -1;
    else
      return 1;
  }

  public void setVOValueHolder(VOValueHolder holder) {
    this.holder = holder;
  }

  public VOValueHolder getVOValueHolder() {
    return holder;
  }

  public void setPropertyName(String propertyName) {
    if (propertyNames == null || propertyNames.length == 0)
      propertyNames = new String[] {propertyName};
    else
      propertyNames[0] = propertyName;
  }

  public String getPropertyName() {
    if (propertyNames == null || propertyNames.length == 0)
      return null;
    else
      return propertyNames[0];
  }

  public void setAscendingOrder(boolean ascendingOrder) {
    if (ascendingOrders == null || ascendingOrders.length == 0)
      ascendingOrders = new boolean[] {ascendingOrder};
    else
      ascendingOrders[0] = ascendingOrder;
  }

  public boolean isAscendingOrder() {
    return isAscendingOrder(0);
  }

  private boolean isAscendingOrder(int index) {
    if (ascendingOrders == null || ascendingOrders.length <= index)
      return true;
    else
      return ascendingOrders[0];
  }

  public void setPropertyNames(String[] propertyNames) {
    this.propertyNames = propertyNames;
  }

  public String[] getPropertyNames() {
    return propertyNames;
  }

  public void setAscendingOrders(boolean[] ascendingOrders) {
    this.ascendingOrders = ascendingOrders;
  }

  public boolean[] getAscendingOrders() {
    return ascendingOrders;
  }
}
```

File: com.taursys.model.VariantValueHolder
```java
package com.taursys.model;

import com.taursys.util.DataTypes;
import com.taursys.util.UnsupportedDataTypeException;
import com.taursys.model.ModelException;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.util.Vector;

public class VariantValueHolder extends ObjectValueHolder {
  private int javaDataType = DataTypes.TYPE_UNDEFINED;

  public VariantValueHolder(int javaDataType) throws UnsupportedDataTypeException {
    DataTypes.checkJavaDataType(javaDataType);
    this.javaDataType = javaDataType;
  }

  public void setPropertyValue(String propertyName, Object newValue)
      throws ModelException {
    if (newValue != null) {
        Class expectedClass = DataTypes.getClassForType(javaDataType);
        if (!expectedClass.isInstance(newValue))
          throw new ClassCastException("Given "
              + newValue.getClass().getName() + " expected "
              + DataTypes.getJavaNameForType(javaDataType));
    }
    super.setPropertyValue(propertyName, newValue);
  }

  public int getJavaDataType(String propertyName) throws ModelException {
    return javaDataType;
  }

}
```

File: com.taursys.model.SelectModelOption
```java
package com.taursys.model;

public class SelectModelOption {
  private String optionText;
  private boolean selected;

  public SelectModelOption(String newOptionText, boolean newSelected) {
    optionText = newOptionText;
    selected = newSelected;
  }

  public String getOptionText() {
    return optionText;
  }

  public boolean isSelected() {
    return selected;
  }
}
```

File: com.taursys.model.ValueHolder
```java
package com.taursys.model;

import javax.swing.event.ChangeListener;

public interface ValueHolder {

  public Object getPropertyValue(String propertyName) throws ModelException;

  public Object[] getPropertyValues(String[] propertyNames)
      throws ModelException;

  public void setPropertyValue(String propertyName, Object value)
      throws ModelException;

  public void setPropertyValues(String[] propertyNames, Object[] values)
      throws ModelException;

  public int getJavaDataType(String propertyName) throws ModelException;

  public String getAlias();

  public void removeChangeListener(ChangeListener l);

  public void addChangeListener(ChangeListener l);
}
```

File: com.taursys.model.PropertyAccessor
```java
package com.taursys.model;

import java.text.Format;
import java.text.MessageFormat;
import com.taursys.util.DataTypes;
import com.taursys.util.UnsupportedDataTypeException;
import com.taursys.util.UnsupportedConversionException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import com.taursys.debug.Debug;

import java.lang.reflect.Method;
import java.lang.reflect.InvocationTargetException;
import java.lang.IllegalAccessException;
import java.beans.BeanInfo;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.beans.IntrospectionException;
import java.util.StringTokenizer;

public class PropertyAccessor {
  private String propertyName;
  private int javaDataType = DataTypes.TYPE_UNDEFINED;
  private java.lang.reflect.Method writeMethod;
  private java.lang.reflect.Method[] readMethods;
  private Class valueObjectClass;
  private boolean primative;

  public PropertyAccessor(Class valueObjectClass, String propertyName)
      throws ModelException {
    this.valueObjectClass = valueObjectClass;
    this.propertyName = propertyName;
    try {
      setAccessorMethods();
    } catch (ModelException ex) {
      Debug.error("Error accessing property. " + ex.getMessage(), ex);
      throw ex;
    }
  }


  protected void setAccessorMethods() throws
      ModelException {
    if (valueObjectClass == null)
      throw new ModelPropertyAccessorException(
        ModelPropertyAccessorException.REASON_TARGET_CLASS_IS_NULL,
        valueObjectClass, propertyName);
    if (propertyName == null || propertyName.length() == 0)
      throw new ModelPropertyAccessorException(
        ModelPropertyAccessorException.REASON_PROPERTY_NAME_MISSING,
        valueObjectClass, propertyName);
    StringTokenizer tokenizer = new StringTokenizer(propertyName, ".");
    int count = tokenizer.countTokens() ;
    readMethods = new Method[count];
    PropertyDescriptor prop = null;
    Class targetClass = valueObjectClass;
    for (int i = 0; i < count ; i++) {
      String propName = tokenizer.nextToken();
      prop = getProperty(targetClass, propName);
      readMethods[i] = prop.getReadMethod();
      targetClass = prop.getPropertyType();
    }
    primative = targetClass.isPrimitive();
    javaDataType = DataTypes.getDataType(targetClass.getName());
    writeMethod = prop.getWriteMethod();
  }

  protected PropertyDescriptor getProperty(Class c, String propName)
      throws ModelPropertyAccessorException {
    BeanInfo info = null;
    try {
      info = Introspector.getBeanInfo(c);
    }
    catch (IntrospectionException ex) {
      throw new ModelPropertyAccessorException(
          ModelPropertyAccessorException.REASON_INTROSPECTION_EXCEPTION,
          c, propName);
    }
    PropertyDescriptor[] props = info.getPropertyDescriptors();
    for( int i=0 ; i < props.length ; i++ ) {
      if (props[i].getName().equals(propName)) {
        return props[i];
      }
    }
    throw new ModelPropertyAccessorException(
        ModelPropertyAccessorException.REASON_PROPERTY_NOT_FOUND,
        c, propName);
  }


  public Object getPropertyValue(Object valueObject)
      throws ModelException {
    Object target = valueObject;
    try {
      for (int i = 0; target != null && i < readMethods.length; i++) {
        target = invokeReadMethod(i, target);
      }
      return target;
    } catch (ModelException ex) {
      Debug.error("Error accessing property. " + ex.getMessage(), ex);
      throw ex;
    }
  }

  public void setPropertyValue(Object valueObject, Object value)
      throws ModelException {
    Object target = valueObject;
    try {
      int count = readMethods.length -1;
        for (int i = 0; target != null && i < count ; i++) {
          target = invokeReadMethod(i, target);
        }
      invokeWriteMethod(target, value);
    } catch (ModelException ex) {
      if (!(ex instanceof ModelPropertyAccessorException &&
          ((ModelPropertyAccessorException)ex).getReason() ==
          ModelPropertyAccessorException.REASON_NULL_VALUE_FOR_PRIMATIVE)) {
        Debug.error("Error accessing property. " + ex.getMessage(), ex);
      }
      throw ex;
    }
  }

  protected Object invokeReadMethod(int i, Object target) throws ModelException {
    if (target == null)
      return null;
    if (readMethods[i] == null)
      throw new ModelPropertyAccessorException(
          ModelPropertyAccessorException.REASON_NO_READ_METHOD_FOR_PROPERTY,
          target.getClass(), propertyName);
    try {
      return readMethods[i].invoke(target, new Object[] {});
    } catch (InvocationTargetException ex) {
      throw new ModelInvocationTargetException(
          valueObjectClass, propertyName, javaDataType, target,
          readMethods[i], ex);
    } catch (IllegalAccessException ex) {
      throw new ModelPropertyAccessorException(
          ModelPropertyAccessorException.REASON_ILLEGAL_ACCESS_EXCEPTION,
          valueObjectClass, propertyName, javaDataType, target,
          readMethods[i], ex);
    } catch (IllegalArgumentException ex) {
      throw new ModelPropertyAccessorException(
          ModelPropertyAccessorException.REASON_ILLEGAL_ARGUMENT_EXCEPTION,
          valueObjectClass, propertyName, javaDataType, target,
          readMethods[i], ex);
    }
  }

  protected void invokeWriteMethod(Object target, Object value)
      throws ModelException {
    if(target == null)
      throw new ModelPropertyAccessorException(
        ModelPropertyAccessorException.REASON_TARGET_IS_NULL,
           valueObjectClass, propertyName);
    if(writeMethod == null)
      throw new ModelPropertyAccessorException(
        ModelPropertyAccessorException.REASON_NO_WRITE_METHOD_FOR_PROPERTY,
           valueObjectClass, propertyName);
    if(value == null && isPrimative())
      throw new ModelPropertyAccessorException(
          ModelPropertyAccessorException.REASON_NULL_VALUE_FOR_PRIMATIVE,
          valueObjectClass, propertyName, javaDataType,
          target, writeMethod);
    try {
      writeMethod.invoke(target, new Object[] {value});
    } catch (InvocationTargetException ex) {
      throw new ModelInvocationTargetException(
          valueObjectClass, propertyName, javaDataType, target, value,
          writeMethod, ex);
    } catch (IllegalAccessException ex) {
      throw new ModelPropertyAccessorException(
          ModelPropertyAccessorException.REASON_ILLEGAL_ACCESS_EXCEPTION,
          valueObjectClass, propertyName, javaDataType, target, value,
          writeMethod, ex);
    } catch (IllegalArgumentException ex) {
      throw new ModelPropertyAccessorException(
          ModelPropertyAccessorException.REASON_ILLEGAL_ARGUMENT_EXCEPTION,
          valueObjectClass, propertyName, javaDataType, target, value,
          writeMethod, ex);
    }
  }


  public int getJavaDateType() {
    return javaDataType;
  }

  public String getPropertyName() {
    return propertyName;
  }

  protected java.lang.reflect.Method[] getReadMethods() {
    return readMethods;
  }

  protected java.lang.reflect.Method getWriteMethod() {
    return writeMethod;
  }

  public Class getValueObjectClass() {
    return valueObjectClass;
  }

  protected boolean isPrimative() {
    return primative;
  }
}
```

File: com.taursys.model.VOValueHolder
```java
package com.taursys.model;

import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import com.taursys.model.event.ContentValueChangeEvent;
import com.taursys.model.event.ContentChangeEvent;
import com.taursys.model.event.StructureChangeEvent;
import java.beans.*;
import javax.swing.event.*;

public class VOValueHolder extends ObjectValueHolder
    implements PropertyChangeListener {
  private HashMap properties = new HashMap();
  private Class valueObjectClass;
  private boolean changingPropertyValue = false;

  public VOValueHolder() {
  }


  public Object getPropertyValue(String propertyName) throws ModelException {
    return getPropertyAccessor(propertyName).getPropertyValue(obj);
  }

  public void setPropertyValue(String propertyName, Object value) throws ModelException {
    changingPropertyValue = true;
    try {
      getPropertyAccessor(propertyName).setPropertyValue(obj, value);
    } finally {
      changingPropertyValue = false;
    }
    if (!isMultiplePropertiesChanging())
      fireStateChanged(
          new ContentValueChangeEvent(this, propertyName, null, value));
  }


  public int getJavaDataType(String propertyName) throws ModelException {
    return getPropertyAccessor(propertyName).getJavaDateType();
  }


  public void setObject(Object obj) {
    super.setObject(obj);
  }

  public void setObject(Object obj, ChangeEvent e) {
    if (this.obj != null && this.obj instanceof BoundValueObject)
      ((BoundValueObject)this.obj).removePropertyChangeListener(this);
    this.obj = obj;
    if (obj != null && obj instanceof BoundValueObject)
      ((BoundValueObject)obj).addPropertyChangeListener(this);
    if (e != null)
      fireStateChanged(e);
  }

  public void setValueObject(Object obj) {
    setObject(obj);
  }

  public void setValueObject(Object obj, ChangeEvent e) {
    setObject(obj, e);
  }

  public Object getValueObject() {
    return obj;
  }

  public void setValueObjectClass(Class newValueObjectClass) {
    valueObjectClass = newValueObjectClass;
    fireStateChanged(new StructureChangeEvent(this));
  }

  public Class getValueObjectClass() {
    return valueObjectClass;
  }


  protected Object getPropertyValue(String propertyName, Object vo)
      throws ModelException {
    return getPropertyAccessor(propertyName).getPropertyValue(vo);
  }

  protected Object[] getPropertyValues(String[] propertyNames, Object vo)
      throws ModelException {
    if (propertyNames == null)
      throw new ModelException(ModelException.REASON_MULTI_PROPERTY_MISMATCH);
    Object[] results = new Object[propertyNames.length];
    for (int i = 0; i < propertyNames.length; i++) {
      results[i] =
          getPropertyAccessor(propertyNames[i])
              .getPropertyValue(vo);
    }
    return results;
  }

  protected void setPropertyValues(String propertyName, Object value, Object vo)
      throws ModelException {
    getPropertyAccessor(propertyName).setPropertyValue(vo, value);
    fireStateChanged(new ContentValueChangeEvent(this, propertyName, null, value));
  }

  protected void setPropertyValues(String[] propertyNames, Object[] values, Object vo)
      throws ModelException {
    checkArrays(propertyNames, values);
    changingPropertyValue = true;
    try {
      for (int i = 0; i < propertyNames.length; i++) {
        getPropertyAccessor(propertyNames[i]).setPropertyValue(vo, values[i]);
      }
    } finally {
      changingPropertyValue = false;
    }
    fireStateChanged(new ContentValueChangeEvent(this, null, null, null));
  }

  protected PropertyAccessor getPropertyAccessor(String propertyName)
      throws ModelException {
    PropertyAccessor pa = (PropertyAccessor)properties.get(propertyName);
    if (pa == null) {
      if (valueObjectClass == null) {
        if (obj == null)
          throw new ModelPropertyAccessorException(
            ModelPropertyAccessorException.REASON_TARGET_AND_CLASS_ARE_NULL,
            valueObjectClass, propertyName);
        setValueObjectClass(obj.getClass());
      }
      pa = new PropertyAccessor(valueObjectClass, propertyName);
      properties.put(propertyName, pa);
    }
    return pa;
  }

  protected Map getPropertyAccessors() {
    return properties;
  }


  public void propertyChange(PropertyChangeEvent e) {
    if (!changingPropertyValue)
      fireStateChanged(new ContentValueChangeEvent(
          this, e.getPropertyName(), e.getOldValue(), e.getNewValue()));
  }
}
```

File: com.taursys.model.PropertyAdapter
```java
package com.taursys.model;

import java.text.Format;
import java.text.MessageFormat;
import com.taursys.util.DataTypes;
import com.taursys.util.UnsupportedDataTypeException;
import com.taursys.util.UnsupportedConversionException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.text.ParseException;

import java.lang.reflect.Method;
import java.lang.reflect.InvocationTargetException;
import java.lang.IllegalAccessException;
import java.beans.BeanInfo;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.beans.IntrospectionException;
import com.taursys.util.DataTypes;
import java.util.StringTokenizer;

public class PropertyAdapter {
  private String propertyName;
  private int javaDataType = DataTypes.TYPE_UNDEFINED;
  private java.lang.reflect.Method writeMethod;
  private java.lang.reflect.Method[] readMethods;

  public PropertyAdapter(Class valueObjectClass, String propertyName) throws IntrospectionException,
      InvocationTargetException, IllegalAccessException {
    setAccessorMethods(valueObjectClass, propertyName);
  }


  private void setAccessorMethods(Class c, String propertyName) throws
      IntrospectionException, InvocationTargetException, IllegalAccessException {
    if (c == null)
      throw new IntrospectionException("Value Object class is null");
    if (propertyName == null || propertyName.length() == 0)
      throw new IntrospectionException("propertyName is null or blank");
    this.propertyName = propertyName;
    StringTokenizer tokenizer = new StringTokenizer(propertyName, ".");
    int count = tokenizer.countTokens() ;
    readMethods = new Method[count];
    PropertyDescriptor prop = null;
    for (int i = 0; i < count ; i++) {
      String propName = tokenizer.nextToken();
      prop = getProperty(c, propName);
      readMethods[i] = prop.getReadMethod();
      c = prop.getPropertyType();
    }
    javaDataType = DataTypes.getDataType(c.getName());
    writeMethod = prop.getWriteMethod();
  }

  protected PropertyDescriptor getProperty(Class c, String propName)
      throws IntrospectionException {
    BeanInfo info = Introspector.getBeanInfo(c);
    PropertyDescriptor[] props = info.getPropertyDescriptors();
    for( int i=0 ; i < props.length ; i++ ) {
      if (props[i].getName().equals(propName)) {
        return props[i];
      }
    }
    throw new IntrospectionException("Property " + propName
        + " is not found in "
        + c.getName());
  }


  public String getText(Object valueObject, Format format)
      throws IntrospectionException, InvocationTargetException,
      IllegalAccessException {
    Object value = getPropertyValue(valueObject);
    if (value == null)
      return "";
    if (format == null)
      return DataTypes.format(javaDataType, value);
    else if (format instanceof MessageFormat)
      return ((MessageFormat)format).format(new Object[] {value});
    else
      return format.format(value);
  }

  public void setText(Object target, String value, Format format)
      throws IntrospectionException, InvocationTargetException,
      IllegalAccessException, ParseException, UnsupportedDataTypeException,
      UnsupportedConversionException {
    if (value == null || value.length() == 0)
      setPropertyValue(target, null);
    else if (format == null)
      setPropertyValue(target, DataTypes.parse(javaDataType, value));
    else if (format instanceof MessageFormat) {
      Object[] values = ((MessageFormat)format).parse(value);
      setPropertyValue(target, DataTypes.convert(javaDataType, values[0]));
    } else
      setPropertyValue(target, DataTypes.convert(javaDataType, format.parseObject(value)));
  }


  public Object getPropertyValue(Object valueObject)
      throws IntrospectionException, InvocationTargetException,
      IllegalAccessException {
    Object obj = valueObject;
    for (int i = 0; obj != null && i < readMethods.length; i++) {
      if (readMethods[i] == null)
        throw new IntrospectionException("Property " + propertyName
            + " has no get method defined in "
            + obj.getClass().getName());
      obj = readMethods[i].invoke(obj, new Object[] {});
    }
    return obj;
  }

  public void setPropertyValue(Object valueObject, Object value)
      throws IntrospectionException, InvocationTargetException,
      IllegalAccessException {
    if(valueObject == null)
      throw new IntrospectionException("Value object is null");
    if(writeMethod == null)
      throw new IntrospectionException("Property " + propertyName
          + " has no set method defined in "
          + valueObject.getClass().getName());
    Object target = valueObject;
    int count = readMethods.length -1;
    for (int i = 0; target != null && i < count ; i++) {
      if (readMethods[i] == null)
        throw new IntrospectionException("Property " + propertyName
            + " has no get method defined in "
            + target.getClass().getName());
      target = readMethods[i].invoke(target, new Object[] {});
    }
    writeMethod.invoke(target, new Object[] {value});
  }


  public String getPropertyName() {
    return propertyName;
  }

  protected java.lang.reflect.Method[] getReadMethods() {
    return readMethods;
  }

  protected java.lang.reflect.Method getWriteMethod() {
    return writeMethod;
  }
}
```

File: com.taursys.model.CheckboxModel
```java
package com.taursys.model;

import com.taursys.util.UnsupportedDataTypeException;

public interface CheckboxModel extends TextModel {


  public String getText() throws UnknownStateValueException, ModelException;

  public void setText(String value) throws UnknownStateValueException,
      ModelException;

  public void setSelected(boolean newSelected) throws ModelException;

  public boolean isSelected() throws UnknownStateValueException, ModelException;


  public void setSelectedValue(String newSelectedValue);

  public String getSelectedValue();

  public void setUnselectedValue(String newUnselectedValue);

  public String getUnselectedValue();
}
```

File: com.taursys.model.ModelInvocationTargetException
```java
package com.taursys.model;

import java.lang.reflect.Method;
import com.taursys.util.ChainedException;

public class ModelInvocationTargetException extends ModelPropertyAccessorException {
  public static final int REASON_OFFSET                       =
      ModelPropertyAccessorException.REASON_OFFSET + 10;
  public static final int REASON_INVOCATION_EXCEPTION         = 0 + REASON_OFFSET;
  private static final String[] messages = new String[] {
    "InvocationTargetException while accessing property value.",
  };


  public static String getReasonMessage(int reason) {
    if (reason >=  + REASON_OFFSET && reason < messages.length + REASON_OFFSET)
      return messages[reason - REASON_OFFSET];
    else
      return getInvalidMessage();
  }


  public ModelInvocationTargetException(Class voClass,
      String propertyName, int javaDataType, Object target, Method method,
      Throwable cause) {
    super(getReasonMessage(REASON_INVOCATION_EXCEPTION), REASON_INVOCATION_EXCEPTION);
    setValueObjectClassName(voClass);
    this.propertyName = propertyName;
    this.cause = cause;
    setMethodName(method);
    setPropertyDataType(javaDataType);
    setGivenValueObjectClassName(target);
    setDiagnosticsInfo();
  }

  public ModelInvocationTargetException(Class voClass,
      String propertyName, int javaDataType, Object target, Object value,
      Method method, Throwable cause) {
    super(getReasonMessage(REASON_INVOCATION_EXCEPTION), REASON_INVOCATION_EXCEPTION);
    setValueObjectClassName(voClass);
    this.propertyName = propertyName;
    this.cause = cause;
    setMethodName(method);
    setPropertyDataType(javaDataType);
    setGivenValueObjectClassName(target);
    setGivenValueDataType(value);
    setDiagnosticsInfo();
  }
}
```

File: com.taursys.model.BoundValueObject
```java
package com.taursys.model;

import java.beans.PropertyChangeListener;

public interface BoundValueObject {

  public void removePropertyChangeListener(PropertyChangeListener l);

  public void addPropertyChangeListener(PropertyChangeListener l);
}
```

File: com.taursys.model.VOCollectionValueHolder
```java
package com.taursys.model;

import java.util.Collection;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.util.Collections;
import com.taursys.debug.Debug;

public class VOCollectionValueHolder extends AbstractCollectionValueHolder {

  public VOCollectionValueHolder() {
    super(new VOValueHolder());
  }

  public VOCollectionValueHolder(Collection collection) {
    super(new VOValueHolder(), collection);
  }

  public VOCollectionValueHolder(int size) {
    super(new VOValueHolder(), new ArrayList(size));
  }


  public void setValueObjectClass(Class clazz) {
    ((VOValueHolder)getObjectValueHolder()).setValueObjectClass(clazz);
  }

  public Class getValueObjectClass() {
    return ((VOValueHolder)getObjectValueHolder()).getValueObjectClass();
  }

  public Object getValueObject() {
    return getObject();
  }

  public void setValueObject(Object obj) {
    setObject(obj);
  }
}
```

File: com.taursys.model.SelectModel
```java
package com.taursys.model;

import java.util.Collection;

public interface SelectModel extends TextModel {


  public Collection getDisplayOptionList() throws ModelException;

  public Object getSelectedItem() throws com.taursys.model.ModelException;

  public void setSelectedItem(Object value) throws ModelException;


  public void setList(com.taursys.model.CollectionValueHolder newList);

  public com.taursys.model.CollectionValueHolder getList();

  public void setDisplayPropertyName(String newDisplayPropertyName);

  public String getDisplayPropertyName();

  public void setListPropertyNames(String[] newListPropertyNames);

  public String[] getListPropertyNames();

  public void setPropertyNames(String[] newPropertyNames);

  public String[] getPropertyNames();

  public void setNullAllowed(boolean newNullAllowed);

  public boolean isNullAllowed();

  public void setNullDisplay(String newNullDisplay);

  public String getNullDisplay();
}
```

File: com.taursys.model.AbstractListValueHolder
```java
package com.taursys.model;

import javax.swing.event.*;
import java.util.*;
import com.taursys.model.event.*;
import com.taursys.swing.*;

public class AbstractListValueHolder extends AbstractCollectionValueHolder
    implements ListValueHolder {
  private int position = -1;
  private transient Vector listSelectionListeners;
  private boolean ignoreReset = false;
  private Comparator comparator;

  public AbstractListValueHolder(ObjectValueHolder holder) {
    super(holder);
  }

  public AbstractListValueHolder(ObjectValueHolder holder, List list) {
    super(holder, list);
  }

  public boolean hasNext() {
    return (position+1) < size();
  }

  public boolean hasPrior() {
    return position > 0;
  }

  public boolean hasAny() {
    return size() > 0;
  }

  public int getPosition() {
    return position;
  }

  public int getRowCount() {
    return size();
  }

  public void moveTo(int row) {
    getObjectValueHolder().setObject(getList().get(row));
    position = row;
    fireValueChanged();
  }

  public void first() {
    if (hasAny()) {
      moveTo(0);
    } else {
      reset();
    }
  }

  public void next() {
    position++;
    getObjectValueHolder().setObject(getList().get(position));
    fireValueChanged();
  }

  public void prior() {
    position--;
    getObjectValueHolder().setObject(getList().get(position));
    fireValueChanged();
  }

  public void last() {
    if (hasAny()) {
      moveTo(size() - 1);
    } else {
      reset();
    }
  }

  public void reset() {
    if (!ignoreReset) {
      position = -1;
      getObjectValueHolder().setObject(null);
      fireValueChanged();
    }
  }

  public int indexOf(String[] propertyNames, Object[] values)
      throws ModelException {
    if (propertyNames == null || values == null || propertyNames.length != values.length)
      throw new ModelException(ModelException.REASON_MULTI_PROPERTY_MISMATCH);
    for (int i = 0; i < size(); i++) {
      Object[] itemValues = getPropertyValues(propertyNames, i);
      if (isMatchAll(values, itemValues))
        return i;
    }
    return -1;
  }

  private boolean isMatchAll(Object[] values1, Object[] values2) {
    for (int i = 0; i < values1.length; i++) {
      if (!isMatch(values1[i], values2[i]))
        return false;
    }
    return true;
  }

  private boolean isMatch(Object value1, Object value2) {
    if (value1 == null && value2 == null)
      return true;
    if (value1 == null)
      return false;
    try {
      return ((Comparable)value1).compareTo(value2) == 0;
    } catch (ClassCastException ex) {
      com.taursys.debug.Debug.error(
          "Property in value object must be Comparable. Object=" + value1);
      return false;
    }
  }

  public Object[] getPropertyValues(String[] propertyNames, int index) throws ModelException {
    return getObjectValueHolder().getPropertyValues(
        propertyNames, get(index));
  }

  public Object getPropertyValue(String propertyName, int index) throws ModelException {
    return getObjectValueHolder().getPropertyValue(
        propertyName, getList().get(index));
  }

  public void setPropertyValues(String[] propertyNames, Object[] values, int index)
      throws ModelException {
    getObjectValueHolder().setPropertyValues(
        propertyNames, values, get(index));
  }

  public void setObject(Object obj) {
    getObjectValueHolder().setObject(obj);
    getList().set(position, obj);
  }

  public void setCollection(Collection newCollection) {
    setList((List)newCollection);
  }

  public void setList(java.util.List newList) {
    ignoreReset = true;
    super.setCollection(newList);
    ignoreReset = false;
    if (comparator != null)
      Collections.sort(getList(), comparator);
    listContentsPositionChange();
  }

  public java.util.List getList() {
    return (List)getCollection();
  }

  public void setComparator(Comparator comparator) {
    this.comparator = comparator;
  }

  public Comparator getComparator() {
    return comparator;
  }

  public void sort() {
    if (comparator != null) {
      Collections.sort(getList(), comparator);
      listContentsPositionChange();
    }
  }

  private void listContentsPositionChange() {
    Object vo = null;
    position = -1;
    if (getList() != null && size() > 0) {
      position = 0;
      vo = getList().get(position);
    }
    getObjectValueHolder().setObject(
        vo, new ListContentChangeEvent(this, vo==null));
    fireValueChanged(new ListSelectionEvent(this, position, position, false));
  }

  public synchronized void removeListSelectionListener(ListSelectionListener l) {
    if (listSelectionListeners != null && listSelectionListeners.contains(l)) {
      Vector v = (Vector) listSelectionListeners.clone();
      v.removeElement(l);
      listSelectionListeners = v;
    }
  }

  public synchronized void addListSelectionListener(ListSelectionListener l) {
    Vector v = listSelectionListeners == null ? new Vector(2) : (Vector) listSelectionListeners.clone();
    if (!v.contains(l)) {
      v.addElement(l);
      listSelectionListeners = v;
    }
  }

  protected void fireValueChanged() {
    fireValueChanged(new ListSelectionEvent(this, position, position, false));
  }

  protected void fireValueChanged(ListSelectionEvent e) {
    if (listSelectionListeners != null) {
      Vector listeners = listSelectionListeners;
      int count = listeners.size();
      for (int i = 0; i < count; i++) {
        ((ListSelectionListener) listeners.elementAt(i)).valueChanged(e);
      }
    }
  }


  private void reposition() {
    if (position >= getList().size())
      position = getList().size() - 1;
    Object vo = null;
    if (position >= 0)
      vo = getList().get(position);
    getObjectValueHolder().setObject(
        vo, new ListContentChangeEvent(this, vo==null));
    fireValueChanged(new ListSelectionEvent(this, position, position, false));
  }

  private void reposition(Object o) {
    position = getList().indexOf(o);
    reposition();
  }

  public Object remove() {
    Object o = getList().remove(position);
    reposition();
    return o;
  }
  public Object remove(int index) {
    Object o = getList().remove(index);
    reposition();
    return o;
  }
  public boolean remove(Object o) {
    boolean b = getList().remove(o);
    reposition();
    return b;
  }
  public boolean removeAll(Collection c) {
    boolean b = getList().removeAll(c);
    reposition();
    return b;
  }
  public boolean retainAll(Collection c) {
    boolean b = getList().retainAll(c);
    reposition();
    return b;
  }
  public void clear() {
    getList().clear();
    reposition();
  }
  public boolean add(Object o) {
    boolean b = getList().add(o);
    reposition(o);
    return b;
  }
  public void add(int index, Object element) {
    getList().add(index, element);
    reposition(element);
  }
  public boolean addAll(Collection c) {
    boolean b = getList().addAll(c);
    reposition();
    return b;
  }
  public boolean addAll(int index, Collection c) {
    boolean b = getList().addAll(index, c);
    reposition();
    return b;
  }
  public Object set(int index, Object element) {
    Object oldObj = getList().get(index);
    moveTo(index);
    setObject(element);
    return oldObj;
  }

  public Object get(int index) {
    return getList().get(index);
  }
  public int indexOf(Object o) {
    return getList().indexOf(o);
  }
  public int lastIndexOf(Object o) {
    return getList().lastIndexOf(o);
  }
  public ListIterator listIterator() {
    return getList().listIterator();
  }
  public ListIterator listIterator(int index) {
    return getList().listIterator(index);
  }
  public List subList(int fromIndex, int toIndex) {
    return getList().subList(fromIndex, toIndex);
  }
}
```

File: com.taursys.model.AbstractValueHolder
```java
package com.taursys.model;

import java.util.Vector;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import com.taursys.util.DataTypes;
import com.taursys.util.UnsupportedDataTypeException;
import com.taursys.model.event.ContentValueChangeEvent;


public abstract class AbstractValueHolder implements ValueHolder {
  private String alias;
  private transient Vector changeListeners;
  private boolean multiplePropertiesChanging;

  public AbstractValueHolder() {
  }


  public abstract int getJavaDataType(String propertyName)
      throws ModelException;

  public abstract Object getPropertyValue(String propertyName)
      throws ModelException;

  public Object[] getPropertyValues(String[] propertyNames)
      throws ModelException {
    if (propertyNames != null && propertyNames.length > 0) {
      Object[] results = new Object[propertyNames.length];
      for (int i = 0; i < propertyNames.length; i++) {
        results[i] = getPropertyValue(propertyNames[i]);
      }
      return results;
    } else {
      return new Object[]{};
    }
  }

  public abstract void setPropertyValue(String propertyName, Object value)
      throws ModelException;

  public void setPropertyValues(String[] propertyNames, Object[] values)
      throws ModelException {
    checkArrays(propertyNames, values);
    setMultiplePropertiesChanging(true);
    try {
      for (int i = 0; i < propertyNames.length; i++) {
        setPropertyValue(propertyNames[i], values[i]);
      }
      fireStateChanged(new ContentValueChangeEvent(this, null, null, null));
    } finally {
      setMultiplePropertiesChanging(false);
    }
  }

  protected void checkArrays(String[] propertyNames, Object[] values)
      throws ModelException {
    if (propertyNames == null || values == null
        || propertyNames.length != values.length)
      throw new ModelException(ModelException.REASON_MULTI_PROPERTY_MISMATCH);
  }


  public void setAlias(String newAlias) {
    alias = newAlias;
  }

  public String getAlias() {
    return alias;
  }

  protected void setMultiplePropertiesChanging(boolean multiplePropertiesChanging) {
    this.multiplePropertiesChanging = multiplePropertiesChanging;
  }

  protected boolean isMultiplePropertiesChanging() {
    return multiplePropertiesChanging;
  }


  public synchronized void removeChangeListener(ChangeListener l) {
    if (changeListeners != null && changeListeners.contains(l)) {
      Vector v = (Vector) changeListeners.clone();
      v.removeElement(l);
      changeListeners = v;
    }
  }

  public synchronized void addChangeListener(ChangeListener l) {
    Vector v = changeListeners == null ? new Vector(2) : (Vector) changeListeners.clone();
    if (!v.contains(l)) {
      v.addElement(l);
      changeListeners = v;
    }
  }

  protected void fireStateChanged(ChangeEvent e) {
    if (changeListeners != null) {
      Vector listeners = changeListeners;
      int count = listeners.size();
      for (int i = 0; i < count; i++) {
        ((ChangeListener) listeners.elementAt(i)).stateChanged(e);
      }
    }
  }
}
```

File: com.taursys.model.ModelParseException
```java
package com.taursys.model;

import java.lang.reflect.Method;
import com.taursys.util.DataTypes;
import com.taursys.util.ChainedException;
import java.text.Format;

public class ModelParseException extends ModelException {
  public static final int REASON_OFFSET                       =
      ModelException.REASON_OFFSET + 300;
  public static final int REASON_PARSE_ERROR                  = 0 + REASON_OFFSET;
  protected static final String[] messages = new String[] {
    "Problem parsing given value.",
  };
  private String propertyName;
  private String propertyDataType;
  private String givenValue;
  private String formatClass;
  private String formatPattern;


  public static String getReasonMessage(int reason) {
    if (reason >=  + REASON_OFFSET && reason < messages.length + REASON_OFFSET)
      return messages[reason - REASON_OFFSET];
    else
      return getInvalidMessage();
  }


  public ModelParseException(String propertyName, int javaDataType,
    Format format, String pattern, String givenValue, Throwable cause) {
    super(getReasonMessage(REASON_PARSE_ERROR), REASON_PARSE_ERROR, cause);
    this.propertyName = propertyName;
    this.propertyDataType = DataTypes.getJavaNameForType(javaDataType);
    if (format == null)
      this.formatClass = "null";
    else
      this.formatClass = format.getClass().getName();
    this.formatPattern = pattern;
    this.givenValue = givenValue;
    this.userFriendlyMessage = "The value you entered, \""
        + givenValue + "\" is not valid. Please try again.";
    setDiagnosticsInfo();
  }



  protected void setDiagnosticsInfo() {
    diagnosticInfo =
        "Property Name=" + propertyName +
        "(" + propertyDataType + ")" +
        "\nFormat Class=" + formatClass +
        "\nFormat Pattern=" + formatPattern +
        "\nGiven Value=" + givenValue;
  }


  public String getPropertyDataType() {
    return propertyDataType;
  }

  public String getPropertyName() {
    return propertyName;
  }

  public String getGivenValue() {
    return givenValue;
  }

  public String getFormatClass() {
    return formatClass;
  }

  public String getFormatPattern() {
    return formatPattern;
  }
}
```

File: com.taursys.model.ObjectCollectionValueHolder
```java
package com.taursys.model;

import java.util.*;

public class ObjectCollectionValueHolder extends AbstractCollectionValueHolder {

  public ObjectCollectionValueHolder() {
    super(new ObjectValueHolder());
  }

  public ObjectCollectionValueHolder(Object[] array) {
    super(new ObjectValueHolder(), new ArrayList(Arrays.asList(array)));
  }

  public ObjectCollectionValueHolder(Collection collection) {
    super(new ObjectValueHolder(), collection);
  }
}
```

File: com.taursys.model.CollectionValueHolder
```java
package com.taursys.model;

import java.util.Collection;
import java.util.Iterator;

public interface CollectionValueHolder extends ValueHolder, Collection {

  public boolean hasNext();

  public void next();

  public void reset();

  public Object getObject();

  public void setObject(Object obj);


  public int size();

  public boolean isEmpty();

  public boolean contains(Object o);

  public Iterator iterator();

  public Object[] toArray();

  public Object[] toArray(Object[] a);

  public boolean add(Object o);

  public boolean remove(Object o);

  public boolean containsAll(Collection c);

  public boolean addAll(Collection c);

  public boolean removeAll(Collection c);

  public boolean retainAll(Collection c);

  public void clear();

  public boolean equals(Object o);

  public int hashCode();
}
```

File: com.taursys.model.UnknownStateValueException
```java
package com.taursys.model;

public class UnknownStateValueException extends com.taursys.model.ModelException {
  public static final int REASON_OFFSET                       = 400;
  public static final int REASON_UNKNOWN_VALUE                = 0 + REASON_OFFSET;
  private static final String[] messages = new String[] {
    "Given value does not match selectedValue or unselectedValue.",
  };


  public static String getReasonMessage(int reason) {
    if (reason >=  + REASON_OFFSET && reason < messages.length + REASON_OFFSET)
      return messages[reason - REASON_OFFSET];
    else
      return getInvalidMessage();
  }


  public UnknownStateValueException(int reason, String givenValue) {
    super(getReasonMessage(reason), reason);
    diagnosticInfo = "Given value=" + givenValue;
  }
}
```

File: com.taursys.model.ObjectArrayValueHolder
```java
package com.taursys.model;

import java.util.Collection;
import java.util.Iterator;
import com.taursys.util.DataTypes;
import com.taursys.util.UnsupportedDataTypeException;
import com.taursys.model.ModelException;
import com.taursys.model.event.ContentChangeEvent;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.util.Vector;

public class ObjectArrayValueHolder extends AbstractValueHolder
    implements CollectionValueHolder {
  private Object[] array;
  private int position = -1;

  public ObjectArrayValueHolder() {
  }

  public ObjectArrayValueHolder(Object[] newArray) {
    array = newArray;
  }

  public void setVariantArray(Object[] newArray) {
    array = newArray;
  }

  public Object[] getVariantArray() {
    return array;
  }

  public void setArray(Object[] newArray) {
    array = newArray;
  }

  public Object[] getArray() {
    return array;
  }

  public Object getPropertyValue(String propertyName) throws ModelException {
    return array[position];
  }

  public void setPropertyValue(String propertyName, Object newValue)
      throws ModelException {
    array[position] = newValue;
    if (!isMultiplePropertiesChanging())
      fireStateChanged(new ContentChangeEvent(this, newValue == null));
  }

  public int getJavaDataType(String propertyName) throws ModelException {
    return DataTypes.TYPE_UNDEFINED;
  }

  public boolean hasNext() {
    return (position+1 < array.length);
  }

  public void next() {
    position++;
    fireStateChanged(new ChangeEvent(this));
  }

  public void reset() {
    position = -1;
  }

  public Object getObject() {
    return array[position];
  }

  public void setObject(Object obj) {
    array[position] = obj;
    fireStateChanged(new ChangeEvent(this));
  }

  public int size() {
    if (array != null)
      return array.length;
    else
      return 0;
  }

  public boolean isEmpty() {
    return size() == 0;
  }

  public boolean contains(Object o) {
    throw new java.lang.UnsupportedOperationException("Method contains() not yet implemented.");
  }
  public Iterator iterator() {
    throw new java.lang.UnsupportedOperationException("Method iterator() not yet implemented.");
  }
  public Object[] toArray() {
    throw new java.lang.UnsupportedOperationException("Method toArray() not yet implemented.");
  }
  public Object[] toArray(Object[] a) {
    throw new java.lang.UnsupportedOperationException("Method toArray() not yet implemented.");
  }
  public boolean add(Object o) {
    throw new java.lang.UnsupportedOperationException("Method add() not yet implemented.");
  }
  public boolean remove(Object o) {
    throw new java.lang.UnsupportedOperationException("Method remove() not yet implemented.");
  }
  public boolean containsAll(Collection c) {
    throw new java.lang.UnsupportedOperationException("Method containsAll() not yet implemented.");
  }
  public boolean addAll(Collection c) {
    throw new java.lang.UnsupportedOperationException("Method addAll() not yet implemented.");
  }
  public boolean removeAll(Collection c) {
    throw new java.lang.UnsupportedOperationException("Method removeAll() not yet implemented.");
  }
  public boolean retainAll(Collection c) {
    throw new java.lang.UnsupportedOperationException("Method retainAll() not yet implemented.");
  }
  public void clear() {
    throw new java.lang.UnsupportedOperationException("Method clear() not yet implemented.");
  }
  public boolean equals(Object o) {
    throw new java.lang.UnsupportedOperationException("Method equals() not yet implemented.");
  }
  public void stateChanged(ChangeEvent e) {
    throw new java.lang.UnsupportedOperationException("Method equals() not yet implemented.");
  }
}
```

File: com.taursys.model.ModelPropertyAccessorException
```java
package com.taursys.model;

import java.lang.reflect.Method;
import com.taursys.util.DataTypes;
import com.taursys.util.ChainedException;

public class ModelPropertyAccessorException extends ModelException {
  public static final int REASON_OFFSET                       =
      ModelException.REASON_OFFSET + 100;
  public static final int REASON_TARGET_CLASS_IS_NULL         = 0 + REASON_OFFSET;
  public static final int REASON_PROPERTY_NAME_MISSING        = 1 + REASON_OFFSET;
  public static final int REASON_PROPERTY_NOT_FOUND           = 2 + REASON_OFFSET;
  public static final int REASON_NO_READ_METHOD_FOR_PROPERTY  = 3 + REASON_OFFSET;
  public static final int REASON_NO_WRITE_METHOD_FOR_PROPERTY = 4 + REASON_OFFSET;
  public static final int REASON_INTROSPECTION_EXCEPTION      = 5 + REASON_OFFSET;
  public static final int REASON_ILLEGAL_ACCESS_EXCEPTION     = 6 + REASON_OFFSET;
  public static final int REASON_TARGET_IS_NULL               = 7 + REASON_OFFSET;
  public static final int REASON_ILLEGAL_ARGUMENT_EXCEPTION   = 8 + REASON_OFFSET;
  public static final int REASON_TARGET_AND_CLASS_ARE_NULL    = 9 + REASON_OFFSET;
  public static final int REASON_NULL_VALUE_FOR_PRIMATIVE     = 10 + REASON_OFFSET;
  protected static final String[] messages = new String[] {
    "ValueObject class is null.",
    "Property name is null or blank.",
    "Property not found in class.",
    "No read method defined for property.",
    "No write method defined for property.",
    "IntrospectionException occurred.",
    "IllegalAccessException occurred.",
    "Target object (or child) is null.",
    "IllegalArgumentException - Either ValueObject or value is wrong class.",
    "ValueObject and ValueObjectClass are both null.",
    "Value for primative cannot be set to null",
  };
  protected static final String[] friendlyMessages = new String[] {
    "A system problem has occurred and been logged.",
    "A system problem has occurred and been logged.",
    "A system problem has occurred and been logged.",
    "A system problem has occurred and been logged.",
    "A system problem has occurred and benn logged",
    "A system problem has occurred and benn logged",
    "A system problem has occurred and benn logged",
    "A system problem has occurred and benn logged",
    "A system problem has occurred and benn logged",
    "A system problem has occurred and benn logged",
    "You must enter or select a value.",
  };
  protected String propertyName = "n/a";
  protected String valueObjectClassName = "n/a";
  protected String methodName = "n/a";
  protected String givenValueObjectClassName = "n/a";
  protected String propertyDataType = "n/a";
  protected String givenValueDataType = "n/a";


  public static String getReasonMessage(int reason) {
    if (reason >=  + REASON_OFFSET && reason < messages.length + REASON_OFFSET)
      return messages[reason - REASON_OFFSET];
    else
      return getInvalidMessage();
  }


  public ModelPropertyAccessorException(int reason, Class voClass,
      String propertyName) {
    super(getReasonMessage(reason), reason);
    setValueObjectClassName(voClass);
    this.propertyName = propertyName;
    setDiagnosticsInfo();
  }

  public ModelPropertyAccessorException(int reason, Class voClass,
      String propertyName, int javaDataType, Object target, Object value,
      Method method, Throwable cause) {
    super(getReasonMessage(reason), reason);
    setValueObjectClassName(voClass);
    this.propertyName = propertyName;
    this.cause = cause;
    setMethodName(method);
    setPropertyDataType(javaDataType);
    setGivenValueObjectClassName(target);
    setGivenValueDataType(value);
    setDiagnosticsInfo();
  }

  public ModelPropertyAccessorException(int reason, Class voClass,
      String propertyName, int javaDataType, Object target, Method method) {
    super(getReasonMessage(reason), reason);
    setValueObjectClassName(voClass);
    this.propertyName = propertyName;
    setMethodName(method);
    setPropertyDataType(javaDataType);
    setGivenValueObjectClassName(target);
    setDiagnosticsInfo();
  }

  public ModelPropertyAccessorException(int reason, Class voClass,
      String propertyName, int javaDataType, Object target, Method method,
      Throwable cause) {
    super(getReasonMessage(reason), reason);
    setValueObjectClassName(voClass);
    this.propertyName = propertyName;
    this.cause = cause;
    setMethodName(method);
    setPropertyDataType(javaDataType);
    setGivenValueObjectClassName(target);
    setDiagnosticsInfo();
  }


  protected ModelPropertyAccessorException(String message, int reason) {
    super(message, reason);
  }


  protected void setDiagnosticsInfo() {
    diagnosticInfo =
        "Property Name=" + propertyName +
        "(" + propertyDataType + ")" +
        "\nValueObject Class=" + valueObjectClassName +
        "\nInvoked Method Name=" + methodName +
        "\nGiven ValueObject Class=" + givenValueObjectClassName +
        "\nGiven Value data type=" + givenValueDataType;
    if (reason >=  + REASON_OFFSET && reason < messages.length + REASON_OFFSET)
      userFriendlyMessage = friendlyMessages[reason - REASON_OFFSET];
    else
      userFriendlyMessage = "System problem has occurred (unknown reason code).";
    userFriendlyMessage += " (" + propertyName + ")";
  }


  protected void setPropertyDataType(int javaDataType) {
    propertyDataType = DataTypes.getJavaNameForType(javaDataType);
  }

  public String getPropertyDataType() {
    return propertyDataType;
  }

  public String getPropertyName() {
    return propertyName;
  }

  protected void setValueObjectClassName(Class voClass) {
    valueObjectClassName = voClass==null?"null":voClass.getName();
  }

  public String getValueObjectClassName() {
    return valueObjectClassName;
  }

  protected void setMethodName(Method method) {
    methodName = method.getName();
  }

  public String getMethodName() {
    return methodName;
  }

  protected void setGivenValueObjectClassName(Object given) {
    givenValueObjectClassName = given==null?"null":given.getClass().getName();
  }

  public String getGivenValueObjectClassName() {
    return givenValueObjectClassName;
  }

  protected void setGivenValueDataType(Object value) {
    givenValueDataType = value==null?"null":value.getClass().getName();
  }

  public String getGivenValueDataType() {
    return givenValueDataType;
  }
}
```

File: com.taursys.model.SelectModelException
```java
package com.taursys.model;

public class SelectModelException extends ModelException {
  public static final int REASON_OFFSET                       = 200;
  public static final int REASON_HOLDER_LIST_MISMATCH         = 0 + REASON_OFFSET;
  private static final String[] messages = new String[] {
    "Property names for valueHolder object and list object do not correspond",
  };
  private String displayPropertyName;
  private String[] listPropertyNames;
  private String[] propertyNames;
  private boolean nullAllowed;
  private String nullDisplay;


  public static String getReasonMessage(int reason) {
    if (reason >=  + REASON_OFFSET && reason < messages.length + REASON_OFFSET)
      return messages[reason - REASON_OFFSET];
    else
      return getInvalidMessage();
  }


  public SelectModelException(int reason, String displayPropertyName,
      String[] listPropertyNames, String[] propertyNames, boolean nullAllowed,
      String nullDisplay) {
    super(getReasonMessage(reason), reason);
    this.displayPropertyName = displayPropertyName;
    this.listPropertyNames = listPropertyNames;
    this.propertyNames = propertyNames;
    this.nullAllowed = nullAllowed;
    this.nullDisplay = nullDisplay;
    setDiagnosticsInfo();
  }


  protected SelectModelException(String message, int reason) {
    super(message, reason);
  }


  protected void setDiagnosticsInfo() {
    diagnosticInfo =
        "Display property Name=" + displayPropertyName +
        "\nlistPropertyNames=" + listPropertyNames +
        "\npropertyNames=" + propertyNames +
        "\nnullAllowed=" + nullAllowed +
        "\nnullDisplay=" + nullDisplay;
  }


  public String getDisplayPropertyName() {
    return displayPropertyName;
  }

  public String[] getListPropertyNames() {
    return listPropertyNames;
  }

  public String[] getPropertyNames() {
    return propertyNames;
  }

  public boolean isNullAllowed() {
    return nullAllowed;
  }

  public String getNullDisplay() {
    return nullDisplay;
  }
}
```

File: com.taursys.model.test.DefaultCheckboxModelTest
```java
package com.taursys.model.test;

import junit.framework.TestCase;
import com.taursys.model.*;
import java.util.*;
import java.math.BigDecimal;

public class DefaultCheckboxModelTest extends TestCase {
  DefaultCheckboxModel model;
  TestValueObject vo = new TestValueObject();
  VOValueHolder holder = new VOValueHolder();

  public DefaultCheckboxModelTest(String _name) {
    super(_name);
  }

  protected void setUp() {
    holder.setValueObject(vo);
  }

  protected void setUpStringYN() {
    model = new DefaultCheckboxModel(com.taursys.util.DataTypes.TYPE_STRING);
    model.setSelectedValue("Y");
    model.setUnselectedValue("N");
  }

  protected void setUpBoolean() {
    model = new DefaultCheckboxModel(com.taursys.util.DataTypes.TYPE_BOOLEAN);
    model.setSelectedValue("true");
    model.setUnselectedValue("false");
  }

  protected void setUpVOboolean() {
    model = new DefaultCheckboxModel();
    model.setValueHolder(holder);
    model.setPropertyName("active");
    model.setSelectedValue("true");
    model.setUnselectedValue("false");
  }

  protected void tearDown() {
  }


  public void testInitialState() throws Exception {
    model = new DefaultCheckboxModel();
    assertNull("Initial value sh/b null",
        model.getValueHolder().getPropertyValue("value"));
  }

  public void testSetSelectedFalseIntialState() throws Exception {
    model = new DefaultCheckboxModel();
    model.setSelected(false);
    assertNull("Value sh/b null",
        model.getValueHolder().getPropertyValue("value"));
  }

  public void testSetTextBlankIntialState() throws Exception {
    model = new DefaultCheckboxModel();
    model.setText("");
    assertNull("Value sh/b null",
        model.getValueHolder().getPropertyValue("value"));
  }

  public void testSetSelectedTrueIntialState() throws Exception {
    model = new DefaultCheckboxModel();
    model.setSelected(true);
    assertEquals("Value", "true",
        model.getValueHolder().getPropertyValue("value"));
  }


  public void testGetTextVOboolean_true() throws Exception {
    setUpVOboolean();
    vo.setActive(true);
    assertEquals("true", model.getText());
  }

  public void testGetTextVOboolean_false() throws Exception {
    setUpVOboolean();
    vo.setActive(false);
    assertEquals("false", model.getText());
  }

  public void testSetTextVOboolean_true() throws Exception {
    setUpVOboolean();
    model.setText("true");
    assertEquals("true", model.getText());
  }


  public void testGetTextBoolean_true() throws Exception {
    setUpBoolean();
    model.getValueHolder().setPropertyValue("", Boolean.TRUE);
    assertEquals("true", model.getText());
  }

  public void testGetTextBoolean_false() throws Exception {
    setUpBoolean();
    model.getValueHolder().setPropertyValue("", Boolean.FALSE);
    assertEquals("false", model.getText());
  }

  public void testSetTextBoolean_true() throws Exception {
    setUpBoolean();
    model.setText("true");
    assertEquals("true", model.getText());
  }


  public void testGetTextStringYN_Null() throws Exception {
    setUpStringYN();
    assertEquals("N", model.getText());
  }

  public void testGetTextStringYN_NN() throws Exception {
    setUpStringYN();
    model.getValueHolder().setPropertyValue("", "N");
    assertEquals("N", model.getText());
  }

  public void testGetTextStringYN_NY() throws Exception {
    setUpStringYN();
    model.getValueHolder().setPropertyValue("", "Y");
    assertEquals("Y", model.getText());
  }

  public void testGetTextStringYN_NX() throws Exception {
    setUpStringYN();
    model.getValueHolder().setPropertyValue("", "X");
    try {
      model.getText();
      fail("Expected UnknownStateValueException");
    } catch (UnknownStateValueException ex) {
    }
  }

  public void testSetTextStringYN_Y() throws Exception {
    setUpStringYN();
    model.setText("Y");
    assertEquals("Y", model.getText());
  }

  public void testSetTextStringYN_N() throws Exception {
    setUpStringYN();
    model.setText("N");
    assertEquals("N", model.getText());
  }

  public void testSetTextStringYN_Blank() throws Exception {
    setUpStringYN();
    model.setText("");
    assertEquals("N", model.getText());
  }

  public void testSetTextStringYN_Null() throws Exception {
    setUpStringYN();
    model.setText(null);
    assertEquals("N", model.getText());
  }

  public void testSetTextStringYN_NX() throws Exception {
    setUpStringYN();
    try {
      model.setText("X");
      fail("Expected UnknownStateValueException");
    } catch (UnknownStateValueException ex) {
    }
  }

  public void testSetSelectedStringYN_Y() throws Exception {
    setUpStringYN();
    model.setSelected(true);
    assertEquals(true, model.isSelected());
  }

  public void testIsSelectedStringYN_Y() throws Exception {
    setUpStringYN();
    model.getValueHolder().setPropertyValue("", "Y");
    assertEquals(true, model.isSelected());
  }

  public void testIsSelectedStringYN_N() throws Exception {
    setUpStringYN();
    model.getValueHolder().setPropertyValue("", "N");
    assertEquals(false, model.isSelected());
  }

  public void testIsSelectedStringYN_Blank() throws Exception {
    setUpStringYN();
    model.getValueHolder().setPropertyValue("", "");
    assertEquals(false, model.isSelected());
  }

  public void testIsSelectedStringYN_Null() throws Exception {
    setUpStringYN();
    model.getValueHolder().setPropertyValue("", null);
    assertEquals(false, model.isSelected());
  }

  public static void main(String[] argv) {
    String[] testCaseList = {DefaultCheckboxModelTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.model.test.ObjectArrayValueHolderTest
```java
package com.taursys.model.test;

import junit.framework.TestCase;
import com.taursys.model.*;
import com.taursys.util.*;

public class ObjectArrayValueHolderTest extends TestCase {

  public ObjectArrayValueHolderTest(String _name) {
    super(_name);
  }

  protected void setUp() {
  }

  protected void tearDown() {
  }

  public void testGetPropertyValue() throws Exception {
    ObjectArrayValueHolder holder = new ObjectArrayValueHolder();
    holder.setArray(new String[] {"A","B","C"});
    holder.next();
    assertEquals("1 value", "A", holder.getPropertyValue(null));
    holder.next();
    assertEquals("2 value", "B", holder.getPropertyValue(null));
    holder.next();
    assertEquals("3 value", "C", holder.getPropertyValue(null));
  }

  public void testHasNext() throws Exception {
    ObjectArrayValueHolder holder = new ObjectArrayValueHolder();
    holder.setArray(new String[] {"A","B","C"});
    assertTrue("1 Expect hasNext is true", holder.hasNext());
    holder.next();
    assertTrue("2 Expect hasNext is true", holder.hasNext());
    holder.next();
    assertTrue("3 Expect hasNext is true", holder.hasNext());
  }

  public void testNext() {
  }

  public void testReset() {
  }

  public static void main(String[] argv) {
    String[] testCaseList = {ObjectArrayValueHolderTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.model.test.DefaultSelectModelTest
```java
package com.taursys.model.test;

import junit.framework.TestCase;
import com.taursys.model.*;
import java.util.*;
import java.math.BigDecimal;

public class DefaultSelectModelTest extends TestCase {
  TestAddressValueObject address;
  VOCollectionValueHolder zipList;
  VOValueHolder holder;
  TestSelectModel model;
  public static final TestAddressValueObject JUNEAU =
      new TestAddressValueObject("Juneau", "AK", "99801");
  public static final TestAddressValueObject DOUGLAS =
      new TestAddressValueObject("Douglas", "AK", "99824");
  public static final TestAddressValueObject AUKE_BAY =
      new TestAddressValueObject("Auke Bay", "AK", "99827");
  public static final TestAddressValueObject KETCHIKAN =
      new TestAddressValueObject("Ketchikan", "AK", "99501");
  public DefaultSelectModelTest(String _name) {
    super(_name);
  }

  public class TestSelectModel extends DefaultSelectModel {
    public boolean isCurrentMatch() throws ModelException {
      return super.isCurrentMatch();
    }
    public boolean isValueNull() throws ModelException {
      return super.isValueNull();
    }
    public void copyValues() throws ModelException {
      super.copyValues();
    }
    public void setNullValues() throws ModelException {
      super.setNullValues();
    }
  }

  protected void setUp() {
    address = new TestAddressValueObject();
    zipList = new VOCollectionValueHolder();
    holder = new VOValueHolder();
    model = new TestSelectModel();
    ArrayList zips = new ArrayList();
    zips.add(JUNEAU);
    zips.add(DOUGLAS);
    zips.add(AUKE_BAY);
    zips.add(KETCHIKAN);
    zipList.setCollection(zips);
    holder.setValueObject(address);
    model.setList(zipList);
    model.setValueHolder(holder);
    model.setDisplayPropertyName("zip");
    model.setListPropertyNames(new String[]{"city","state","zip"});
    model.setPropertyNames(new String[]{"city","state","zip"});
  }

  protected void tearDown() {
  }

  public void testGetDisplayOptionListNullAllowedThirdSelected() throws ModelException {
    address.setCity("Douglas");
    address.setState("AK");
    address.setZip("99824");
    Collection c = model.getDisplayOptionList();
    Iterator iter = c.iterator();
    SelectModelOption option = (SelectModelOption)iter.next();
    assertEquals("1st item display value", "--none--", option.getOptionText());
    assertEquals("1st item selected", false, option.isSelected());
    option = (SelectModelOption)iter.next();
    assertEquals("2nd item display value", JUNEAU.getZip(), option.getOptionText());
    assertEquals("2nd item selected", false, option.isSelected());
    option = (SelectModelOption)iter.next();
    assertEquals("3rd item display value", DOUGLAS.getZip(), option.getOptionText());
    assertEquals("3rd item selected", true, option.isSelected());
    option = (SelectModelOption)iter.next();
    assertEquals("4th item display value", AUKE_BAY.getZip(), option.getOptionText());
    assertEquals("4th item selected", false, option.isSelected());
    option = (SelectModelOption)iter.next();
    assertEquals("5th item display value", KETCHIKAN.getZip(), option.getOptionText());
    assertEquals("5th item selected", false, option.isSelected());
    if (iter.hasNext())
      fail("A 6th item is present in list - should only be 5 items");
  }

  public void testGetDisplayOptionListNullAllowedNullSelected() throws ModelException {
    Collection c = model.getDisplayOptionList();
    Iterator iter = c.iterator();
    SelectModelOption option = (SelectModelOption)iter.next();
    assertEquals("1st item display value", "--none--", option.getOptionText());
    assertEquals("1st item selected", true, option.isSelected());
    option = (SelectModelOption)iter.next();
    assertEquals("2nd item display value", JUNEAU.getZip(), option.getOptionText());
    assertEquals("2nd item selected", false, option.isSelected());
    option = (SelectModelOption)iter.next();
    assertEquals("3rd item display value", DOUGLAS.getZip(), option.getOptionText());
    assertEquals("3rd item selected", false, option.isSelected());
    option = (SelectModelOption)iter.next();
    assertEquals("4th item display value", AUKE_BAY.getZip(), option.getOptionText());
    assertEquals("4th item selected", false, option.isSelected());
    option = (SelectModelOption)iter.next();
    assertEquals("5th item display value", KETCHIKAN.getZip(), option.getOptionText());
    assertEquals("5th item selected", false, option.isSelected());
    if (iter.hasNext())
      fail("A 6th item is present in list - should only be 5 items");
  }

  public void testGetDisplayOptionListNullNotAllowedThirdSelected() throws ModelException {
    model.setNullAllowed(false);
    address.setCity("Douglas");
    address.setState("AK");
    address.setZip("99824");
    Collection c = model.getDisplayOptionList();
    Iterator iter = c.iterator();
    SelectModelOption option = (SelectModelOption)iter.next();
    assertEquals("display value item 1", JUNEAU.getZip(), option.getOptionText());
    assertEquals("selected item 1", false, option.isSelected());
    option = (SelectModelOption)iter.next();
    assertEquals("display value item 2", DOUGLAS.getZip(), option.getOptionText());
    assertEquals("selected item 2", true, option.isSelected());
    option = (SelectModelOption)iter.next();
    assertEquals("display value item 3", AUKE_BAY.getZip(), option.getOptionText());
    assertEquals("selected item 3", false, option.isSelected());
    option = (SelectModelOption)iter.next();
    assertEquals("display value item 4", KETCHIKAN.getZip(), option.getOptionText());
    assertEquals("selected item 4", false, option.isSelected());
    if (iter.hasNext())
      fail("A 5th item is present in list - should only be 4 items");
  }

  public void testGetDisplayOptionListNullNotAllowedNullSelected() throws ModelException {
    model.setNullAllowed(false);
    Collection c = model.getDisplayOptionList();
    Iterator iter = c.iterator();
    SelectModelOption option = (SelectModelOption)iter.next();
    assertEquals("display value item 1", JUNEAU.getZip(), option.getOptionText());
    assertEquals("selected item 1", false, option.isSelected());
    option = (SelectModelOption)iter.next();
    assertEquals("display value item 2", DOUGLAS.getZip(), option.getOptionText());
    assertEquals("selected item 2", false, option.isSelected());
    option = (SelectModelOption)iter.next();
    assertEquals("display value item 3", AUKE_BAY.getZip(), option.getOptionText());
    assertEquals("selected item 3", false, option.isSelected());
    option = (SelectModelOption)iter.next();
    assertEquals("display value item 4", KETCHIKAN.getZip(), option.getOptionText());
    assertEquals("selected item 4", false, option.isSelected());
    if (iter.hasNext())
      fail("A 5th item is present in list - should only be 4 items");
  }

  public void testGetTextValid() throws ModelException {
    address.setCity("Douglas");
    address.setState("AK");
    address.setZip("99824");
    assertEquals("Display zip","99824", model.getText());
  }

  public void testGetTextNull() throws ModelException {
    assertEquals("Display zip","--none--", model.getText());
  }

  public void testSetTextValid() throws ModelException {
    address.setCity("Juneau");
    address.setState("AK");
    address.setZip("99801");
    model.setText("99501");
    assertEquals("City","Ketchikan",address.getCity());
    assertEquals("State","AK",address.getState());
    assertEquals("Zip","99501",address.getZip());
  }

  public void testSetTextInvalid() throws ModelException {
    address.setCity("Juneau");
    address.setState("AK");
    address.setZip("99801");
    try {
      model.setText("99999");
      fail("Expected a NotInListException");
    } catch (NotInListException ex) {
    }
  }

  public void testSetTextNullAllowedValueNull() throws ModelException {
    address.setCity("Juneau");
    address.setState("AK");
    address.setZip("99801");
    model.setText("--none--");
    assertTrue("Expected null values",model.isValueNull());
  }

  public void testSetTextNullNotAllowedValueNull() throws ModelException {
    address.setCity("Juneau");
    address.setState("AK");
    address.setZip("99801");
    model.setNullAllowed(false);
    try {
      model.setText("--none--");
      fail("Expected NotInListException");
    } catch (NotInListException ex) {
    }
  }

  public void testIsMatchTrue() throws ModelException {
    address.setCity("Juneau");
    address.setState("AK");
    address.setZip("99801");
    zipList.next();
    assertTrue("Expected a match",model.isCurrentMatch());
  }

  public void testIsMatchFalse() throws ModelException {
    address.setCity("Juneau");
    address.setState("AK");
    address.setZip("99801");
    zipList.next();
    zipList.next();
    assertTrue("Expected NO match",!model.isCurrentMatch());
  }

  public void testIsValueNullTrue() throws ModelException {
    assertTrue("Expected value true for null properties",model.isValueNull());
  }

  public void testIsValueNullFalse() throws ModelException {
    address.setCity("Juneau");
    address.setState("AK");
    address.setZip("99801");
    assertTrue("Expected value false for non-null properties",!model.isValueNull());
  }

  public void testCopyValues() throws ModelException {
    address.setCity("Juneau");
    address.setState("AK");
    address.setZip("99801");
    zipList.next();
    zipList.next();
    zipList.next();
    zipList.next();
    assertTrue("Expected NO match before copy",!model.isCurrentMatch());
    model.copyValues();
    assertTrue("Expected match after copy",model.isCurrentMatch());
  }

  public void testSetNullValues() throws ModelException {
    address.setCity("Juneau");
    address.setState("AK");
    address.setZip("99801");
    model.setNullValues();
    assertTrue("Expected null values",model.isValueNull());
  }

  public void testObjectArrayListSetGetText() throws Exception {
    model = new TestSelectModel();
    model.setList(new ObjectArrayValueHolder(
        new String[] {"Juneau","Douglas","Auke Bay","Ketchikan"}));
    model.setText("Douglas");
    assertEquals("Douglas", model.getText());
  }

  public void testGetSelectedItem() throws Exception {
    model = new TestSelectModel();
    model.setList(new ObjectArrayValueHolder(
        new BigDecimal[] {
          new BigDecimal(1),
          new BigDecimal(2),
          new BigDecimal(3),
          new BigDecimal(4),
          }));
    model.setText("3");
    assertEquals(new BigDecimal(3), model.getSelectedItem());
  }

  public void testSetSelectedItem() throws Exception {
    model = new TestSelectModel();
    model.setList(new ObjectArrayValueHolder(
        new BigDecimal[] {
          new BigDecimal(1),
          new BigDecimal(2),
          new BigDecimal(3),
          new BigDecimal(4),
          }));
    model.setSelectedItem(new BigDecimal(3));
    assertEquals(new BigDecimal(3), model.getSelectedItem());
  }

  public static void main(String[] argv) {
    String[] testCaseList = {DefaultSelectModelTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.model.test.VariantValueHolderTest
```java
package com.taursys.model.test;

import junit.framework.TestCase;
import com.taursys.model.VariantValueHolder;
import com.taursys.model.*;
import com.taursys.util.DataTypes;
import com.taursys.util.UnsupportedDataTypeException;
import java.beans.IntrospectionException;
import java.math.BigDecimal;

public class VariantValueHolderTest extends TestCase {

  public VariantValueHolderTest(String _name) {
    super(_name);
  }

  protected void setUp() {
  }

  protected void tearDown() {
  }

  public void testSetGetPropertyValueBigDecimal() throws Exception {
    VariantValueHolder holder = new VariantValueHolder(DataTypes.TYPE_BIGDECIMAL);
    BigDecimal value = new BigDecimal(1234.56);
    holder.setPropertyValue(null, value);
    assertEquals("BigDecimal value", value, holder.getPropertyValue(null));
  }

  public void testSetGetPropertyValueBigDecimalNull() throws Exception {
    VariantValueHolder holder = new VariantValueHolder(DataTypes.TYPE_BIGDECIMAL);
    BigDecimal value = null;
    holder.setPropertyValue(null, value);
    assertEquals("BigDecimal value", value, holder.getPropertyValue(null));
  }

  public void testSetGetPropertyValueInt() throws Exception {
    VariantValueHolder holder = new VariantValueHolder(DataTypes.TYPE_INT);
    Integer value = new Integer(2);
    holder.setPropertyValue("", value);
    assertEquals("int value", value, holder.getPropertyValue(""));
  }

  public void testSetGetPropertyValueIntNull() throws Exception {
    VariantValueHolder holder = new VariantValueHolder(DataTypes.TYPE_INT);
    Integer value = null;
    holder.setPropertyValue("", value);
    assertEquals("int value", value, holder.getPropertyValue(""));
  }

  public void testSetGetPropertyValueInteger() throws Exception {
    VariantValueHolder holder = new VariantValueHolder(DataTypes.TYPE_INT);
    Integer value = new Integer(2);
    holder.setPropertyValue("", value);
    assertEquals("int value", value, holder.getPropertyValue(""));
  }

  public void testSetGetPropertyValueIntegerNull() throws Exception {
    VariantValueHolder holder = new VariantValueHolder(DataTypes.TYPE_INT);
    Integer value = null;
    holder.setPropertyValue("", value);
    assertEquals("int value", value, holder.getPropertyValue(""));
  }

  public void testSetGetPropertyValueNull() throws Exception {
    VariantValueHolder holder = new VariantValueHolder(DataTypes.TYPE_BIGDECIMAL);
    holder.setPropertyValue("anything", null);
    assertNull("BigDecimal value", holder.getPropertyValue(null));
  }

  public void testSetPropertyValueTypeMismatch() throws Exception {
    VariantValueHolder holder = new VariantValueHolder(DataTypes.TYPE_BIGDECIMAL);
    try {
      holder.setPropertyValue("anything", "A String");
      fail("Expected ClassCastException");
    } catch (ClassCastException ex) {
      assertEquals("Exception message",
          "Given java.lang.String expected java.math.BigDecimal", ex.getMessage());
    }
  }

  public void testCreateInvalidDataType() throws Exception {
    try {
      VariantValueHolder holder = new VariantValueHolder(66);
      fail("Expected UnsupportedDataTypeException");
    } catch (UnsupportedDataTypeException ex) {
    }
  }

  public void testSetGetPropertyValueString() throws Exception {
    VariantValueHolder holder = new VariantValueHolder(DataTypes.TYPE_STRING);
    holder.setPropertyValue("anything", "John Smith");
    assertEquals("String value", "John Smith", holder.getPropertyValue(null));
  }

  public static void main(String[] argv) {
    String[] testCaseList = {VariantValueHolderTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.model.test.TestValueObject
```java
package com.taursys.model.test;

public class TestValueObject {

  public TestValueObject() {
  }
  private String fullName;
  private java.util.Date birthdate;
  private int dependents;
  private java.math.BigDecimal salary;
  private boolean active;
  private com.taursys.model.test.TestAddressValueObject homeAddress;
  private java.util.Date createDate;
  private com.taursys.model.test.TestValueObject supervisor;
  private Integer anInteger;
  public String getFullName() {
    return fullName;
  }
  public void setFullName(String newFullName) {
    fullName = newFullName;
  }
  public void setBirthdate(java.util.Date newBirthdate) {
    birthdate = newBirthdate;
  }
  public java.util.Date getBirthdate() {
    return birthdate;
  }
  public void setDependents(int newDependents) {
    dependents = newDependents;
  }
  public int getDependents() {
    return dependents;
  }
  public void setSalary(java.math.BigDecimal newSalary) {
    salary = newSalary;
  }
  public java.math.BigDecimal getSalary() {
    return salary;
  }
  public void setActive(boolean newActive) {
    active = newActive;
  }
  public boolean isActive() {
    return active;
  }
  public void setHomeAddress(com.taursys.model.test.TestAddressValueObject newHomeAddress) {
    homeAddress = newHomeAddress;
  }
  public com.taursys.model.test.TestAddressValueObject getHomeAddress() {
    return homeAddress;
  }
  public void setCreateDate(java.util.Date newCreateDate) {
    createDate = newCreateDate;
  }
  public java.util.Date getCreateDate() {
    return createDate;
  }
  public String toString() {
    return fullName;
  }
  public void setSupervisor(com.taursys.model.test.TestValueObject newSupervisor) {
    supervisor = newSupervisor;
  }
  public com.taursys.model.test.TestValueObject getSupervisor() {
    return supervisor;
  }
  public void setAnInteger(Integer newAnInteger) {
    anInteger = newAnInteger;
  }
  public Integer getAnInteger() {
    return anInteger;
  }
}
```

File: com.taursys.model.test.BeverlyCrusher
```java
package com.taursys.model.test;

import java.text.*;
import java.util.*;
import java.math.*;

public class BeverlyCrusher extends com.taursys.model.test.TestValueObject {

  public BeverlyCrusher() {
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }
  private void jbInit() throws Exception {
    DateFormat df = SimpleDateFormat.getDateInstance(DateFormat.SHORT);
    this.setFullName("Beverly Crusher");
    this.setActive(true);
    this.setBirthdate(df.parse("06/15/2002"));
    this.setCreateDate(df.parse("01/01/2000"));
    this.setDependents(2);
    this.setSalary(BigDecimal.valueOf(2000L));
  }
}
```

File: com.taursys.model.test.DefaultTextModelTest
```java
package com.taursys.model.test;

import junit.framework.TestCase;
import com.taursys.model.DefaultTextModel;
import com.taursys.model.VOValueHolder;
import java.util.Date;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.beans.IntrospectionException;
import com.taursys.model.ModelPropertyAccessorException;
import com.taursys.util.DataTypes;


public class DefaultTextModelTest extends TestCase {
  private TestValueObject vo;
  private DefaultTextModel model;
  private VOValueHolder holder;

  public DefaultTextModelTest(String _name) {
    super(_name);
  }

  protected void setUp() {
    vo = new TestValueObject();
    model = new DefaultTextModel();
    holder = new VOValueHolder();
    holder.setValueObject(vo);
    model.setValueHolder(holder);
  }

  protected void tearDown() {
  }


  public void testGetTextStringNoFormat() throws Exception {
    String value = "John Smith";
    vo.setFullName(value);
    model.setPropertyName("fullName");
    assertEquals("fullName", value, model.getText());
  }

  public void testGetTextDateNoFormat() throws Exception {
    Date bd = new SimpleDateFormat("MM-dd-yyyy").parse("05-05-1955");
    vo.setBirthdate(bd);
    model.setPropertyName("birthdate");
    assertEquals("birthdate", DataTypes.format(DataTypes.TYPE_DATE, bd),
        model.getText());
  }

  public void testGetTextBigDecimalNoFormat() throws Exception {
    BigDecimal value = new BigDecimal("12345.67");
    vo.setSalary(value);
    model.setPropertyName("salary");
    assertEquals("salary", value.toString(), model.getText());
  }

  public void testGetTextIntNoFormat() throws Exception {
    int value = 4;
    vo.setDependents(value);
    model.setPropertyName("dependents");
    assertEquals("dependents", "4", model.getText());
  }

  public void testGetTextIntegerNoFormat() throws Exception {
    Integer value = new Integer(5);
    vo.setAnInteger(value);
    model.setPropertyName("anInteger");
    assertEquals("anInteger", "5", model.getText());
  }

  public void testGetTextNullIntegerNoFormat() throws Exception {
    Integer value = null;
    vo.setAnInteger(value);
    model.setPropertyName("anInteger");
    assertEquals("anInteger", "", model.getText());
  }

  public void testGetTextNullStringNoFormat() throws Exception {
    vo.setFullName(null);
    model.setPropertyName("fullName");
    assertEquals("fullName", "", model.getText());
  }

  public void testGetTextBooleanNoFormat() throws Exception {
    vo.setActive(true);
    model.setPropertyName("active");
    assertEquals("fullName", "true", model.getText());
  }

  public void testGetTextNullValueObject() throws Exception {
    holder.setValueObject(null);
    holder.setValueObjectClass(TestValueObject.class);
    model.setPropertyName("fullName");
    assertEquals("fullName", "", model.getText());
  }

  public void testGetTextNullNestedValueObject() throws Exception {
    model.setPropertyName("homeAddress.city");
    assertEquals("homeAddress.city", "", model.getText());
  }

  public void testGetTextNestedValueObject() throws Exception {
    TestAddressValueObject vo2 = new TestAddressValueObject();
    String city = "Juneau";
    vo2.setCity(city);
    vo.setHomeAddress(vo2);
    model.setPropertyName("homeAddress.city");
    assertEquals("homeAddress.city", city, model.getText());
  }


  public void testGetTextStringWithMessageFormat() throws Exception {
    String value = "John Smith";
    MessageFormat format = new MessageFormat("");
    String pattern = "Greetings to the {0} Family";
    vo.setFullName(value);
    model.setPropertyName("fullName");
    model.setFormat(format);
    model.setFormatPattern(pattern);
    assertEquals("fullName", "Greetings to the John Smith Family", model.getText());
  }

  public void testGetTextDateWithFormat() throws Exception {
    SimpleDateFormat format = new SimpleDateFormat();
    String pattern = "MM-dd-yyyy";
    Date bd = new SimpleDateFormat(pattern).parse("05-05-1955");
    vo.setBirthdate(bd);
    model.setPropertyName("birthdate");
    model.setFormat(format);
    model.setFormatPattern(pattern);
    assertEquals("birthdate", "05-05-1955", model.getText());
  }

  public void testGetTextBigDecimalWithFormat() throws Exception {
    DecimalFormat format = new DecimalFormat();
    String pattern = "#,##0.00";
    BigDecimal value = new BigDecimal("12345.67");
    vo.setSalary(value);
    model.setPropertyName("salary");
    model.setFormat(format);
    model.setFormatPattern(pattern);
    assertEquals("salary", "12,345.67", model.getText());
  }

  public void testGetTextIntWithChoiceFormat() throws Exception {
    ChoiceFormat format = new ChoiceFormat("");
    String pattern = "0#No Dependents|1#One Dependent|1<Multiple Dependents";
    vo.setDependents(2);
    model.setPropertyName("dependents");
    model.setFormat(format);
    model.setFormatPattern(pattern);
    assertEquals("dependents", "Multiple Dependents", model.getText());
  }


  public void testSetTextStringNoFormat() throws Exception {
    String value = "John Smith";
    model.setPropertyName("fullName");
    model.setText(value);
    assertEquals("fullName", value, vo.getFullName());
  }

  public void testSetTextDateNoFormat() throws Exception {
    Date value = new Date();
    String textValue = DataTypes.format(DataTypes.TYPE_DATE, value);
    value = (Date)DataTypes.parse(DataTypes.TYPE_DATE, textValue);
    model.setPropertyName("birthdate");
    model.setText(textValue);
    assertEquals("birthdate", value, vo.getBirthdate());
  }

  public void testSetTextBigDecimalNoFormat() throws Exception {
    String textValue = "12345.67";
    BigDecimal value = new BigDecimal(textValue);
    model.setPropertyName("salary");
    model.setText(textValue);
    assertEquals("salary", value, vo.getSalary());
  }

  public void testSetTextNullIntNoFormat() throws Exception {
    model.setPropertyName("dependents");
    try {
      model.setText("");
      fail("Did not throw exception when trying to set primative to null");
    } catch (ModelPropertyAccessorException ex) {
      if (ex.getReason() != ModelPropertyAccessorException.REASON_NULL_VALUE_FOR_PRIMATIVE)
        throw ex;
    }
  }

  public void testSetTextNullIntegerNoFormat() throws Exception {
    model.setPropertyName("anInteger");
    model.setText("");
    assertEquals("anInteger", null, vo.getAnInteger());
  }

  public void testSetTextBoolNoFormat() throws Exception {
    String textValue = "true";
    boolean value = true;
    model.setPropertyName("active");
    model.setText(textValue);
    assertEquals("active", value, vo.isActive());
  }


  public void testSetTextStringWithMessageFormat() throws Exception {
    MessageFormat format = new MessageFormat("");
    String pattern = "Greetings to the {0} Family";
    String textValue = "Greetings to the John Smith Family";
    String value = "John Smith";
    model.setPropertyName("fullName");
    model.setFormat(format);
    model.setFormatPattern(pattern);
    model.setText(textValue);
    assertEquals("fullName", value, vo.getFullName());
  }

  public void testSetTextDateWithSimpleDateFormat() throws Exception {
    SimpleDateFormat format = new SimpleDateFormat();
    String pattern = "MM-dd-yyyy";
    String textValue = "05-05-1955";
    Date value = new SimpleDateFormat(pattern).parse(textValue);
    model.setPropertyName("birthdate");
    model.setFormat(format);
    model.setFormatPattern(pattern);
    model.setText(textValue);
    assertEquals("birthdate", value, vo.getBirthdate());
  }

  public void testSetTextBigDecimalWithFormat() throws Exception {
    DecimalFormat format = new DecimalFormat();
    String pattern = "#,##0.000000";
    String textValue = "12,345.670245";
    BigDecimal value = new BigDecimal("12345.670245");
    model.setPropertyName("salary");
    model.setFormat(format);
    model.setFormatPattern(pattern);
    model.setText(textValue);
    assertEquals("salary", value, vo.getSalary());
  }

  public void testSetTextIntWithChoiceFormat() throws Exception {
    ChoiceFormat format = new ChoiceFormat("");
    String pattern = "0#No Dependents|1#One Dependent|1<Multiple Dependents";
    String textValue = "One Dependent";
    int value = 1;
    vo.setDependents(value);
    model.setPropertyName("dependents");
    model.setFormat(format);
    model.setFormatPattern(pattern);
    model.setText(textValue);
    assertEquals("dependents", value, vo.getDependents());
  }

  public static void main(String[] argv) {
    String[] testCaseList = {DefaultTextModelTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.model.test.VOValueHolderTest
```java
package com.taursys.model.test;

import junit.framework.TestCase;
import com.taursys.model.VOValueHolder;
import com.taursys.model.test.TestValueObject;
import com.taursys.model.ModelException;
import com.taursys.model.ModelInvocationTargetException;
import com.taursys.model.ModelPropertyAccessorException;
import com.taursys.util.DataTypes;
import java.beans.IntrospectionException;
import java.util.Map;

public class VOValueHolderTest extends TestCase {
  private TestVOValueHolder holder;
  private TestValueObject vo;

  public VOValueHolderTest(String _name) {
    super(_name);
  }

  class TestVOValueHolder extends VOValueHolder {
    public Map getPropertyAccessors() {
      return super.getPropertyAccessors();
    }
  }

  protected void setUp() {
    holder = new TestVOValueHolder();
    vo = new TestValueObject();
  }

  protected void tearDown() {
  }

  public void testGetPropertyValueMultiple() throws Exception {
    vo.setFullName("John Smith");
    vo.setActive(true);
    holder.setValueObject(vo);
    assertEquals("FullName", "John Smith", holder.getPropertyValue("fullName"));
    assertEquals("active", Boolean.TRUE, holder.getPropertyValue("active"));
  }

  public void testGetPropertyValueMultipleAccessOfSame() throws Exception {
    vo.setFullName("John Smith");
    holder.setValueObject(vo);
    assertEquals("FullName", "John Smith", holder.getPropertyValue("fullName"));
    assertEquals("FullName", "John Smith", holder.getPropertyValue("fullName"));
    assertEquals("FullName", "John Smith", holder.getPropertyValue("fullName"));
    assertEquals("Size of map", 1, holder.getPropertyAccessors().size());
  }

  public void testGetPropertyValueNullVO() throws Exception {
    holder.setValueObjectClass(TestValueObject.class);
    assertNull("fullName", holder.getPropertyValue("fullName"));
  }

  public void testGetPropertyValueBothNull() throws Exception {
    try {
      holder.getPropertyValue("fullName");
      fail("Expected IntrospectionException");
    } catch (ModelPropertyAccessorException ex) {
      assertEquals("reason",
          ModelPropertyAccessorException.REASON_TARGET_AND_CLASS_ARE_NULL,
          ex.getReason());
      assertEquals("propertyName", "fullName", ex.getPropertyName());
    }
  }

  public void testSetPropertyValue() throws Exception {
    holder.setValueObject(vo);
    String value = "John Smith";
    holder.setPropertyValue("fullName", value);
    assertEquals("FullName", value, vo.getFullName());
  }

  public void testGetJavaDataType() throws Exception {
    holder.setValueObject(vo);
    assertEquals("javaDataType", DataTypes.TYPE_BIGDECIMAL, holder.getJavaDataType("salary"));
  }


  public void testParentValueHolder() throws Exception {
    TestAddressValueObject addr =
        new TestAddressValueObject("Seattle", "WA", "98116");
    vo.setHomeAddress(addr);
    VOValueHolder addrHolder = new VOValueHolder();
    addrHolder.setParentValueHolder(holder);
    addrHolder.setParentPropertyName("homeAddress");
    holder.setObject(vo);
    assertEquals("Address city","Seattle", addrHolder.getPropertyValue("city"));
  }

  public void testParentValueHolderMultiChange() throws Exception {
    TestAddressValueObject addr =
        new TestAddressValueObject("Seattle", "WA", "98116");
    vo.setHomeAddress(addr);
    VOValueHolder addrHolder = new VOValueHolder();
    addrHolder.setParentValueHolder(holder);
    addrHolder.setParentPropertyName("homeAddress");
    holder.setObject(vo);
    assertEquals("Address city","Seattle", addrHolder.getPropertyValue("city"));
    vo.setHomeAddress(new TestAddressValueObject("Tacoma", "WA", "98320"));
    holder.fireContentValueChanged();
    assertEquals("Address city","Tacoma", addrHolder.getPropertyValue("city"));
  }

  public static void main(String[] argv) {
    String[] testCaseList = {VOValueHolderTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.model.test.PropertyAccessorTest
```java
package com.taursys.model.test;

import junit.framework.TestCase;
import com.taursys.model.PropertyAccessor;
import com.taursys.model.ModelException;
import com.taursys.model.ModelPropertyAccessorException;
import com.taursys.model.ModelInvocationTargetException;
import java.util.Date;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.beans.IntrospectionException;

public class PropertyAccessorTest extends TestCase {

  public PropertyAccessorTest(String _name) {
    super(_name);
  }

  protected void setUp() {
  }

  protected void tearDown() {
  }


  public void testConstructorNullValueObjectClass() throws Exception {
    try {
      PropertyAccessor pa = new PropertyAccessor(null, "fullName");
      fail("Did not throw ModelPropertyAccessorException when given a null class");
    }
    catch (ModelPropertyAccessorException ex) {
      assertEquals("reason code",
          ModelPropertyAccessorException.REASON_TARGET_CLASS_IS_NULL,
          ex.getReason());
      assertEquals("Exception propertyName",
          "fullName", ex.getPropertyName());
    }
  }

  public void testConstructorNullPropertyName() throws Exception {
    try {
      PropertyAccessor pa = new PropertyAccessor(TestValueObject.class, null);
      fail("Did not throw ModelPropertyAccessorException when given a null Property Name");
    }
    catch (ModelPropertyAccessorException ex) {
      assertEquals("reason code",
          ModelPropertyAccessorException.REASON_PROPERTY_NAME_MISSING,
          ex.getReason());
      assertEquals("Exception valueObjectClassName",
          "com.taursys.model.test.TestValueObject", ex.getValueObjectClassName());
    }
  }

  public void testConstructorBlankPropertyName() throws Exception {
    try {
      PropertyAccessor pa = new PropertyAccessor(TestValueObject.class, "");
      fail("Did not throw ModelPropertyAccessorException when given a blank Property Name");
    }
    catch (ModelPropertyAccessorException ex) {
      assertEquals("reason code",
          ModelPropertyAccessorException.REASON_PROPERTY_NAME_MISSING,
          ex.getReason());
      assertEquals("Exception valueObjectClassName",
          "com.taursys.model.test.TestValueObject", ex.getValueObjectClassName());
    }
  }

  public void testConstructorInvalidPropertyName() throws Exception {
    try {
      PropertyAccessor pa = new PropertyAccessor(TestValueObject.class, "height");
      fail("Did not throw ModelPropertyAccessorException when given an invalid Property Name");
    }
    catch (ModelPropertyAccessorException ex) {
      assertEquals("reason code",
          ModelPropertyAccessorException.REASON_PROPERTY_NOT_FOUND,
          ex.getReason());
      assertEquals("Exception valueObjectClassName",
          "com.taursys.model.test.TestValueObject", ex.getValueObjectClassName());
      assertEquals("Exception propertyName",
          "height", ex.getPropertyName());
    }
  }


  public void testGetPropertyValueString() throws Exception {
    TestValueObject vo = new TestValueObject();
    String value = "John Smith";
    vo.setFullName(value);
    PropertyAccessor pa = new PropertyAccessor(vo.getClass(), "fullName");
    assertEquals("fullName", value, pa.getPropertyValue(vo));
  }

  public void testGetPropertyValueNullValueObject() throws Exception {
    PropertyAccessor pa = new PropertyAccessor(TestValueObject.class, "fullName");
    assertEquals("fullName", null, pa.getPropertyValue(null));
  }


  public void testGetPropertyValueWrongVOClass() throws Exception {
    TestAddressValueObject vo = new TestAddressValueObject();
    vo.setCreateDate(new Date(System.currentTimeMillis()+1000));
    PropertyAccessor pa = new PropertyAccessor(TestValueObject.class, "createDate");
    try {
      pa.getPropertyValue(vo);
      fail("Expected ModelPropertyAccessorException");
    } catch (ModelPropertyAccessorException ex) {
      assertEquals("reason code",
          ModelPropertyAccessorException.REASON_ILLEGAL_ARGUMENT_EXCEPTION,
          ex.getReason());
      assertEquals("Exception valueObjectClassName",
          "com.taursys.model.test.TestValueObject", ex.getValueObjectClassName());
      assertEquals("Exception propertyName",
          "createDate", ex.getPropertyName());
      assertEquals("methodName", "getCreateDate", ex.getMethodName());
    }
  }


  public void testSetPropertyValueString() throws Exception {
    TestValueObject vo = new TestValueObject();
    String value = "John Smith";
    PropertyAccessor pa = new PropertyAccessor(vo.getClass(), "fullName");
    pa.setPropertyValue(vo, value);
    assertEquals("fullName", value, vo.getFullName());
  }

  public void testSetPropertyValueNullValueObject() throws Exception {
    try {
      String value = "John Smith";
      PropertyAccessor pa = new PropertyAccessor(TestValueObject.class, "fullName");
      pa.setPropertyValue(null, value);
      fail("Expected ModelPropertyAccessorException did not occur");
    } catch (ModelPropertyAccessorException ex) {
      assertEquals("reason code",
          ModelPropertyAccessorException.REASON_TARGET_IS_NULL,
          ex.getReason());
      assertEquals("Exception propertyName",
          "fullName", ex.getPropertyName());
      assertEquals("Exception ValueObjectClassName",
          "com.taursys.model.test.TestValueObject", ex.getValueObjectClassName());
    }
  }

  public void testSetPropertyValueWrongVOClass() throws Exception {
    TestAddressValueObject vo = new TestAddressValueObject();
    PropertyAccessor pa = new PropertyAccessor(TestValueObject.class, "createDate");
    try {
      pa.setPropertyValue(vo, new Date());
      fail("Expected ModelPropertyAccessorException");
    } catch (ModelPropertyAccessorException ex) {
      assertEquals("reason code",
          ModelPropertyAccessorException.REASON_ILLEGAL_ARGUMENT_EXCEPTION,
          ex.getReason());
      assertEquals("Exception valueObjectClassName",
          "com.taursys.model.test.TestValueObject", ex.getValueObjectClassName());
      assertEquals("Exception propertyName",
          "createDate", ex.getPropertyName());
      assertEquals("methodName", "setCreateDate", ex.getMethodName());
    }
  }

  public void testSetPropertyValueWrongValueClass() throws Exception {
    TestAddressValueObject vo = new TestAddressValueObject();
    PropertyAccessor pa = new PropertyAccessor(TestAddressValueObject.class, "createDate");
    try {
      pa.setPropertyValue(vo, "John Smith");
      fail("Expected ModelPropertyAccessorException");
    } catch (ModelPropertyAccessorException ex) {
      assertEquals("reason code",
          ModelPropertyAccessorException.REASON_ILLEGAL_ARGUMENT_EXCEPTION,
          ex.getReason());
      assertEquals("Exception valueObjectClassName",
          "com.taursys.model.test.TestAddressValueObject", ex.getValueObjectClassName());
      assertEquals("Exception propertyName",
          "createDate", ex.getPropertyName());
      assertEquals("methodName", "setCreateDate", ex.getMethodName());
    }
  }

  public static void main(String[] argv) {
    String[] testCaseList = {PropertyAccessorTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.model.test.TestAddressValueObject
```java
package com.taursys.model.test;

public class TestAddressValueObject {
  private String address1;
  private String address2;
  private String city;
  private String state;
  private String zip;
  private java.util.Date createDate;

  public TestAddressValueObject() {
  }
  public TestAddressValueObject(String newCity, String newState, String newZip) {
    zip = newZip;
    city = newCity;
    state = newState;
  }
  public String getAddress1() {
    return address1;
  }
  public void setAddress1(String newAddress1) {
    address1 = newAddress1;
  }
  public void setAddress2(String newAddress2) {
    address2 = newAddress2;
  }
  public String getAddress2() {
    return address2;
  }
  public void setCity(String newCity) {
    city = newCity;
  }
  public String getCity() {
    return city;
  }
  public void setState(String newState) {
    state = newState;
  }
  public String getState() {
    return state;
  }
  public void setZip(String newZip) {
    zip = newZip;
  }
  public String getZip() {
    return zip;
  }
  public void setCreateDate(java.util.Date newCreateDate) {
    createDate = newCreateDate;
  }
  public java.util.Date getCreateDate() {
    return createDate;
  }
}
```

File: com.taursys.model.test.WillRiker
```java
package com.taursys.model.test;

import java.text.*;
import java.util.*;
import java.math.*;

public class WillRiker extends com.taursys.model.test.TestValueObject {

  public WillRiker() {
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }
  private void jbInit() throws Exception {
    DateFormat df = SimpleDateFormat.getDateInstance(DateFormat.SHORT);
    this.setFullName("William T Riker");
    this.setActive(true);
    this.setBirthdate(df.parse("08/15/2003"));
    this.setCreateDate(df.parse("01/01/2000"));
    this.setDependents(0);
    this.setSalary(BigDecimal.valueOf(3000L));
  }
}
```

File: com.taursys.model.test.JeanLucPicard
```java
package com.taursys.model.test;

import java.text.*;
import java.util.*;
import java.math.*;

public class JeanLucPicard extends com.taursys.model.test.TestValueObject {

  public JeanLucPicard() {
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }
  private void jbInit() throws Exception {
    DateFormat df = SimpleDateFormat.getDateInstance(DateFormat.SHORT);
    this.setFullName("Jean Luc Picard");
    this.setActive(true);
    this.setBirthdate(df.parse("03/12/2002"));
    this.setCreateDate(df.parse("01/01/2000"));
    this.setDependents(1);
    this.setSalary(BigDecimal.valueOf(4000L));
  }
}
```

File: com.taursys.model.test.VOCollectionValueHolderTest
```java
package com.taursys.model.test;

import junit.framework.TestCase;
import com.taursys.model.VOCollectionValueHolder;
import java.util.ArrayList;
import java.util.Collection;

public class VOCollectionValueHolderTest extends TestCase {
  private ArrayList list = new ArrayList();
  TestValueObject vo1 = new TestValueObject();
  TestValueObject vo2 = new TestValueObject();
  VOCollectionValueHolder holder = new VOCollectionValueHolder();

  public VOCollectionValueHolderTest(String _name) {
    super(_name);
  }

  protected void setUp() {
    vo1.setFullName("First Object");
    list.add(vo1);
    vo2.setFullName("Second Object");
    list.add(vo2);
  }

  protected void tearDown() {
  }

  public void testIterateList() {
    holder.setCollection(list);
    assertTrue("hasNext", holder.hasNext());
    holder.next();
    assertEquals("VO 1", vo1, holder.getObject());
    holder.next();
    assertEquals("VO 2", vo2, holder.getObject());
    assertEquals("2nd check of VO 2", vo2, holder.getObject());
  }

  public void testInitialState() {
    holder.setCollection(list);
    assertNull("VO is null", holder.getObject());
  }

  public void testReset() {
    holder.setCollection(list);
    holder.hasNext();
    holder.next();
    holder.reset();
    assertNull("VO is null", holder.getObject());
  }

  public static void main(String[] argv) {
    String[] testCaseList = {VOCollectionValueHolderTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.model.test.VOComparatorTest
```java
package com.taursys.model.test;

import junit.framework.TestCase;
import com.taursys.model.*;

public class VOComparatorTest extends TestCase {
  VOValueHolder holder;
  VOComparator comparator;
  TestValueObject vo1;
  TestValueObject vo2;


  public VOComparatorTest(String _name) {
    super(_name);
  }

  protected void setUp() {
    holder = new VOValueHolder();
    holder.setValueObjectClass(TestValueObject.class);
    comparator = new VOComparator();
    comparator.setVOValueHolder(holder);
    vo1 = new BeverlyCrusher();
    vo2 = new JeanLucPicard();
  }

  protected void tearDown() {
  }

  public void testCompareInvalidProperty() {
    comparator.setPropertyName("xxxx");
    assertEquals("sort direction", 0, comparator.compare(vo1, vo2));
  }

  public void testComparePropertiesNull() {
    comparator.setPropertyNames(null);
    assertEquals("sort direction", 0, comparator.compare(vo1, vo2));
  }

  public void testComparePropertiesEmpty() {
    comparator.setPropertyNames(new String[] {});
    assertEquals("sort direction", 0, comparator.compare(vo1, vo2));
  }

  public void testCompareHolderNull() {
    comparator.setPropertyName("fullName");
    comparator.setVOValueHolder(null);
    assertEquals("sort direction", 0, comparator.compare(vo1, vo2));
  }

  public void testCompareNullPropertyName() {
    comparator.setPropertyName(null);
    assertEquals("sort direction", 0, comparator.compare(vo1, vo2));
  }

  public void testCompareFirstNull() {
    comparator.setPropertyName("fullName");
    assertEquals("sort direction", -1, comparator.compare(null, vo2));
  }

  public void testCompareSecondNull() {
    comparator.setPropertyName("fullName");
    assertEquals("sort direction", 1, comparator.compare(vo1, null));
  }

  public void testCompareBothNull() {
    comparator.setPropertyName("fullName");
    assertEquals("sort direction", 0, comparator.compare(null, null));
  }

  public void testCompareSinglePropertyAsc() {
    comparator.setPropertyName("fullName");
    assertTrue("sort direction negative", comparator.compare(vo1, vo2) < 0);
  }

  public void testCompareSinglePropertyAscEqual() {
    comparator.setPropertyName("createDate");
    assertEquals("sort direction", 0, comparator.compare(vo1, vo2));
  }

  public void testCompareSinglePropertyAscFirstNull() {
    vo1.setCreateDate(null);
    comparator.setPropertyName("createDate");
    assertEquals("sort direction", -1, comparator.compare(vo1, vo2));
  }

  public void testCompareSinglePropertyAscSecondNull() {
    vo2.setCreateDate(null);
    comparator.setPropertyName("createDate");
    assertEquals("sort direction", 1, comparator.compare(vo1, vo2));
  }

  public void testCompareSinglePropertyAscBothNull() {
    vo1.setCreateDate(null);
    vo2.setCreateDate(null);
    comparator.setPropertyName("createDate");
    assertEquals("sort direction", 0, comparator.compare(vo1, vo2));
  }

  public void testCompareSinglePropertyDsc() {
    comparator.setPropertyName("fullName");
    comparator.setAscendingOrder(false);
    assertTrue("sort direction positive", comparator.compare(vo1, vo2) > 0);
  }

  public void testCompareMultiplePropertiesAscFirstPropEqual() {
    comparator.setPropertyNames(new String[] {"createDate","salary"});
    assertEquals("sort direction", -1, comparator.compare(vo1, vo2));
  }

  public void testCompareMultiplePropertiesAscSecondPropEqual() {
    comparator.setPropertyNames(new String[] {"salary", "createDate"});
    assertEquals("sort direction", -1, comparator.compare(vo1, vo2));
  }

  public void testCompareMultiplePropertiesMixedAllSpecified() {
    comparator.setPropertyNames(new String[] {"salary", "birthdate"});
    comparator.setAscendingOrders(new boolean[] {false, true});
    assertEquals("sort direction", 1, comparator.compare(vo1, vo2));
  }

  public void testCompareMultiplePropertiesMixedFirstSpecified() {
    comparator.setPropertyNames(new String[] {"salary", "birthdate"});
    comparator.setAscendingOrders(new boolean[] {false});
    assertEquals("sort direction", 1, comparator.compare(vo1, vo2));
  }

  public static void main(String[] argv) {
    String[] testCaseList = {VOComparatorTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.model.event.ContentChangeEvent
```java
package com.taursys.model.event;

import com.taursys.model.ValueHolder;
import javax.swing.event.ChangeEvent;

public class ContentChangeEvent extends ChangeEvent {
  private boolean contentNull = false;

  public ContentChangeEvent(ValueHolder source, boolean contentNull) {
    super(source);
    this.contentNull = contentNull;
  }

  public ContentChangeEvent(ValueHolder source) {
    super(source);
  }

  public boolean isContentNull() {
    return contentNull;
  }
}
```

File: com.taursys.model.event.ContentValueChangeEvent
```java
package com.taursys.model.event;

import com.taursys.model.ValueHolder;

public class ContentValueChangeEvent extends ContentChangeEvent {
  private String propertyName;
  private Object oldValue;
  private Object newValue;

  public ContentValueChangeEvent(ValueHolder source, String propertyName,
      Object oldvalue, Object newValue) {
    super(source);
    this.propertyName = propertyName;
    this.oldValue = oldValue;
    this.newValue = newValue;
  }

  public String getPropertyName() {
    return propertyName;
  }

  public Object getOldValue() {
    return oldValue;
  }

  public Object getNewValue() {
    return newValue;
  }
}
```

File: com.taursys.model.event.StructureChangeEvent
```java
package com.taursys.model.event;

public class StructureChangeEvent extends javax.swing.event.ChangeEvent {

  public StructureChangeEvent(Object source) {
    super(source);
  }
}
```

File: com.taursys.model.event.ListContentChangeEvent
```java
package com.taursys.model.event;

import com.taursys.model.ListValueHolder;
import javax.swing.event.ChangeEvent;

public class ListContentChangeEvent extends ContentChangeEvent {

  public ListContentChangeEvent(ListValueHolder source, boolean contentNull) {
    super(source, contentNull);
  }
}
```

File: com.taursys.dom.AbstractWriter
```java
package com.taursys.dom;

import java.io.OutputStream;
import java.io.Writer;
import org.w3c.dom.Document;

public abstract class AbstractWriter {

  public AbstractWriter() {
  }

  public abstract void write(Document doc, OutputStream stream);

  public abstract void write(Document doc, Writer writer);
}
```

File: com.taursys.dom.DOM_1_20000929_DocumentAdapter
```java
package com.taursys.dom;

import org.w3c.dom.Element;
import org.w3c.dom.Document;
import org.w3c.dom.Text;
import java.util.Hashtable;
import org.w3c.dom.Node;
import org.w3c.dom.NamedNodeMap;
import java.io.OutputStream;
import java.io.Writer;

public class DOM_1_20000929_DocumentAdapter implements DocumentAdapter {
  private Document doc;
  private Hashtable identifierMap;
  private String defaultIdentifier = "id";
  private AbstractWriter xmlWriter;

  public DOM_1_20000929_DocumentAdapter(Document newDoc) {
    setDocument(newDoc);
    xmlWriter = createDefaultWriter();
  }

  public void write(OutputStream stream) {
    xmlWriter.write(doc, stream);
  }

  public void write(Writer writer) {
    xmlWriter.write(doc, writer);
  }

  public Element getElementById(String elementId) {
    if (elementId != null)
      return (Element)identifierMap.get(elementId);
    else
      return null;
  }

  public void setElementText(String elementId, String value) {
    setElementText(getElementById(elementId), value);
  }

  public void setAttributeText(String elementId, String attribute, String value) {
    Element element = getElementById(elementId);
    if (element != null) {
      if (value == null)
        value = "";
      element.setAttribute(attribute, value);
    }
  }

  public Document getDocument() {
    return doc;
  }

  public void setDocument(Document newDoc) {
    doc = newDoc;
    identifierMap = new Hashtable();
    mapIdentifiers(doc);
  }

  protected void mapIdentifiers(Node parent) {
    Node child = parent.getFirstChild();
    while (child != null) {
      if (child.getNodeType() == Node.ELEMENT_NODE) {
        String id = ((Element)child).getAttribute(defaultIdentifier);
        if (id != null && id.length() > 0) {
          identifierMap.put(id, (Element)child);
        }
        mapIdentifiers(child);
      }
      child = child.getNextSibling();
    }
  }

  public static String getAttribute(String attributeName, Node node) {
    NamedNodeMap attribs = node.getAttributes();
    if (attribs != null) {
      Node idNode = attribs.getNamedItem(attributeName);
      if (idNode != null)
        return idNode.getNodeValue();
    }
    return null;
  }

  public static void setElementText(Element element, String value) {
    if (element != null) {
      if (value == null)
        value = "";
      Text textNode = findFirstTextNode(element);
      if (textNode != null) {
        textNode.setData(value);
      } else {
        textNode = element.getOwnerDocument().createTextNode(value);
        element.appendChild(textNode);
      }
    }
  }

  public static String getElementText(Element element) {
    if (element != null) {
      Text textNode = findFirstTextNode(element);
      if (textNode != null) {
        return textNode.getData();
      }
    }
    return null;
  }

  public static org.w3c.dom.Text findFirstTextNode(Element ele) {
    Node child = ele.getFirstChild();
    while (child != null) {
      if (child.getNodeType() == Node.TEXT_NODE) {
        return (org.w3c.dom.Text)child;
      }
      child = child.getNextSibling();
    }
    return null;
  }

  public static boolean hasChildElements(Element parent) {
    Node child = parent.getFirstChild();
    while (child != null) {
      if (child.getNodeType() == Node.ELEMENT_NODE)
        return true;
      child = child.getNextSibling();
    }
    return false;
  }

  protected AbstractWriter createDefaultWriter() {
    if (doc.getDocumentElement().getNodeName().toLowerCase().equals("html")) {
      return new HTMLWriter();
    } else {
      return new XMLWriter();
    }
  }

  public void setXMLWriter(AbstractWriter newXMLWriter) {
    xmlWriter = newXMLWriter;
  }

  public AbstractWriter getXMLWriter() {
    return xmlWriter;
  }
}
```

File: com.taursys.dom.DocumentAdapter
```java
package com.taursys.dom;

import org.w3c.dom.Element;
import org.w3c.dom.Document;
import java.io.OutputStream;
import java.io.Writer;

public interface DocumentAdapter {

  public void write(OutputStream stream);

  public void write(Writer writer);

  public void setElementText(String elementId, String value);

  public void setAttributeText(String elementId, String attribute, String value);

  public Element getElementById(String elementId);

  public Document getDocument();
}
```

File: com.taursys.dom.XMLWriter
```java
package com.taursys.dom;

import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.io.PrintWriter;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.DocumentType;

public class XMLWriter extends AbstractWriter {
  protected PrintWriter printWriter;

  public XMLWriter() {
  }

  public void write(Document doc, OutputStream stream) {
    Writer writer = new OutputStreamWriter(stream);
    printWriter = new PrintWriter(writer);
    write(doc);
  }

  public void write(Document doc, Writer writer) {
    printWriter = writer instanceof PrintWriter
      ? (PrintWriter)writer : new PrintWriter(writer);
    write(doc);
  }


  protected void write(Node node) {

    if (node == null) {
        return;
    }

    short type = node.getNodeType();
    switch (type) {
      case Node.DOCUMENT_NODE: {
        Document document = (Document)node;
        if (document.getDoctype() != null) {
          DocumentType docType = document.getDoctype();
          printWriter.print("<!DOCTYPE");
          printWriter.print(" " + docType.getName());
          printWriter.print(" PUBLIC \"" + docType.getPublicId() + "\"");
          printWriter.print(" \"" + docType.getSystemId() + "\"");
          printWriter.println(">");
          printWriter.flush();
        }
        write(document.getDocumentElement());
        break;
      }

      case Node.ELEMENT_NODE: {
        writeElementNode(node);
        break;
      }

      case Node.COMMENT_NODE: {
        printWriter.print("<!--");
        String data = node.getNodeValue();
        if (data != null && data.length() > 0) {
          printWriter.print(' ');
          printWriter.print(data);
        }
        printWriter.println("-->");
        printWriter.flush();
        break;
      }

      case Node.ENTITY_REFERENCE_NODE: {
        printWriter.print('&');
        printWriter.print(node.getNodeName());
        printWriter.print(';');
        printWriter.flush();
        break;
      }

      case Node.CDATA_SECTION_NODE: {
        printWriter.print("<![CDATA[");
        printWriter.print(node.getNodeValue());
        printWriter.print("]]>");
        printWriter.flush();
        break;
      }

      case Node.TEXT_NODE: {
        normalizeAndPrint(node.getNodeValue());
        printWriter.flush();
        break;
      }

      case Node.PROCESSING_INSTRUCTION_NODE: {
        printWriter.print("<?");
        printWriter.print(node.getNodeName());
        String data = node.getNodeValue();
        if (data != null && data.length() > 0) {
          printWriter.print(' ');
          printWriter.print(data);
        }
        printWriter.println("?>");
        printWriter.flush();
        break;
      }
    }
  }

  protected void writeElementNode(Node node) {
    Node child = node.getFirstChild();
    if (child != null) {
      printWriter.print('<');
      printWriter.print(node.getNodeName());
      writeAttributes(node);
      printWriter.print('>');
      printWriter.flush();
      while (child != null) {
        write(child);
        child = child.getNextSibling();
      }
      printWriter.print("</" + node.getNodeName() + '>');
    } else {
      writeEmptyElementNode(node);
    }
    printWriter.flush();
  }

  protected void writeEmptyElementNode(Node node) {
    printWriter.print('<');
    printWriter.print(node.getNodeName());
    writeAttributes(node);
    printWriter.print("></" + node.getNodeName() + '>');
  }

  protected void writeAttributes(Node node) {
    Attr attrs[] = sortAttributes(node.getAttributes());
    for (int i = 0; i < attrs.length; i++) {
      Attr attr = attrs[i];
      printWriter.print(' ');
      printWriter.print(attr.getNodeName());
      printWriter.print("=\"");
      normalizeAndPrint(attr.getNodeValue());
      printWriter.print('"');
    }
  }

  protected Attr[] sortAttributes(NamedNodeMap attrs) {
    int len = (attrs != null) ? attrs.getLength() : 0;
    Attr array[] = new Attr[len];
    for (int i = 0; i < len; i++) {
      array[i] = (Attr)attrs.item(i);
    }
    for (int i = 0; i < len - 1; i++) {
      String name = array[i].getNodeName();
      int index = i;
      for (int j = i + 1; j < len; j++) {
        String curName = array[j].getNodeName();
        if (curName.compareTo(name) < 0) {
          name = curName;
          index = j;
        }
      }
      if (index != i) {
        Attr temp = array[i];
        array[i] = array[index];
        array[index] = temp;
      }
    }
    return array;
  }

  protected void normalizeAndPrint(String s) {
    int len = (s != null) ? s.length() : 0;
    for (int i = 0; i < len; i++) {
      char c = s.charAt(i);
      normalizeAndPrint(c);
    }
  }

  protected void normalizeAndPrint(char c) {
    switch (c) {
      case '<': {
        printWriter.print("&lt;");
        break;
      }
      case '>': {
        printWriter.print("&gt;");
        break;
      }
      case '&': {
        printWriter.print("&amp;");
        break;
      }
      case '"': {
        printWriter.print("&quot;");
        break;
      }
      case '\r':
      case '\n': {
      }
      default: {
        printWriter.print(c);
      }
    }
  }
}
```

File: com.taursys.dom.HTMLWriter
```java
package com.taursys.dom;

import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.DocumentType;
import java.util.Arrays;
import java.util.List;

public class HTMLWriter extends com.taursys.dom.XMLWriter {
  private static final String[] SINGLE_TAGS = new String[] {
    "area",
    "base",
    "br",
    "col",
    "hr",
    "img",
    "input",
    "link",
    "meta",
    "param"
  };
  protected List tags = null;

  public HTMLWriter() {
    tags = Arrays.asList(SINGLE_TAGS);
  }

  protected void writeEmptyElementNode(Node node) {
    printWriter.print('<');
    printWriter.print(node.getNodeName());
    writeAttributes(node);
    if (tags.contains(node.getNodeName().toLowerCase())) {
        printWriter.print('>');
    } else {
      printWriter.print("></" + node.getNodeName() + '>');
    }
  }
}
```

File: com.taursys.dom.test.DOM_1_20000929_DocumentAdapterTest
```java
package com.taursys.dom.test;

import junit.framework.TestCase;
import com.taursys.dom.*;
import org.xml.sax.InputSource;
import org.apache.xerces.parsers.DOMParser;
import java.io.*;
import org.w3c.dom.*;

public class DOM_1_20000929_DocumentAdapterTest extends TestCase {
  DOM_1_20000929_DocumentAdapter adapter = null;

  public DOM_1_20000929_DocumentAdapterTest(String _name) {
    super(_name);
  }

  protected void setUp() {
  }

  protected void tearDown() {
  }

  protected byte[] getEmptyXMLDocBytes() {
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    PrintWriter writer = new PrintWriter(bos);
    writer.println("<marty>");
    writer.println("</marty>");
    writer.flush();
    writer.close();
    return bos.toByteArray();
  }

  protected byte[] getHTMLDoc1Bytes() {
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    PrintWriter writer = new PrintWriter(bos);

    writer.println("<html>");
    writer.println("  <head>");
    writer.println("    <title>Test</title>");
    writer.println("  </head>");
    writer.println("  <body>");
    writer.println("    <h1>Test</h1>");
    writer.println("    <p id=\"p1\">Test</p>");
    writer.println("    <p id=\"p2\">Test</p>");
    writer.println("  </body>");
    writer.println("</html>");
    writer.flush();
    writer.close();
    return bos.toByteArray();
  }

  protected byte[] getXHTMLBytes() {
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    PrintWriter writer = new PrintWriter(bos);

    writer.println(
        "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" "
        + "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
    writer.println("<html xmlns=\"http://www.w3.org/1999/xhtml\">");

    writer.println("  <head>");
    writer.println("    <title>Test</title>");
    writer.println("  </head>");
    writer.println("  <body>");
    writer.println("    <h1>Test</h1>");
    writer.println("    <p id=\"p1\">Test</p>");
    writer.println("    <p id=\"p2\">Test</p>");
    writer.println("  </body>");
    writer.println("</html>");
    writer.flush();
    writer.close();
    return bos.toByteArray();
  }

  protected byte[] getHTMLNoXMLBytes() {
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    PrintWriter writer = new PrintWriter(bos);
    writer.println("<html>");
    writer.println("  <head>");
    writer.println("    <title>Test</title>");
    writer.println("  </head>");
    writer.println("  <body>");
    writer.println("    <h1>Test</h1>");
    writer.println("    <p id=\"p3\">Test</p>");
    writer.println("  </body>");
    writer.println("</html>");
    writer.flush();
    writer.close();
    return bos.toByteArray();
  }

  protected byte[] getHTMLWithEndingSlash() {
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    PrintWriter writer = new PrintWriter(bos);
    writer.println("<html>");
    writer.println("  <head>");
    writer.println("    <title>Test</title>");
    writer.println("  </head>");
    writer.println("  <body>");
    writer.println("    <h1>Test</h1>");
    writer.println("    <br/>");
    writer.println("    <img alt=\"img\" src=\"img.gif\"/>");
    writer.println("  </body>");
    writer.println("</html>");
    writer.flush();
    writer.close();
    return bos.toByteArray();
  }

  protected byte[] getHTMLWithoutEndingSlash() {
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    PrintWriter writer = new PrintWriter(bos);
    writer.println("<html>");
    writer.println("  <head>");
    writer.println("    <title>Test</title>");
    writer.println("  </head>");
    writer.println("  <body>");
    writer.println("    <h1>Test</h1>");
    writer.println("    <br>");
    writer.println("    <img alt=\"img\" src=\"img.gif\">");
    writer.println("  </body>");
    writer.println("</html>");
    writer.flush();
    writer.close();
    return bos.toByteArray();
  }

  protected Document getDocumentFromBytes(byte[] bytes) throws Exception {
    DOMParser parser = new DOMParser();
    InputSource is = new InputSource(new ByteArrayInputStream(bytes));
    parser.parse(is);
    return parser.getDocument();
  }

  protected Attr[] sortAttributes(NamedNodeMap attrs) {
    int len = (attrs != null) ? attrs.getLength() : 0;
    Attr array[] = new Attr[len];
    for (int i = 0; i < len; i++) {
      array[i] = (Attr)attrs.item(i);
    }
    for (int i = 0; i < len - 1; i++) {
      String name = array[i].getNodeName();
      int index = i;
      for (int j = i + 1; j < len; j++) {
        String curName = array[j].getNodeName();
        if (curName.compareTo(name) < 0) {
          name = curName;
          index = j;
        }
      }
      if (index != i) {
        Attr temp = array[i];
        array[i] = array[index];
        array[index] = temp;
      }
    }
    return array;
  }

  protected void dump(Document doc) {
    System.out.println("Begin dump ===========================================");
    dump(doc,"");
    System.out.println("End dump ===========================================");
  }

  protected void dump(Node node, String level) {
    System.out.print(level);
    System.out.print(node.getNodeName());
    Attr attrs[] = sortAttributes(node.getAttributes());
    for (int i = 0; i < attrs.length; i++) {
      Attr attr = attrs[i];
      System.out.print(' ');
      System.out.print(attr.getNodeName());
      System.out.print("=");
      System.out.print(attr.getNodeValue());
    }
    System.out.println(" value=" + node.getNodeValue());

    Node child = node.getFirstChild();
    while (child != null) {
      dump(child, level+"  ");
      child = child.getNextSibling();
    }
  }

  protected void dumpDocInfo(Document document) {
    System.out.println(">>>>>>>>>>>>>>>>>>>>>>");
    System.out.println("Doc localName=" + document.getLocalName());
    System.out.println("Doc prefix=" + document.getPrefix());
    System.out.println("Doc namespaceURI=" + document.getNamespaceURI());
    System.out.println("Doc nodeName=" + document.getNodeName());
    System.out.println("Doc documentElement.nodeName=" + document.getDocumentElement().getNodeName());
    DocumentType docType = document.getDoctype();
    System.out.println("Doc type=" + docType);
    if (docType != null) {
      System.out.println("  DocType name=" +  docType.getName());
      System.out.println("  DocType localName=" +  docType.getLocalName());
      System.out.println("  DocType namespaceURI=" +  docType.getNamespaceURI());
      System.out.println("  DocType nodeName=" +  docType.getNodeName());
      System.out.println("  DocType nodeValue=" +  docType.getNodeValue());
      System.out.println("  DocType prefix=" +  docType.getPrefix());
      System.out.println("  DocType publicId=" +  docType.getPublicId());
      System.out.println("  DocType systemId=" +  docType.getSystemId());
    }
  }

  protected void parseWrite(byte[] bytes) throws Exception {
    parseWrite(bytes, bytes);
  }

  protected void parseWrite(byte[] sourceBytes, byte[] expectedBytes)
      throws Exception {
    Document doc = getDocumentFromBytes(sourceBytes);
    adapter = new DOM_1_20000929_DocumentAdapter(doc);
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    adapter.write(bos);
    BufferedReader resultsReader = new BufferedReader(
      new InputStreamReader(new ByteArrayInputStream(bos.toByteArray())));
    BufferedReader expectedReader = new BufferedReader(
      new InputStreamReader(new ByteArrayInputStream(expectedBytes)));
    String expected;
    int i = 0;
    while ((expected = expectedReader.readLine()) != null) {
      assertEquals("Contents line #" + i, expected, resultsReader.readLine());
      i++;
    }
  }


  public void testCreate() throws Exception {
    Document doc = getDocumentFromBytes(getHTMLDoc1Bytes());
    adapter = new DOM_1_20000929_DocumentAdapter(doc);
    assertEquals("Document", doc, adapter.getDocument());
    assertNotNull("p2 Element not found", adapter.getElementById("p2"));
  }

  public void testSetDocument() throws Exception {
    Document doc = getDocumentFromBytes(getEmptyXMLDocBytes());
    adapter = new DOM_1_20000929_DocumentAdapter(doc);
    doc = getDocumentFromBytes(getHTMLDoc1Bytes());
    adapter.setDocument(doc);
    assertEquals("Document", doc, adapter.getDocument());
    assertNotNull("p2 Element not found", adapter.getElementById("p2"));
  }

  public void testWrite_HTML() throws Exception {
    parseWrite(getHTMLDoc1Bytes());
  }

  public void testWrite_XHTML() throws Exception {
    parseWrite(getXHTMLBytes());
  }

  public void testWrite_HTMLNoXML() throws Exception {
    parseWrite(getHTMLNoXMLBytes());
  }

  public void testWrite_HTMLWithoutEndingSlash() throws Exception {
    parseWrite(getHTMLWithEndingSlash(), getHTMLWithoutEndingSlash());
  }

  public static void main(String[] argv) {
    String[] testCaseList = {DOM_1_20000929_DocumentAdapterTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseList);
  }
}
```

File: com.taursys.debug.VelocitySimpleLogger
```java
package com.taursys.debug;

import org.apache.velocity.runtime.RuntimeServices;
import org.apache.velocity.runtime.log.LogSystem;

public class VelocitySimpleLogger implements LogSystem {

  public VelocitySimpleLogger() {
  }

  public void init(RuntimeServices parm1) throws java.lang.Exception {
  }

  public void logVelocityMessage(int level, String msg) {
    switch (level) {
      case LogSystem.DEBUG_ID:
        Debug.log(Debug.DEBUG, msg);
        break;
      case LogSystem.INFO_ID:
        Debug.log(Debug.INFO, msg);
        break;
      case LogSystem.WARN_ID:
        Debug.log(Debug.WARN, msg);
        break;
      case LogSystem.ERROR_ID:
        Debug.log(Debug.ERROR, msg);
        break;
      default:
        Debug.log(Debug.INFO, msg);
        break;
    }
  }
}
```

File: com.taursys.debug.LoggerAdapter
```java
package com.taursys.debug;

public interface LoggerAdapter {

  public void debug(Object message);

  public void debug(Object message, Throwable t);

  public void info(Object message);

  public void info(Object message, Throwable t);

  public void warn(Object message);

  public void warn(Object message, Throwable t);

  public void error(Object message);

  public void error(Object message, Throwable t);

  public void fatal(Object message);

  public void fatal(Object message, Throwable t);

  public boolean isDebugEnabled();

  public boolean isInfoEnabled();

  public boolean isEnabledFor(int level);

  public void log(int level, Object message);

  public void log(int level, Object message, Throwable t);
}
```

File: com.taursys.debug.SimpleLogger
```java
package com.taursys.debug;

import java.util.Date;

public class SimpleLogger implements LoggerAdapter {
  private int level = Debug.DEBUG;

  public SimpleLogger() {
  }

  public SimpleLogger(int level) {
    if (level < 0 || level > Debug.DEBUG)
      throw new IllegalArgumentException("Invalid logging level - " + level);
    this.level = level;
  }

  public void debug(Object message) {
    log(Debug.DEBUG, message);
  }

  public void debug(Object message, Throwable t) {
    log(Debug.DEBUG, message, t);
  }

  public void info(Object message) {
    log(Debug.INFO, message);
  }

  public void info(Object message, Throwable t) {
    log(Debug.INFO, message, t);
  }

  public void warn(Object message) {
    log(Debug.WARN, message);
  }

  public void warn(Object message, Throwable t) {
    log(Debug.WARN, message, t);
  }

  public void error(Object message) {
    log(Debug.ERROR, message);
  }

  public void error(Object message, Throwable t) {
    log(Debug.ERROR, message, t);
  }

  public void fatal(Object message) {
    log(Debug.FATAL, message);
  }

  public void fatal(Object message, Throwable t) {
    log(Debug.FATAL, message, t);
  }

  public boolean isDebugEnabled() {
    return level == Debug.DEBUG;
  }

  public boolean isInfoEnabled() {
    return level >= Debug.WARN;
  }

  public boolean isEnabledFor(int level) {
    return this.level >= level;
  }

  public void log(int level, Object message) {
    if (this.level >= level) {
      printMessage(level, message);
    }
  }

  public void log(int level, Object message, Throwable t) {
    if (this.level >= level) {
      printMessage(level, message);
      t.printStackTrace();
    }
  }

  public void setLevel(int level) {
    if (level < 0 || level > Debug.DEBUG)
      throw new IllegalArgumentException("Invalid logging level - " + level);
    this.level = level;
  }

  public int getLevel() {
    return level;
  }

  private void printMessage(int level, Object message) {
    if (level < 0)
      level = Debug.DEBUG + 1;
    System.err.println("[" + Debug.LEVEL_NAMES[level] + "] " + new Date()
        + " - " + message);
  }
}
```

File: com.taursys.debug.Debug
```java
package com.taursys.debug;

public class Debug {
  private static Debug singleton = null;
  private LoggerAdapter loggerAdapter = null;
  public static final int DEBUG   = 4;
  public static final int INFO    = 3;
  public static final int WARN    = 2;
  public static final int ERROR   = 1;
  public static final int FATAL   = 0;
  public static final String[] LEVEL_NAMES = {
      "FATAL",
      "ERROR",
      "WARN",
      "INFO",
      "DEBUG",
      "UNKNOWN",
      };

  private Debug() {
    loggerAdapter = new SimpleLogger();
  }

  public static Debug getInstance() {
    if (singleton == null)
      singleton = new Debug();
    return singleton;
  }

  public static void setLoggerAdapter(LoggerAdapter loggerAdapter) {
    if (loggerAdapter == null)
      throw new IllegalArgumentException("LoggerAdapter cannot be null");
    getInstance().loggerAdapter = loggerAdapter;
  }

  public static LoggerAdapter getLoggerAdapter() {
    return getInstance().loggerAdapter;
  }

  public static void debug(Object message) {
    getInstance().loggerAdapter.debug(message);
  }

  public static void debug(Object message, Throwable t) {
    getInstance().loggerAdapter.debug(message, t);
  }

  public static void info(Object message) {
    getInstance().loggerAdapter.info(message);
  }

  public static void info(Object message, Throwable t) {
    getInstance().loggerAdapter.info(message, t);
  }

  public static void warn(Object message) {
    getInstance().loggerAdapter.warn(message);
  }

  public static void warn(Object message, Throwable t) {
    getInstance().loggerAdapter.warn(message, t);
  }

  public static void error(Object message) {
    getInstance().loggerAdapter.error(message);
  }

  public static void error(Object message, Throwable t) {
    getInstance().loggerAdapter.error(message, t);
  }

  public static void fatal(Object message) {
    getInstance().loggerAdapter.fatal(message);
  }

  public static void fatal(Object message, Throwable t) {
    getInstance().loggerAdapter.fatal(message, t);
  }

  public static boolean isDebugEnabled() {
    return getInstance().loggerAdapter.isDebugEnabled();
  }

  public static boolean isInfoEnabled() {
    return getInstance().loggerAdapter.isInfoEnabled();
  }

  public boolean isEnabledFor(int level) {
    return getInstance().loggerAdapter.isEnabledFor(level);
  }

  public static void log(int level, String message) {
    getInstance().loggerAdapter.log(level, message);
  }

  public static void log(int level, String message, Throwable t) {
    getInstance().loggerAdapter.log(level, message, t);
  }
}
```


**XML Annotation:**
```xml
<?xml version="1.0" ?>
<microArchitecture number="98" designPatternName="Composite">
    <roles>
        <clients>
            <client roleKind="AbstractClass">
                <entity> com.taursys.xml.render.AbstractRenderer</entity>
            </client>
            <client roleKind="Class">
                <entity>com.taursys.xml.event.CloseFormDispatcher</entity>
            </client>
            <client roleKind="Class">
                <entity>com.taursys.xml.event.OpenFormDispatcher</entity>
            </client>
            <client roleKind="Class">
                <entity>com.taursys.xml.event.InitFormDispatcher</entity>
            </client>
            <client roleKind="Class">
                <entity>com.taursys.xml.event.InitContextDispatcher</entity>
            </client>
        </clients>
        <components>
            <component roleKind="AbstractClass">
                <entity>com.taursys.xml.Component</entity>
            </component>
        </components>
        <composites>
            <composite roleKind="Class">
                <entity>com.taursys.xml.Container</entity>
            </composite>
        </composites>
        <leaves>
            <leaf roleKind="Class">
                <entity>com.taursys.xml.DocumentElement</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.xml.Form</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.servlet.ServletForm</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.servlet.DefaultMessageForm</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.xml.Template</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.xml.Parameter</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.xml.CheckBoxField</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.html.HTMLCheckBox</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.xml.SelectField</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.html.HTMLSelect</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.servlet.test.TestComponent</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.xml.event.test.TestComponent</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.xml.TextField</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.html.HTMLAnchorURL</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.html.HTMLInputText</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.html.HTMLTextArea</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.servlet.test.TestParameter</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.xml.event.test.TestParameter</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.xml.Trigger</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.xml.Button</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.servlet.test.TestComponent</entity>
            </leaf>
            <leaf roleKind="Class">
                <entity>com.taursys.xml.event.test.TestComponent</entity>
            </leaf>
        </leaves>
    </roles>
    <comment>
From Sultan Alhusain on 13/01/19:					
&quot;There exist two way association and method invocation between the
Component and the Composite classes. Actually, each object of the
type Component has a &quot;parent&quot; of the type Composite. Also, two of the
classes that were listed as being Leafs (DispatchingContainer and
TestContainer) were actually subclasses of the Composite class.
Moreover, the Component and the Composite classes have no similar
methods, which would have the mean by which individual components and
composition of them can be treated uniformaly.&quot;
From Yann-Gaël Guéhéneuc on 13/04/21:
&quot;As far as I can tell, a Component knows its parent just for the sake 
of simplicity, through the use of the method
	public com.taursys.xml.Container getParent() {...}
so I would still consider that Component plays the role of Component 
and that Container plays the role of Composite (add, remove methods 
plus invocations of various methods on components). You are right 
that the two classes DispatchingContainer and TestContainer must not 
be leaves! The fact that Component and Composite do not share 
methods, to me, points to a bad design or to reuse (both classes 
being abstract).&quot;
Therefore, this microarchitecture is kept but should be used with caution.					
					</comment>
</microArchitecture>
```