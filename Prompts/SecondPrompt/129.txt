File: net.sourceforge.pmd.ast.ASTForInit
```java

package net.sourceforge.pmd.ast;

public class ASTForInit extends SimpleNode {
    public ASTForInit(int id) {
        super(id);
    }

    public ASTForInit(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTCatch
```java
package net.sourceforge.pmd.ast;

public class ASTCatch {
    private ASTFormalParameter parameter;
    private ASTBlock block;

    public ASTCatch(ASTFormalParameter parameter, ASTBlock block) {
        this.parameter = parameter;
        this.block = block;
    }

    public ASTFormalParameter getFormalParameter() {
        return parameter;
    }

    public ASTBlock getBlock() {
        return block;
    }
}
```

File: net.sourceforge.pmd.ast.ASTTypeDeclaration
```java

package net.sourceforge.pmd.ast;

public class ASTTypeDeclaration extends SimpleNode {
    public ASTTypeDeclaration(int id) {
        super(id);
    }

    public ASTTypeDeclaration(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTAdditiveExpression
```java

package net.sourceforge.pmd.ast;

public class ASTAdditiveExpression extends SimpleNode {
    public ASTAdditiveExpression(int id) {
        super(id);
    }

    public ASTAdditiveExpression(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void dump(String prefix) {
        System.out.println(toString(prefix) + ":" + getImage());
        dumpChildren(prefix);
    }
   
}
```

File: net.sourceforge.pmd.ast.JavaParserVisitor
```java

package net.sourceforge.pmd.ast;

public interface JavaParserVisitor
{
  public Object visit(SimpleNode node, Object data);
  public Object visit(ASTCompilationUnit node, Object data);
  public Object visit(ASTPackageDeclaration node, Object data);
  public Object visit(ASTImportDeclaration node, Object data);
  public Object visit(ASTTypeDeclaration node, Object data);
  public Object visit(ASTClassDeclaration node, Object data);
  public Object visit(ASTUnmodifiedClassDeclaration node, Object data);
  public Object visit(ASTClassBody node, Object data);
  public Object visit(ASTNestedClassDeclaration node, Object data);
  public Object visit(ASTClassBodyDeclaration node, Object data);
  public Object visit(ASTEnumDeclaration node, Object data);
  public Object visit(ASTEnumElement node, Object data);
  public Object visit(ASTMethodDeclarationLookahead node, Object data);
  public Object visit(ASTInterfaceDeclaration node, Object data);
  public Object visit(ASTNestedInterfaceDeclaration node, Object data);
  public Object visit(ASTUnmodifiedInterfaceDeclaration node, Object data);
  public Object visit(ASTInterfaceMemberDeclaration node, Object data);
  public Object visit(ASTFieldDeclaration node, Object data);
  public Object visit(ASTVariableDeclarator node, Object data);
  public Object visit(ASTVariableDeclaratorId node, Object data);
  public Object visit(ASTVariableInitializer node, Object data);
  public Object visit(ASTArrayInitializer node, Object data);
  public Object visit(ASTMethodDeclaration node, Object data);
  public Object visit(ASTMethodDeclarator node, Object data);
  public Object visit(ASTFormalParameters node, Object data);
  public Object visit(ASTFormalParameter node, Object data);
  public Object visit(ASTConstructorDeclaration node, Object data);
  public Object visit(ASTExplicitConstructorInvocation node, Object data);
  public Object visit(ASTInitializer node, Object data);
  public Object visit(ASTType node, Object data);
  public Object visit(ASTPrimitiveType node, Object data);
  public Object visit(ASTResultType node, Object data);
  public Object visit(ASTName node, Object data);
  public Object visit(ASTNameList node, Object data);
  public Object visit(ASTExpression node, Object data);
  public Object visit(ASTAssignmentOperator node, Object data);
  public Object visit(ASTConditionalExpression node, Object data);
  public Object visit(ASTConditionalOrExpression node, Object data);
  public Object visit(ASTConditionalAndExpression node, Object data);
  public Object visit(ASTInclusiveOrExpression node, Object data);
  public Object visit(ASTExclusiveOrExpression node, Object data);
  public Object visit(ASTAndExpression node, Object data);
  public Object visit(ASTEqualityExpression node, Object data);
  public Object visit(ASTInstanceOfExpression node, Object data);
  public Object visit(ASTRelationalExpression node, Object data);
  public Object visit(ASTShiftExpression node, Object data);
  public Object visit(ASTAdditiveExpression node, Object data);
  public Object visit(ASTMultiplicativeExpression node, Object data);
  public Object visit(ASTUnaryExpression node, Object data);
  public Object visit(ASTPreIncrementExpression node, Object data);
  public Object visit(ASTPreDecrementExpression node, Object data);
  public Object visit(ASTUnaryExpressionNotPlusMinus node, Object data);
  public Object visit(ASTCastLookahead node, Object data);
  public Object visit(ASTPostfixExpression node, Object data);
  public Object visit(ASTCastExpression node, Object data);
  public Object visit(ASTPrimaryExpression node, Object data);
  public Object visit(ASTPrimaryPrefix node, Object data);
  public Object visit(ASTPrimarySuffix node, Object data);
  public Object visit(ASTLiteral node, Object data);
  public Object visit(ASTBooleanLiteral node, Object data);
  public Object visit(ASTNullLiteral node, Object data);
  public Object visit(ASTArguments node, Object data);
  public Object visit(ASTArgumentList node, Object data);
  public Object visit(ASTAllocationExpression node, Object data);
  public Object visit(ASTArrayDimsAndInits node, Object data);
  public Object visit(ASTStatement node, Object data);
  public Object visit(ASTLabeledStatement node, Object data);
  public Object visit(ASTBlock node, Object data);
  public Object visit(ASTBlockStatement node, Object data);
  public Object visit(ASTLocalVariableDeclaration node, Object data);
  public Object visit(ASTEmptyStatement node, Object data);
  public Object visit(ASTStatementExpression node, Object data);
  public Object visit(ASTSwitchStatement node, Object data);
  public Object visit(ASTSwitchLabel node, Object data);
  public Object visit(ASTIfStatement node, Object data);
  public Object visit(ASTWhileStatement node, Object data);
  public Object visit(ASTDoStatement node, Object data);
  public Object visit(ASTForStatement node, Object data);
  public Object visit(ASTForInit node, Object data);
  public Object visit(ASTStatementExpressionList node, Object data);
  public Object visit(ASTForUpdate node, Object data);
  public Object visit(ASTBreakStatement node, Object data);
  public Object visit(ASTContinueStatement node, Object data);
  public Object visit(ASTReturnStatement node, Object data);
  public Object visit(ASTThrowStatement node, Object data);
  public Object visit(ASTSynchronizedStatement node, Object data);
  public Object visit(ASTTryStatement node, Object data);
  public Object visit(ASTAssertStatement node, Object data);
}
```

File: net.sourceforge.pmd.ast.JavaCharStream
```java
package net.sourceforge.pmd.ast;


public class JavaCharStream implements CharStream
{
  public static final boolean staticFlag = false;
  static final int hexval(char c) throws java.io.IOException {
    switch(c)
    {
       case '0' :
          return 0;
       case '1' :
          return 1;
       case '2' :
          return 2;
       case '3' :
          return 3;
       case '4' :
          return 4;
       case '5' :
          return 5;
       case '6' :
          return 6;
       case '7' :
          return 7;
       case '8' :
          return 8;
       case '9' :
          return 9;

       case 'a' :
       case 'A' :
          return 10;
       case 'b' :
       case 'B' :
          return 11;
       case 'c' :
       case 'C' :
          return 12;
       case 'd' :
       case 'D' :
          return 13;
       case 'e' :
       case 'E' :
          return 14;
       case 'f' :
       case 'F' :
          return 15;
    }

    throw new java.io.IOException(); // Should never come here
  }

  public int bufpos = -1;
  int bufsize;
  int available;
  int tokenBegin;
  protected int bufline[];
  protected int bufcolumn[];

  protected int column = 0;
  protected int line = 1;

  protected boolean prevCharIsCR = false;
  protected boolean prevCharIsLF = false;

  protected java.io.Reader inputStream;

  protected char[] nextCharBuf;
  protected char[] buffer;
  protected int maxNextCharInd = 0;
  protected int nextCharInd = -1;
  protected int inBuf = 0;

  protected void ExpandBuff(boolean wrapAround)
  {
     char[] newbuffer = new char[bufsize + 2048];
     int newbufline[] = new int[bufsize + 2048];
     int newbufcolumn[] = new int[bufsize + 2048];

     try
     {
        if (wrapAround)
        {
           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
           System.arraycopy(buffer, 0, newbuffer,
                                             bufsize - tokenBegin, bufpos);
           buffer = newbuffer;

           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
           System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
           bufline = newbufline;

           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
           System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
           bufcolumn = newbufcolumn;

           bufpos += (bufsize - tokenBegin);
        }
        else
        {
           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
           buffer = newbuffer;

           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
           bufline = newbufline;

           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
           bufcolumn = newbufcolumn;

           bufpos -= tokenBegin;
        }
     }
     catch (Throwable t)
     {
        throw new RuntimeException(t.getMessage());
     }

     available = (bufsize += 2048);
     tokenBegin = 0;
  }

  protected void FillBuff() throws java.io.IOException
  {
     int i;
     if (maxNextCharInd == 4096)
        maxNextCharInd = nextCharInd = 0;

     try {
        if ((i = inputStream.read(nextCharBuf, maxNextCharInd,
                                            4096 - maxNextCharInd)) == -1)
        {
           inputStream.close();
           throw new java.io.IOException();
        }
        else
           maxNextCharInd += i;
        return;
     }
     catch(java.io.IOException e) {
        if (bufpos != 0)
        {
           --bufpos;
           backup(0);
        }
        else
        {
           bufline[bufpos] = line;
           bufcolumn[bufpos] = column;
        }
        throw e;
     }
  }

  protected char ReadByte() throws java.io.IOException
  {
     if (++nextCharInd >= maxNextCharInd)
        FillBuff();

     return nextCharBuf[nextCharInd];
  }

  public char BeginToken() throws java.io.IOException
  {     
     if (inBuf > 0)
     {
        --inBuf;

        if (++bufpos == bufsize)
           bufpos = 0;

        tokenBegin = bufpos;
        return buffer[bufpos];
     }

     tokenBegin = 0;
     bufpos = -1;

     return readChar();
  }     

  protected void AdjustBuffSize()
  {
     if (available == bufsize)
     {
        if (tokenBegin > 2048)
        {
           bufpos = 0;
           available = tokenBegin;
        }
        else
           ExpandBuff(false);
     }
     else if (available > tokenBegin)
        available = bufsize;
     else if ((tokenBegin - available) < 2048)
        ExpandBuff(true);
     else
        available = tokenBegin;
  }

  protected void UpdateLineColumn(char c)
  {
     column++;

     if (prevCharIsLF)
     {
        prevCharIsLF = false;
        line += (column = 1);
     }
     else if (prevCharIsCR)
     {
        prevCharIsCR = false;
        if (c == '\n')
        {
           prevCharIsLF = true;
        }
        else
           line += (column = 1);
     }

     switch (c)
     {
        case '\r' :
           prevCharIsCR = true;
           break;
        case '\n' :
           prevCharIsLF = true;
           break;
        case '\t' :
           column--;
           column += (8 - (column & 07));
           break;
        default :
           break;
     }

     bufline[bufpos] = line;
     bufcolumn[bufpos] = column;
  }

  public char readChar() throws java.io.IOException
  {
     if (inBuf > 0)
     {
        --inBuf;

        if (++bufpos == bufsize)
           bufpos = 0;

        return buffer[bufpos];
     }

     char c;

     if (++bufpos == available)
        AdjustBuffSize();

     if ((buffer[bufpos] = c = ReadByte()) == '\\')
     {
        UpdateLineColumn(c);

        int backSlashCnt = 1;

        for (;;) // Read all the backslashes
        {
           if (++bufpos == available)
              AdjustBuffSize();

           try
           {
              if ((buffer[bufpos] = c = ReadByte()) != '\\')
              {
                 UpdateLineColumn(c);
                 if ((c == 'u') && ((backSlashCnt & 1) == 1))
                 {
                    if (--bufpos < 0)
                       bufpos = bufsize - 1;

                    break;
                 }

                 backup(backSlashCnt);
                 return '\\';
              }
           }
           catch(java.io.IOException e)
           {
              if (backSlashCnt > 1)
                 backup(backSlashCnt);

              return '\\';
           }

           UpdateLineColumn(c);
           backSlashCnt++;
        }

        try
        {
           while ((c = ReadByte()) == 'u')
              ++column;

           buffer[bufpos] = c = (char)(hexval(c) << 12 |
                                       hexval(ReadByte()) << 8 |
                                       hexval(ReadByte()) << 4 |
                                       hexval(ReadByte()));

           column += 4;
        }
        catch(java.io.IOException e)
        {
           throw new RuntimeException("Invalid escape character at line " + line +
                                         " column " + column + ".");
        }

        if (backSlashCnt == 1)
           return c;
        else
        {
           backup(backSlashCnt - 1);
           return '\\';
        }
     }
     else
     {
        UpdateLineColumn(c);
        return (c);
     }
  }


  public int getColumn() {
     return bufcolumn[bufpos];
  }


  public int getLine() {
     return bufline[bufpos];
  }

  public int getEndColumn() {
     return bufcolumn[bufpos];
  }

  public int getEndLine() {
     return bufline[bufpos];
  }

  public int getBeginColumn() {
     return bufcolumn[tokenBegin];
  }

  public int getBeginLine() {
     return bufline[tokenBegin];
  }

  public void backup(int amount) {

    inBuf += amount;
    if ((bufpos -= amount) < 0)
       bufpos += bufsize;
  }

  public JavaCharStream(java.io.Reader dstream,
                 int startline, int startcolumn, int buffersize)
  {
    inputStream = dstream;
    line = startline;
    column = startcolumn - 1;

    available = bufsize = buffersize;
    buffer = new char[buffersize];
    bufline = new int[buffersize];
    bufcolumn = new int[buffersize];
    nextCharBuf = new char[4096];
  }

  public JavaCharStream(java.io.Reader dstream,
                                        int startline, int startcolumn)
  {
     this(dstream, startline, startcolumn, 4096);
  }

  public JavaCharStream(java.io.Reader dstream)
  {
     this(dstream, 1, 1, 4096);
  }
  public void ReInit(java.io.Reader dstream,
                 int startline, int startcolumn, int buffersize)
  {
    inputStream = dstream;
    line = startline;
    column = startcolumn - 1;

    if (buffer == null || buffersize != buffer.length)
    {
      available = bufsize = buffersize;
      buffer = new char[buffersize];
      bufline = new int[buffersize];
      bufcolumn = new int[buffersize];
      nextCharBuf = new char[4096];
    }
    prevCharIsLF = prevCharIsCR = false;
    tokenBegin = inBuf = maxNextCharInd = 0;
    nextCharInd = bufpos = -1;
  }

  public void ReInit(java.io.Reader dstream,
                                        int startline, int startcolumn)
  {
     ReInit(dstream, startline, startcolumn, 4096);
  }

  public void ReInit(java.io.Reader dstream)
  {
     ReInit(dstream, 1, 1, 4096);
  }
  public JavaCharStream(java.io.InputStream dstream, int startline,
  int startcolumn, int buffersize)
  {
     this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
  }

  public JavaCharStream(java.io.InputStream dstream, int startline,
                                                           int startcolumn)
  {
     this(dstream, startline, startcolumn, 4096);
  }

  public JavaCharStream(java.io.InputStream dstream)
  {
     this(dstream, 1, 1, 4096);
  }

  public void ReInit(java.io.InputStream dstream, int startline,
  int startcolumn, int buffersize)
  {
     ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
  }
  public void ReInit(java.io.InputStream dstream, int startline,
                                                           int startcolumn)
  {
     ReInit(dstream, startline, startcolumn, 4096);
  }
  public void ReInit(java.io.InputStream dstream)
  {
     ReInit(dstream, 1, 1, 4096);
  }

  public String GetImage()
  {
     if (bufpos >= tokenBegin)
        return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
     else
        return new String(buffer, tokenBegin, bufsize - tokenBegin) +
                              new String(buffer, 0, bufpos + 1);
  }

  public char[] GetSuffix(int len)
  {
     char[] ret = new char[len];

     if ((bufpos + 1) >= len)
        System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
     else
     {
        System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,
                                                          len - bufpos - 1);
        System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
     }

     return ret;
  }

  public void Done()
  {
     nextCharBuf = null;
     buffer = null;
     bufline = null;
     bufcolumn = null;
  }

  public void adjustBeginLineColumn(int newLine, int newCol)
  {
     int start = tokenBegin;
     int len;

     if (bufpos >= tokenBegin)
     {
        len = bufpos - tokenBegin + inBuf + 1;
     }
     else
     {
        len = bufsize - tokenBegin + bufpos + 1 + inBuf;
     }

     int i = 0, j = 0, k = 0;
     int nextColDiff = 0, columnDiff = 0;

     while (i < len &&
            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])
     {
        bufline[j] = newLine;
        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
        bufcolumn[j] = newCol + columnDiff;
        columnDiff = nextColDiff;
        i++;
     } 

     if (i < len)
     {
        bufline[j] = newLine++;
        bufcolumn[j] = newCol + columnDiff;

        while (i++ < len)
        {
           if (bufline[j = start % bufsize] != bufline[++start % bufsize])
              bufline[j] = newLine++;
           else
              bufline[j] = newLine;
        }
     }

     line = bufline[j];
     column = bufcolumn[j];
  }

}
```

File: net.sourceforge.pmd.ast.ASTArgumentList
```java

package net.sourceforge.pmd.ast;

public class ASTArgumentList extends SimpleNode {
    public ASTArgumentList(int id) {
        super(id);
    }

    public ASTArgumentList(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTWhileStatement
```java

package net.sourceforge.pmd.ast;

public class ASTWhileStatement extends SimpleNode {
    public ASTWhileStatement(int id) {
        super(id);
    }

    public ASTWhileStatement(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTTryStatement
```java

package net.sourceforge.pmd.ast;

import java.util.ArrayList;
import java.util.List;

public class ASTTryStatement extends SimpleNode {

    private boolean hasCatch;
    private boolean hasFinally;


    public ASTTryStatement(int id) {
        super(id);
    }

    public ASTTryStatement(JavaParser p, int id) {
        super(p, id);
    }

    public void setHasCatch() {
        hasCatch = true;
    }

    public void setHasFinally() {
        hasFinally = true;
    }

    public boolean hasCatch() {
        return hasCatch;
    }

    public boolean hasFinally() {
        return hasFinally;
    }

    public ASTBlock getFinallyBlock() {
        return (ASTBlock) jjtGetChild(jjtGetNumChildren() - 1);
    }

    public List getCatchBlocks() {
        int numChildren = jjtGetNumChildren();
        if (hasFinally)
            numChildren--;
        List blocks = new ArrayList();
        for (int i = 1; i < numChildren; i += 2) {
            blocks.add(new ASTCatch((ASTFormalParameter) jjtGetChild(i + 0), (ASTBlock) jjtGetChild(i + 1)));
        }
        return blocks;
    }

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTSwitchLabel
```java

package net.sourceforge.pmd.ast;

public class ASTSwitchLabel extends SimpleNode {
    public ASTSwitchLabel(int id) {
        super(id);
    }

    public ASTSwitchLabel(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTClassDeclaration
```java

package net.sourceforge.pmd.ast;

public class ASTClassDeclaration extends AccessNode {
    public ASTClassDeclaration(int id) {
        super(id);
    }

    public ASTClassDeclaration(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void dump(String prefix) {
        System.out.println(collectDumpedModifiers(prefix));
        dumpChildren(prefix);
    }
}
```

File: net.sourceforge.pmd.ast.ASTResultType
```java

package net.sourceforge.pmd.ast;

public class ASTResultType extends SimpleNode {
    public ASTResultType(int id) {
        super(id);
    }

    public ASTResultType(JavaParser p, int id) {
        super(p, id);
    }

    public boolean isVoid() {
        return jjtGetNumChildren() == 0;
    }

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.Node
```java

package net.sourceforge.pmd.ast;


public interface Node {

    public void jjtOpen();

    public void jjtClose();

    public void jjtSetParent(Node n);

    public Node jjtGetParent();

    public void jjtAddChild(Node n, int i);

    public Node jjtGetChild(int i);

    public int jjtGetNumChildren();

    public Object jjtAccept(JavaParserVisitor visitor, Object data);
}
```

File: net.sourceforge.pmd.ast.ASTNestedInterfaceDeclaration
```java

package net.sourceforge.pmd.ast;

public class ASTNestedInterfaceDeclaration  extends AccessNode  {
    public ASTNestedInterfaceDeclaration(int id) {
        super(id);
    }

    public ASTNestedInterfaceDeclaration(JavaParser p, int id) {
        super(p, id);
    }

    public ASTUnmodifiedInterfaceDeclaration getUnmodifedInterfaceDeclaration() {
        return (ASTUnmodifiedInterfaceDeclaration) jjtGetChild(0);
    }

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void dump(String prefix) {
        System.out.println(collectDumpedModifiers(prefix));
        dumpChildren(prefix);
    }
}
```

File: net.sourceforge.pmd.ast.DiscardableNodeCleaner
```java
package net.sourceforge.pmd.ast;

import java.util.Iterator;
import java.util.List;

public class DiscardableNodeCleaner {

    private static final Class[] clazzes = new Class[] {
        ASTEqualityExpression.class,
        ASTAndExpression.class,
        ASTInstanceOfExpression.class,
        ASTUnaryExpression.class,
        ASTShiftExpression.class,
        ASTConditionalOrExpression.class,
        ASTInclusiveOrExpression.class,
        ASTExclusiveOrExpression.class,
        ASTConditionalExpression.class,
        ASTRelationalExpression.class,
        ASTUnaryExpression.class,
        ASTUnaryExpressionNotPlusMinus.class,
        ASTPostfixExpression.class,
        ASTMultiplicativeExpression.class,
        ASTAdditiveExpression.class,
        ASTConditionalAndExpression.class
    };

    public void clean(ASTCompilationUnit root) {
        for (int i = 0; i<clazzes.length; i++) {
            clean(root, clazzes[i]);
        }
    }

    private void clean(ASTCompilationUnit root, Class type) {
        List nodes = root.findChildrenOfType(type);
        for (Iterator i = nodes.iterator(); i.hasNext();) {
            SimpleNode node = (SimpleNode)i.next();
            if (node.isDiscardable()) {
                SimpleNode parent = (SimpleNode)node.jjtGetParent();
                SimpleNode kid = (SimpleNode)node.jjtGetChild(0);
                kid.jjtSetParent(parent);
                parent.jjtReplaceChild(node, kid);
            }
        }
    }
}
```

File: net.sourceforge.pmd.ast.ASTEqualityExpression
```java

package net.sourceforge.pmd.ast;

public class ASTEqualityExpression extends SimpleNode {
    public ASTEqualityExpression(int id) {
        super(id);
        this.setDiscardable();
    }

    public ASTEqualityExpression(JavaParser p, int id) {
        super(p, id);
        this.setDiscardable();
    }

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void dump(String prefix) {
        System.out.println(toString(prefix) + ":" + getImage());
        dumpChildren(prefix);
    }
}
```

File: net.sourceforge.pmd.ast.ASTInstanceOfExpression
```java

package net.sourceforge.pmd.ast;

public class ASTInstanceOfExpression extends SimpleNode {
    public ASTInstanceOfExpression(int id) {
        super(id);
    }

    public ASTInstanceOfExpression(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTArguments
```java

package net.sourceforge.pmd.ast;

public class ASTArguments extends SimpleNode {
    public ASTArguments(int id) {
        super(id);
    }

    public ASTArguments(JavaParser p, int id) {
        super(p, id);
    }


    public int getArgumentCount() {
        if (this.jjtGetNumChildren() == 0) {
            return 0;
        }
        return this.jjtGetChild(0).jjtGetNumChildren();
    }

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation
```java

package net.sourceforge.pmd.ast;

public class ASTExplicitConstructorInvocation extends SimpleNode {
    public ASTExplicitConstructorInvocation(int id) {
        super(id);
    }

    public ASTExplicitConstructorInvocation(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public int getArgumentCount() {
        return ((ASTArguments) this.jjtGetChild(0)).getArgumentCount();
    }

    private String thisOrSuper;

    public void setIsThis() {
        this.thisOrSuper = "this";
    }

    public void setIsSuper() {
        this.thisOrSuper = "super";
    }

    public boolean isThis() {
        return thisOrSuper != null && thisOrSuper.equals("this");
    }

    public boolean isSuper() {
        return thisOrSuper != null && thisOrSuper.equals("super");
    }
}
```

File: net.sourceforge.pmd.ast.ASTInterfaceDeclaration
```java

package net.sourceforge.pmd.ast;

public class ASTInterfaceDeclaration extends AccessNode  {
    public ASTInterfaceDeclaration(int id) {
        super(id);
    }

    public ASTInterfaceDeclaration(JavaParser p, int id) {
        super(p, id);
    }

    public ASTUnmodifiedInterfaceDeclaration getUnmodifedInterfaceDeclaration() {
        return (ASTUnmodifiedInterfaceDeclaration) jjtGetChild(0);
    }

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void dump(String prefix) {
        System.out.println(collectDumpedModifiers(prefix));
        dumpChildren(prefix);
    }

}
```

File: net.sourceforge.pmd.ast.ASTReturnStatement
```java

package net.sourceforge.pmd.ast;

public class ASTReturnStatement extends SimpleNode {
    public ASTReturnStatement(int id) {
        super(id);
    }

    public ASTReturnStatement(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTSynchronizedStatement
```java

package net.sourceforge.pmd.ast;

public class ASTSynchronizedStatement extends SimpleNode {
    public ASTSynchronizedStatement(int id) {
        super(id);
    }

    public ASTSynchronizedStatement(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTShiftExpression
```java

package net.sourceforge.pmd.ast;

public class ASTShiftExpression extends SimpleNode {
    public ASTShiftExpression(int id) {
        super(id);
    }

    public ASTShiftExpression(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.JJTJavaParserState
```java

package net.sourceforge.pmd.ast;

class JJTJavaParserState {
    private java.util.Stack nodes;
    private java.util.Stack marks;

    private int sp;		// number of nodes on stack
    private int mk;		// current mark
    private boolean node_created;

    JJTJavaParserState() {
        nodes = new java.util.Stack();
        marks = new java.util.Stack();
        sp = 0;
        mk = 0;
    }

    boolean nodeCreated() {
        return node_created;
    }

    void reset() {
        nodes.removeAllElements();
        marks.removeAllElements();
        sp = 0;
        mk = 0;
    }

    Node rootNode() {
        return (Node) nodes.elementAt(0);
    }

    void pushNode(Node n) {
        nodes.push(n);
        ++sp;
    }

    Node popNode() {
        if (--sp < mk) {
            mk = ((Integer) marks.pop()).intValue();
        }
        return (Node) nodes.pop();
    }

    Node peekNode() {
        return (Node) nodes.peek();
    }

    int nodeArity() {
        return sp - mk;
    }


    void clearNodeScope(Node n) {
        while (sp > mk) {
            popNode();
        }
        mk = ((Integer) marks.pop()).intValue();
    }


    void openNodeScope(Node n) {
        marks.push(new Integer(mk));
        mk = sp;
        n.jjtOpen();
    }


    void closeNodeScope(Node n, int num) {
        mk = ((Integer) marks.pop()).intValue();
        while (num-- > 0) {
            Node c = popNode();
            c.jjtSetParent(n);
            n.jjtAddChild(c, num);
        }
        n.jjtClose();
        pushNode(n);
        node_created = true;
    }


    void closeNodeScope(Node n, boolean condition) {
        if (condition) {
            int a = nodeArity();
            mk = ((Integer) marks.pop()).intValue();
            while (a-- > 0) {
                Node c = popNode();
                c.jjtSetParent(n);
                n.jjtAddChild(c, a);
            }
            n.jjtClose();
            pushNode(n);
            node_created = true;
        } else {
            mk = ((Integer) marks.pop()).intValue();
            node_created = false;
        }
    }
}
```

File: net.sourceforge.pmd.ast.AccessNode
```java
package net.sourceforge.pmd.ast;

public class AccessNode extends SimpleNode implements AccessFlags {
    public AccessNode(int i) {
        super(i);
    }

    public AccessNode(JavaParser parser, int i) {
        super(parser, i);
    }

    protected short accessFlags = 0x0000;

    public void setPublic() {
        accessFlags |= ACC_PUBLIC;
    }

    public boolean isPublic() {
        return (accessFlags & ACC_PUBLIC) > 0;
    }

    public void setPrivate() {
        accessFlags |= ACC_PRIVATE;
    }

    public boolean isPrivate() {
        return (accessFlags & ACC_PRIVATE) > 0;
    }

    public void setProtected() {
        accessFlags |= ACC_PROTECTED;
    }

    public boolean isProtected() {
        return (accessFlags & ACC_PROTECTED) > 0;
    }

    public void setStatic() {
        accessFlags |= ACC_STATIC;
    }

    public boolean isStatic() {
        return (accessFlags & ACC_STATIC) > 0;
    }

    public void setFinal() {
        accessFlags |= ACC_FINAL;
    }

    public boolean isFinal() {
        return (accessFlags & ACC_FINAL) > 0;
    }

    public void setSynchronized() {
        accessFlags |= ACC_SYNCHRONIZED;
    }

    public boolean isSynchronized() {
        return (accessFlags & ACC_SYNCHRONIZED) > 0;
    }

    public void setVolatile() {
        accessFlags |= ACC_VOLATILE;
    }

    public boolean isVolatile() {
        return (accessFlags & ACC_VOLATILE) > 0;
    }

    public void setTransient() {
        accessFlags |= ACC_TRANSIENT;
    }

    public boolean isTransient() {
        return (accessFlags & ACC_TRANSIENT) > 0;
    }

    public void setNative() {
        accessFlags |= ACC_NATIVE;
    }

    public boolean isNative() {
        return (accessFlags & ACC_NATIVE) > 0;
    }


    public void setInterface() {
        accessFlags |= ACC_INTERFACE;
    }

    public boolean isInterface() {
        return (accessFlags & ACC_INTERFACE) > 0;
    }


    public void setAbstract() {
        accessFlags |= ACC_ABSTRACT;
    }

    public boolean isAbstract() {
        return (accessFlags & ACC_ABSTRACT) > 0;
    }


    public void setStrict() {
        accessFlags |= ACC_STRICT;
    }

    public boolean isStrict() {
        return (accessFlags & ACC_STRICT) > 0;
    }


    public void setSuper() {
        accessFlags |= ACC_SUPER;
    }

    public boolean isSuper() {
        return (accessFlags & ACC_SUPER) > 0;
    }

    public boolean isPackagePrivate() {
        return !isPrivate() && !isPublic() && !isProtected();
    }

    public String collectDumpedModifiers(String prefix) {
        String out = toString(prefix) + ":";
        if (isPackagePrivate()) {out += "(package private)";}
        if (isPrivate()) {out += "(private)";}
        if (isPublic()) {out += "(public)";}
        if (isProtected()) {out += "(protected)";}
        if (isAbstract()) {out += "(abstract)";}
        if (isStatic()) {out += "(static)";}
        if (isFinal()) {out += "(final)";}
        if (isSynchronized()) {out += "(synchronized)";}
        if (isNative()) {out += "(native)";}
        if (isStrict()) {out += "(strict)";}
        if (isTransient()) {out += "(transient)";}
        return out;
    }
}
```

File: net.sourceforge.pmd.ast.ASTAndExpression
```java

package net.sourceforge.pmd.ast;

public class ASTAndExpression extends SimpleNode {
    public ASTAndExpression(int id) {
        super(id);
    }

    public ASTAndExpression(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTBooleanLiteral
```java

package net.sourceforge.pmd.ast;

public class ASTBooleanLiteral extends SimpleNode {
    public ASTBooleanLiteral(int id) {
        super(id);
    }

    public ASTBooleanLiteral(JavaParser p, int id) {
        super(p, id);
    }

    private boolean isTrue;

    public void setTrue() {
        isTrue = true;
    }

    public boolean isTrue() {
        return this.isTrue;
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void dump(String prefix) {
        String out = isTrue ? "true" : "false";
        System.out.println(toString(prefix) + ":" + out);
        dumpChildren(prefix);
    }

}
```

File: net.sourceforge.pmd.ast.ASTCompilationUnit
```java

package net.sourceforge.pmd.ast;

public class ASTCompilationUnit extends SimpleNode {
    public ASTCompilationUnit(int id) {
        super(id);
    }

    public ASTCompilationUnit(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTExpression
```java

package net.sourceforge.pmd.ast;

public class ASTExpression extends SimpleNode {
    public ASTExpression(int id) {
        super(id);
    }

    public ASTExpression(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTVariableDeclaratorId
```java

package net.sourceforge.pmd.ast;

public class ASTVariableDeclaratorId extends SimpleNode {
    public ASTVariableDeclaratorId(int id) {
        super(id);
    }

    public ASTVariableDeclaratorId(JavaParser p, int id) {
        super(p, id);
    }

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public boolean isExceptionBlockParameter() {
        return jjtGetParent().jjtGetParent() instanceof ASTTryStatement;
    }

    public SimpleNode getTypeNameNode() {
        if (jjtGetParent() instanceof ASTFormalParameter) {
            return findTypeNameNode(jjtGetParent());
        } else if (jjtGetParent().jjtGetParent() instanceof ASTLocalVariableDeclaration || jjtGetParent().jjtGetParent() instanceof ASTFieldDeclaration) {
            return findTypeNameNode(jjtGetParent().jjtGetParent());
        }
        throw new RuntimeException("Don't know how to get the type for anything other than ASTLocalVariableDeclaration/ASTFormalParameter/ASTFieldDeclaration");
    }

    public ASTType getTypeNode() {
        if (jjtGetParent() instanceof ASTFormalParameter) {
            return (ASTType)jjtGetParent().jjtGetChild(0);
        } else if (jjtGetParent().jjtGetParent() instanceof ASTLocalVariableDeclaration || jjtGetParent().jjtGetParent() instanceof ASTFieldDeclaration) {
            return (ASTType)(jjtGetParent().jjtGetParent().jjtGetChild(0));
        }
        throw new RuntimeException("Don't know how to get the type for anything other than ASTLocalVariableDeclaration/ASTFormalParameter/ASTFieldDeclaration");
    }

    public void dump(String prefix) {
        System.out.println(toString(prefix) + ":" + getImage());
        dumpChildren(prefix);
    }

    private SimpleNode findTypeNameNode(Node node) {
        ASTType typeNode = (ASTType) node.jjtGetChild(0);
        return (SimpleNode) typeNode.jjtGetChild(0);
    }
}
```

File: net.sourceforge.pmd.ast.ASTLiteral
```java

package net.sourceforge.pmd.ast;

public class ASTLiteral extends SimpleNode {
    public ASTLiteral(int id) {
        super(id);
    }

    public ASTLiteral(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void dump(String prefix) {
        System.out.println(toString(prefix) + ":" + getImage());
        dumpChildren(prefix);
    }
    
}
```

File: net.sourceforge.pmd.ast.ASTNestedClassDeclaration
```java

package net.sourceforge.pmd.ast;

public class ASTNestedClassDeclaration extends AccessNode {
    public ASTNestedClassDeclaration(int id) {
        super(id);
    }

    public ASTNestedClassDeclaration(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void dump(String prefix) {
        System.out.println(collectDumpedModifiers(prefix));
        dumpChildren(prefix);
    }

}
```

File: net.sourceforge.pmd.ast.ASTImportDeclaration
```java

package net.sourceforge.pmd.ast;

public class ASTImportDeclaration extends SimpleNode {

    private boolean isImportOnDemand;

    public ASTImportDeclaration(int id) {
        super(id);
    }

    public ASTImportDeclaration(JavaParser p, int id) {
        super(p, id);
    }

    public void setImportOnDemand() {
        this.isImportOnDemand = true;
    }

    public boolean isImportOnDemand() {
        return isImportOnDemand;
    }

    public ASTName getImportedNameNode() {
        return (ASTName) jjtGetChild(0);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.CharStream
```java
package net.sourceforge.pmd.ast;


public interface CharStream {

  char readChar() throws java.io.IOException;

  int getColumn();

  int getLine();

  int getEndColumn();

  int getEndLine();

  int getBeginColumn();

  int getBeginLine();

  void backup(int amount);

  char BeginToken() throws java.io.IOException;

  String GetImage();

  char[] GetSuffix(int len);

  void Done();

}
```

File: net.sourceforge.pmd.ast.ASTPrimarySuffix
```java

package net.sourceforge.pmd.ast;

public class ASTPrimarySuffix extends SimpleNode {
    public ASTPrimarySuffix(int id) {
        super(id);
    }

    public ASTPrimarySuffix(JavaParser p, int id) {
        super(p, id);
    }

    private boolean isArguments;

    public void setIsArguments() {
        this.isArguments = true;
    }

    public boolean isArguments() {
        return this.isArguments;
    }

    public void dump(String prefix) {
        if (getImage() == null) {
            System.out.println(toString(prefix));
        } else {
            System.out.println(toString(prefix) + ":" + getImage());
        }
       dumpChildren(prefix);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.AccessFlags
```java
package net.sourceforge.pmd.ast;

public interface AccessFlags {
    public final static short ACC_PUBLIC = 0x0001;
    public final static short ACC_PRIVATE = 0x0002;
    public final static short ACC_PROTECTED = 0x0004;
    public final static short ACC_STATIC = 0x0008;

    public final static short ACC_FINAL = 0x0010;
    public final static short ACC_SYNCHRONIZED = 0x0020;
    public final static short ACC_VOLATILE = 0x0040;
    public final static short ACC_TRANSIENT = 0x0080;

    public final static short ACC_NATIVE = 0x0100;
    public final static short ACC_INTERFACE = 0x0200;
    public final static short ACC_ABSTRACT = 0x0400;
    public final static short ACC_STRICT = 0x0800;

    public final static short ACC_SUPER = 0x0020;

}
```

File: net.sourceforge.pmd.ast.ASTPrimaryExpression
```java

package net.sourceforge.pmd.ast;

public class ASTPrimaryExpression extends SimpleNode {
    public ASTPrimaryExpression(int id) {
        super(id);
    }

    public ASTPrimaryExpression(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTMethodDeclarationLookahead
```java

package net.sourceforge.pmd.ast;

public class ASTMethodDeclarationLookahead extends SimpleNode {
    public ASTMethodDeclarationLookahead(int id) {
        super(id);
    }

    public ASTMethodDeclarationLookahead(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTInterfaceMemberDeclaration
```java

package net.sourceforge.pmd.ast;

public class ASTInterfaceMemberDeclaration extends SimpleNode {
    public ASTInterfaceMemberDeclaration(int id) {
        super(id);
    }

    public ASTInterfaceMemberDeclaration(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTThrowStatement
```java

package net.sourceforge.pmd.ast;

public class ASTThrowStatement extends SimpleNode {
    public ASTThrowStatement(int id) {
        super(id);
    }

    public ASTThrowStatement(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTUnmodifiedClassDeclaration
```java

package net.sourceforge.pmd.ast;

public class ASTUnmodifiedClassDeclaration extends SimpleNode {

    public ASTUnmodifiedClassDeclaration(int id) {
        super(id);
    }

    public ASTUnmodifiedClassDeclaration(JavaParser p, int id) {
        super(p, id);
    }

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    private boolean hasExplicitExtends;

    public void setHasExplicitExtends() {
        this.hasExplicitExtends = true;
    }

    public boolean hasExplicitExtends() {
        return hasExplicitExtends;
    }

    private boolean hasExplicitImplements;

    public void setHasExplicitImplements() {
        this.hasExplicitImplements = true;
    }

    public boolean hasExplicitImplements() {
        return hasExplicitImplements;
    }

    public void dump(String prefix) {
        System.out.println(toString(prefix) + ":" + getImage());
        dumpChildren(prefix);
    }

}
```

File: net.sourceforge.pmd.ast.ASTLabeledStatement
```java

package net.sourceforge.pmd.ast;

public class ASTLabeledStatement extends SimpleNode {
    public ASTLabeledStatement(int id) {
        super(id);
    }

    public ASTLabeledStatement(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTBreakStatement
```java

package net.sourceforge.pmd.ast;

public class ASTBreakStatement extends SimpleNode {
    public ASTBreakStatement(int id) {
        super(id);
    }

    public ASTBreakStatement(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.TokenMgrError
```java
package net.sourceforge.pmd.ast;

public class TokenMgrError extends RuntimeException
{

   static final int LEXICAL_ERROR = 0;

   static final int STATIC_LEXER_ERROR = 1;

   static final int INVALID_LEXICAL_STATE = 2;

   static final int LOOP_DETECTED = 3;

   int errorCode;

   protected static final String addEscapes(String str) {
      StringBuffer retval = new StringBuffer();
      char ch;
      for (int i = 0; i < str.length(); i++) {
        switch (str.charAt(i))
        {
           case 0 :
              continue;
           case '\b':
              retval.append("\\b");
              continue;
           case '\t':
              retval.append("\\t");
              continue;
           case '\n':
              retval.append("\\n");
              continue;
           case '\f':
              retval.append("\\f");
              continue;
           case '\r':
              retval.append("\\r");
              continue;
           case '\"':
              retval.append("\\\"");
              continue;
           case '\'':
              retval.append("\\\'");
              continue;
           case '\\':
              retval.append("\\\\");
              continue;
           default:
              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                 String s = "0000" + Integer.toString(ch, 16);
                 retval.append("\\u" + s.substring(s.length() - 4, s.length()));
              } else {
                 retval.append(ch);
              }
              continue;
        }
      }
      return retval.toString();
   }

   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
      return("Lexical error at line " +
           errorLine + ", column " +
           errorColumn + ".  Encountered: " +
           (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar + "), ") +
           "after : \"" + addEscapes(errorAfter) + "\"");
   }

   public String getMessage() {
      return super.getMessage();
   }


   public TokenMgrError() {
   }

   public TokenMgrError(String message, int reason) {
      super(message);
      errorCode = reason;
   }

   public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason) {
      this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);
   }
}
```

File: net.sourceforge.pmd.ast.JavaParserVisitorAdapter
```java
package net.sourceforge.pmd.ast;

public class JavaParserVisitorAdapter implements JavaParserVisitor {
    public Object visit(SimpleNode node, Object data) {
        node.childrenAccept(this, data);
        return null;
    }

    public Object visit(ASTCompilationUnit node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTEnumDeclaration node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTEnumElement node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTAssertStatement node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTPackageDeclaration node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTImportDeclaration node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTTypeDeclaration node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTClassDeclaration node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTUnmodifiedClassDeclaration node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTClassBody node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTNestedClassDeclaration node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTClassBodyDeclaration node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTMethodDeclarationLookahead node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTInterfaceDeclaration node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTNestedInterfaceDeclaration node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTUnmodifiedInterfaceDeclaration node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTInterfaceMemberDeclaration node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTFieldDeclaration node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTVariableDeclarator node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTVariableDeclaratorId node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTVariableInitializer node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTArrayInitializer node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTMethodDeclaration node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTMethodDeclarator node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTFormalParameters node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTFormalParameter node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTConstructorDeclaration node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTExplicitConstructorInvocation node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTInitializer node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTType node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTPrimitiveType node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTResultType node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTName node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTNameList node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTAssignmentOperator node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTConditionalExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTConditionalOrExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTConditionalAndExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTInclusiveOrExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTExclusiveOrExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTAndExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTEqualityExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTInstanceOfExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTRelationalExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTShiftExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTAdditiveExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTMultiplicativeExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTUnaryExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTPreIncrementExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTPreDecrementExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTUnaryExpressionNotPlusMinus node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTCastLookahead node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTPostfixExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTCastExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTPrimaryExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTPrimaryPrefix node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTPrimarySuffix node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTLiteral node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTBooleanLiteral node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTNullLiteral node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTArguments node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTArgumentList node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTAllocationExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTArrayDimsAndInits node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTStatement node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTLabeledStatement node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTBlock node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTBlockStatement node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTLocalVariableDeclaration node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTEmptyStatement node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTStatementExpression node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTSwitchStatement node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTSwitchLabel node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTIfStatement node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTWhileStatement node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTDoStatement node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTForStatement node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTForInit node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTStatementExpressionList node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTForUpdate node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTBreakStatement node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTContinueStatement node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTReturnStatement node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTThrowStatement node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTSynchronizedStatement node, Object data) {
        return visit((SimpleNode) node, data);
    }

    public Object visit(ASTTryStatement node, Object data) {
        return visit((SimpleNode) node, data);
    }
}
```

File: net.sourceforge.pmd.ast.ParseException
```java
package net.sourceforge.pmd.ast;

public class ParseException extends RuntimeException {

  public ParseException(Token currentTokenVal,
                        int[][] expectedTokenSequencesVal,
                        String[] tokenImageVal
                       )
  {
    super("");
    specialConstructor = true;
    currentToken = currentTokenVal;
    expectedTokenSequences = expectedTokenSequencesVal;
    tokenImage = tokenImageVal;
  }


  public ParseException() {
    super();
    specialConstructor = false;
  }

  public ParseException(String message) {
    super(message);
    specialConstructor = false;
  }

  protected boolean specialConstructor;

  public Token currentToken;

  public int[][] expectedTokenSequences;

  public String[] tokenImage;

  public String getMessage() {
    if (!specialConstructor) {
      return super.getMessage();
    }
    String expected = "";
    int maxSize = 0;
    for (int i = 0; i < expectedTokenSequences.length; i++) {
      if (maxSize < expectedTokenSequences[i].length) {
        maxSize = expectedTokenSequences[i].length;
      }
      for (int j = 0; j < expectedTokenSequences[i].length; j++) {
        expected += tokenImage[expectedTokenSequences[i][j]] + " ";
      }
      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
        expected += "...";
      }
      expected += eol + "    ";
    }
    String retval = "Encountered \"";
    Token tok = currentToken.next;
    for (int i = 0; i < maxSize; i++) {
      if (i != 0) retval += " ";
      if (tok.kind == 0) {
        retval += tokenImage[0];
        break;
      }
      retval += add_escapes(tok.image);
      tok = tok.next; 
    }
    retval += "\" at line " + currentToken.next.beginLine + ", column " + currentToken.next.beginColumn;
    retval += "." + eol;
    if (expectedTokenSequences.length == 1) {
      retval += "Was expecting:" + eol + "    ";
    } else {
      retval += "Was expecting one of:" + eol + "    ";
    }
    retval += expected;
    return retval;
  }

  protected String eol = System.getProperty("line.separator", "\n");
 
  protected String add_escapes(String str) {
      StringBuffer retval = new StringBuffer();
      char ch;
      for (int i = 0; i < str.length(); i++) {
        switch (str.charAt(i))
        {
           case 0 :
              continue;
           case '\b':
              retval.append("\\b");
              continue;
           case '\t':
              retval.append("\\t");
              continue;
           case '\n':
              retval.append("\\n");
              continue;
           case '\f':
              retval.append("\\f");
              continue;
           case '\r':
              retval.append("\\r");
              continue;
           case '\"':
              retval.append("\\\"");
              continue;
           case '\'':
              retval.append("\\\'");
              continue;
           case '\\':
              retval.append("\\\\");
              continue;
           default:
              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                 String s = "0000" + Integer.toString(ch, 16);
                 retval.append("\\u" + s.substring(s.length() - 4, s.length()));
              } else {
                 retval.append(ch);
              }
              continue;
        }
      }
      return retval.toString();
   }

}
```

File: net.sourceforge.pmd.ast.ASTCastLookahead
```java

package net.sourceforge.pmd.ast;

public class ASTCastLookahead extends SimpleNode {
    public ASTCastLookahead(int id) {
        super(id);
    }

    public ASTCastLookahead(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTNameList
```java

package net.sourceforge.pmd.ast;

public class ASTNameList extends SimpleNode {
    public ASTNameList(int id) {
        super(id);
    }

    public ASTNameList(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTPreDecrementExpression
```java

package net.sourceforge.pmd.ast;

public class ASTPreDecrementExpression extends SimpleNode {
    public ASTPreDecrementExpression(int id) {
        super(id);
    }

    public ASTPreDecrementExpression(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTClassBody
```java

package net.sourceforge.pmd.ast;

public class ASTClassBody extends SimpleNode {
    public ASTClassBody(int id) {
        super(id);
    }

    public ASTClassBody(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTForStatement
```java

package net.sourceforge.pmd.ast;

public class ASTForStatement extends SimpleNode {
    public ASTForStatement(int id) {
        super(id);
    }

    public ASTForStatement(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTType
```java

package net.sourceforge.pmd.ast;

public class ASTType extends SimpleNode {
    public ASTType(int id) {
        super(id);
    }

    public ASTType(JavaParser p, int id) {
        super(p, id);
    }

    private boolean isArray;
    private int dimensions;

    public boolean isArray() {
        return this.isArray;
    }

    public void setIsArray() {
        this.isArray = true;
    }

    public void addDimension() {
        dimensions++;
    }

    public int getDimensions() {
        return dimensions;
    }

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void dump(String prefix) {
        String out = toString(prefix) + ":";
        if (isArray()) {
            out += "(array";
            for (int i=0;i<getDimensions();i++) {
                out += "[";
            }
            out += ")";
        }
        System.out.println(out);
        dumpChildren(prefix);
    }

}
```

File: net.sourceforge.pmd.ast.ASTUnaryExpression
```java

package net.sourceforge.pmd.ast;

public class ASTUnaryExpression extends SimpleNode {
    public ASTUnaryExpression(int id) {
        super(id);
        setDiscardable();
    }

    public ASTUnaryExpression(JavaParser p, int id) {
        super(p, id);
        setDiscardable();
    }

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void dump(String prefix) {
        System.out.println(toString(prefix) + ":" + (getImage()));
        dumpChildren(prefix);
    }
}
```

File: net.sourceforge.pmd.ast.ASTCastExpression
```java

package net.sourceforge.pmd.ast;

public class ASTCastExpression extends SimpleNode {
    public ASTCastExpression(int id) {
        super(id);
    }

    public ASTCastExpression(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTConditionalExpression
```java

package net.sourceforge.pmd.ast;

public class ASTConditionalExpression extends SimpleNode {
    public ASTConditionalExpression(int id) {
        super(id);
        setDiscardable();
    }

    public ASTConditionalExpression(JavaParser p, int id) {
        super(p, id);
        setDiscardable();
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTContinueStatement
```java

package net.sourceforge.pmd.ast;

public class ASTContinueStatement extends SimpleNode {
    public ASTContinueStatement(int id) {
        super(id);
    }

    public ASTContinueStatement(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTClassBodyDeclaration
```java

package net.sourceforge.pmd.ast;

public class ASTClassBodyDeclaration extends SimpleNode {
    public ASTClassBodyDeclaration(int id) {
        super(id);
    }

    public ASTClassBodyDeclaration(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public boolean isAnonymousInnerClass() {
        return jjtGetParent() instanceof ASTClassBody && jjtGetParent().jjtGetParent() instanceof ASTAllocationExpression;
    }
}
```

File: net.sourceforge.pmd.ast.ASTConditionalAndExpression
```java

package net.sourceforge.pmd.ast;

public class ASTConditionalAndExpression extends SimpleNode {
    public ASTConditionalAndExpression(int id) {
        super(id);
    }

    public ASTConditionalAndExpression(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTRelationalExpression
```java

package net.sourceforge.pmd.ast;

public class ASTRelationalExpression extends SimpleNode {
    public ASTRelationalExpression(int id) {
        super(id);
    }

    public ASTRelationalExpression(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTUnmodifiedInterfaceDeclaration
```java

package net.sourceforge.pmd.ast;

public class ASTUnmodifiedInterfaceDeclaration extends SimpleNode {
    public ASTUnmodifiedInterfaceDeclaration(int id) {
        super(id);
    }

    public ASTUnmodifiedInterfaceDeclaration(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTBlock
```java

package net.sourceforge.pmd.ast;

public class ASTBlock extends SimpleNode {
    public ASTBlock(int id) {
        super(id);
    }

    public ASTBlock(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.JavaParserTokenManager
```java
package net.sourceforge.pmd.ast;

public class JavaParserTokenManager implements JavaParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x40000L) != 0L)
            return 4;
         if ((active0 & 0x7ffffffffffff000L) != 0L)
         {
            jjmatchedKind = 71;
            return 28;
         }
         if ((active0 & 0x100L) != 0L || (active1 & 0x1002000000000L) != 0L)
            return 49;
         return -1;
      case 1:
         if ((active0 & 0x201800000L) != 0L)
            return 28;
         if ((active0 & 0x7ffffffdfe7ff000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return 28;
         }
         if ((active0 & 0x100L) != 0L)
            return 54;
         return -1;
      case 2:
         if ((active0 & 0x400026080000000L) != 0L)
            return 28;
         if ((active0 & 0x7bfffd9d7f7ff000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 2;
            }
            return 28;
         }
         return -1;
      case 3:
         if ((active0 & 0xa20048102058000L) != 0L)
            return 28;
         if ((active0 & 0x71dff95c7d7a7000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 3;
            return 28;
         }
         return -1;
      case 4:
         if ((active0 & 0x20c50000781a4000L) != 0L)
            return 28;
         if ((active0 & 0x511af95c05603000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 4;
            }
            return 28;
         }
         return -1;
      case 5:
         if ((active0 & 0x8ac10801000000L) != 0L)
            return 28;
         if ((active0 & 0x5110385424603000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
            return 28;
         }
         return -1;
      case 6:
         if ((active0 & 0x5110205400201000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 6;
            return 28;
         }
         if ((active0 & 0x180024402000L) != 0L)
            return 28;
         return -1;
      case 7:
         if ((active0 & 0x5000000000201000L) != 0L)
            return 28;
         if ((active0 & 0x110205400000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 7;
            return 28;
         }
         return -1;
      case 8:
         if ((active0 & 0x100204000000000L) != 0L)
            return 28;
         if ((active0 & 0x10001400000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 8;
            return 28;
         }
         return -1;
      case 9:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 9;
            return 28;
         }
         if ((active0 & 0x1400000000L) != 0L)
            return 28;
         return -1;
      case 10:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 10;
            return 28;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 4);
      case 26:
         return jjStopAtPos(0, 120);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L);
      case 37:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000000L);
      case 38:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000080000000L);
      case 40:
         return jjStopAtPos(0, 74);
      case 41:
         return jjStopAtPos(0, 75);
      case 42:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L);
      case 43:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200100000000L);
      case 44:
         return jjStopAtPos(0, 81);
      case 45:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400200000000L);
      case 46:
         return jjStartNfaWithStates_0(0, 82, 4);
      case 47:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_0(0x100L, 0x1000000000000L);
      case 58:
         return jjStopAtPos(0, 89);
      case 59:
         return jjStopAtPos(0, 80);
      case 60:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20040008000000L);
      case 61:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);
      case 62:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc0180010000000L);
      case 63:
         return jjStopAtPos(0, 88);
      case 91:
         return jjStopAtPos(0, 78);
      case 93:
         return jjStopAtPos(0, 79);
      case 94:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0xe000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3f0000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1c00000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x6000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xf8000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x7e00000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x70000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x780000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x401f000000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x7e0000000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1800000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 76);
      case 124:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000040000000L);
      case 125:
         return jjStopAtPos(0, 77);
      case 126:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         break;
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 54);
         break;
      case 43:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         break;
      case 45:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 60:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000000000L);
      case 61:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 112);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 113);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 114);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 115);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         break;
      case 62:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc0100000000000L);
      case 91:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x90008030000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x820000400000L, active1, 0L);
      case 102:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 33, 28);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x20e1000000040000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x42080000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x7000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1800008181302000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x700300000004000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4002000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4440000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000008000L, active1, 0L);
      case 124:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 117);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(2, 118);
         break;
      case 62:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000000L);
      case 93:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(2, 121);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1020000000c0000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2828100000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000040008000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10008030300000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1200040002000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000c00000000L, active1, 0L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0x40c0000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1002011000L, active1, 0L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x814104028000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000001000000L, active1, 0L);
      case 119:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 28);
         break;
      case 121:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(3, 119);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000070404000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000020000L, active1, 0L);
      case 100:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 28);
         break;
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 28);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 28);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 28);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x4004004000000L, active1, 0L);
      case 103:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000010000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000400400002000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000800000000L, active1, 0L);
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x8180000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0xa201000201000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x181000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4008000000000000L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 28);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x200400002000L);
      case 104:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2400000200000L);
      case 107:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 28);
         break;
      case 108:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x21000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 114:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x804800001000L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 28);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 28);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 119:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x3000L);
      case 99:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 28);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 28);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 28);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 104:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1100000000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x20400000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000200000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L);
      case 115:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 28);
         break;
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000001000L);
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 28);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000400000000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L);
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 28);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 28);
         break;
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 121:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 28);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 28);
         return jjMoveStringLiteralDfa8_0(active0, 0x201000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x110000400000000L);
      case 112:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 28);
         break;
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 12, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 28);
         break;
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 56, 28);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 36, 28);
         break;
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 34, 28);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 52, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 57;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 49:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 54;
                  else if (curChar == 47)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  else if (curChar == 47)
                     jjAddStates(10, 11);
                  else if (curChar == 36)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(28);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 39)
                     jjAddStates(15, 16);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddStates(17, 19);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddStates(20, 22);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 39)
                     jjAddStates(15, 16);
                  break;
               case 10:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 69)
                     kind = 69;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 11);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(12, 14);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 22:
                  if (curChar == 34 && kind > 70)
                     kind = 70;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 27:
                  if (curChar != 36)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar != 46)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddStates(27, 29);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddStates(27, 29);
                  break;
               case 34:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(35, 8);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(39, 8);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 42:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 8);
                  break;
               case 44:
                  if (curChar != 48)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddStates(17, 19);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(46, 2);
                  break;
               case 47:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(47, 2);
                  break;
               case 48:
                  if (curChar == 47)
                     jjAddStates(10, 11);
                  break;
               case 50:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddStates(0, 2);
                  break;
               case 51:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 52:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 53:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 56:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 28:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(28);
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(33, 34);
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(35, 37);
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(38, 40);
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(41, 42);
                  break;
               case 37:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(43, 44);
                  break;
               case 41:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 45:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(46, 2);
                  break;
               case 50:
                  if (kind > 6)
                     kind = 6;
                  jjAddStates(0, 2);
                  break;
               case 55:
                  if (kind > 7)
                     kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 28:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(28);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(12, 14);
                  break;
               case 50:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjAddStates(0, 2);
                  break;
               case 55:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 57 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x200L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   50, 51, 53, 30, 31, 36, 37, 40, 41, 8, 49, 56, 19, 20, 22, 10, 
   12, 45, 47, 2, 4, 5, 8, 19, 20, 24, 22, 32, 33, 8, 40, 41, 
   8, 6, 7, 13, 14, 16, 21, 23, 25, 34, 35, 38, 39, 42, 43, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, 
"\141\142\163\164\162\141\143\164", "\142\157\157\154\145\141\156", "\142\162\145\141\153", "\142\171\164\145", 
"\143\141\163\145", "\143\141\164\143\150", "\143\150\141\162", "\143\154\141\163\163", 
"\143\157\156\163\164", "\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", 
"\144\157", "\144\157\165\142\154\145", "\145\154\163\145", 
"\145\170\164\145\156\144\163", "\146\141\154\163\145", "\146\151\156\141\154", 
"\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", "\147\157\164\157", "\151\146", 
"\151\155\160\154\145\155\145\156\164\163", "\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", 
"\151\156\164", "\151\156\164\145\162\146\141\143\145", "\154\157\156\147", 
"\156\141\164\151\166\145", "\156\145\167", "\156\165\154\154", "\160\141\143\153\141\147\145", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\162\145\164\165\162\156", "\163\150\157\162\164", "\163\164\141\164\151\143", "\163\165\160\145\162", 
"\163\167\151\164\143\150", "\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", 
"\164\150\162\157\167", "\164\150\162\157\167\163", "\164\162\141\156\163\151\145\156\164", 
"\164\162\165\145", "\164\162\171", "\166\157\151\144", "\166\157\154\141\164\151\154\145", 
"\167\150\151\154\145", "\163\164\162\151\143\164\146\160", null, null, null, null, null, null, null, 
null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", 
"\56", "\75", "\76", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", 
"\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", 
"\57", "\46", "\174", "\136", "\45", "\74\74", "\76\76", "\76\76\76", "\53\75", 
"\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", 
"\76\76\75", "\76\76\76\75", "\32", "\176\133\135", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, 1, 2, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff001L, 0x3fffffffffffce8L, 
};
static final long[] jjtoSkip = {
   0x67eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x67eL, 0x0L, 
};
static final long[] jjtoMore = {
   0x980L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[57];
private final int[] jjstateSet = new int[114];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public JavaParserTokenManager(CharStream stream)
{
   input_stream = stream;
}
public JavaParserTokenManager(CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 57; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}
```

File: net.sourceforge.pmd.ast.ASTFieldDeclaration
```java

package net.sourceforge.pmd.ast;

public class ASTFieldDeclaration extends AccessNode {
    public ASTFieldDeclaration(int id) {
        super(id);
    }

    public ASTFieldDeclaration(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void dump(String prefix) {
        System.out.println(collectDumpedModifiers(prefix));
        dumpChildren(prefix);
    }

}
```

File: net.sourceforge.pmd.ast.JavaParserTreeConstants
```java

package net.sourceforge.pmd.ast;

public interface JavaParserTreeConstants
{
  public int JJTCOMPILATIONUNIT = 0;
  public int JJTPACKAGEDECLARATION = 1;
  public int JJTIMPORTDECLARATION = 2;
  public int JJTTYPEDECLARATION = 3;
  public int JJTCLASSDECLARATION = 4;
  public int JJTUNMODIFIEDCLASSDECLARATION = 5;
  public int JJTCLASSBODY = 6;
  public int JJTNESTEDCLASSDECLARATION = 7;
  public int JJTCLASSBODYDECLARATION = 8;
  public int JJTENUMDECLARATION = 9;
  public int JJTENUMELEMENT = 10;
  public int JJTMETHODDECLARATIONLOOKAHEAD = 11;
  public int JJTINTERFACEDECLARATION = 12;
  public int JJTNESTEDINTERFACEDECLARATION = 13;
  public int JJTUNMODIFIEDINTERFACEDECLARATION = 14;
  public int JJTINTERFACEMEMBERDECLARATION = 15;
  public int JJTFIELDDECLARATION = 16;
  public int JJTVARIABLEDECLARATOR = 17;
  public int JJTVARIABLEDECLARATORID = 18;
  public int JJTVARIABLEINITIALIZER = 19;
  public int JJTARRAYINITIALIZER = 20;
  public int JJTMETHODDECLARATION = 21;
  public int JJTMETHODDECLARATOR = 22;
  public int JJTFORMALPARAMETERS = 23;
  public int JJTFORMALPARAMETER = 24;
  public int JJTCONSTRUCTORDECLARATION = 25;
  public int JJTEXPLICITCONSTRUCTORINVOCATION = 26;
  public int JJTINITIALIZER = 27;
  public int JJTTYPE = 28;
  public int JJTPRIMITIVETYPE = 29;
  public int JJTRESULTTYPE = 30;
  public int JJTNAME = 31;
  public int JJTNAMELIST = 32;
  public int JJTEXPRESSION = 33;
  public int JJTASSIGNMENTOPERATOR = 34;
  public int JJTCONDITIONALEXPRESSION = 35;
  public int JJTCONDITIONALOREXPRESSION = 36;
  public int JJTCONDITIONALANDEXPRESSION = 37;
  public int JJTINCLUSIVEOREXPRESSION = 38;
  public int JJTEXCLUSIVEOREXPRESSION = 39;
  public int JJTANDEXPRESSION = 40;
  public int JJTEQUALITYEXPRESSION = 41;
  public int JJTINSTANCEOFEXPRESSION = 42;
  public int JJTRELATIONALEXPRESSION = 43;
  public int JJTSHIFTEXPRESSION = 44;
  public int JJTADDITIVEEXPRESSION = 45;
  public int JJTMULTIPLICATIVEEXPRESSION = 46;
  public int JJTUNARYEXPRESSION = 47;
  public int JJTPREINCREMENTEXPRESSION = 48;
  public int JJTPREDECREMENTEXPRESSION = 49;
  public int JJTUNARYEXPRESSIONNOTPLUSMINUS = 50;
  public int JJTCASTLOOKAHEAD = 51;
  public int JJTPOSTFIXEXPRESSION = 52;
  public int JJTCASTEXPRESSION = 53;
  public int JJTPRIMARYEXPRESSION = 54;
  public int JJTPRIMARYPREFIX = 55;
  public int JJTPRIMARYSUFFIX = 56;
  public int JJTLITERAL = 57;
  public int JJTBOOLEANLITERAL = 58;
  public int JJTNULLLITERAL = 59;
  public int JJTARGUMENTS = 60;
  public int JJTARGUMENTLIST = 61;
  public int JJTALLOCATIONEXPRESSION = 62;
  public int JJTARRAYDIMSANDINITS = 63;
  public int JJTSTATEMENT = 64;
  public int JJTLABELEDSTATEMENT = 65;
  public int JJTBLOCK = 66;
  public int JJTBLOCKSTATEMENT = 67;
  public int JJTLOCALVARIABLEDECLARATION = 68;
  public int JJTEMPTYSTATEMENT = 69;
  public int JJTSTATEMENTEXPRESSION = 70;
  public int JJTSWITCHSTATEMENT = 71;
  public int JJTSWITCHLABEL = 72;
  public int JJTIFSTATEMENT = 73;
  public int JJTWHILESTATEMENT = 74;
  public int JJTDOSTATEMENT = 75;
  public int JJTFORSTATEMENT = 76;
  public int JJTFORINIT = 77;
  public int JJTSTATEMENTEXPRESSIONLIST = 78;
  public int JJTFORUPDATE = 79;
  public int JJTBREAKSTATEMENT = 80;
  public int JJTCONTINUESTATEMENT = 81;
  public int JJTRETURNSTATEMENT = 82;
  public int JJTTHROWSTATEMENT = 83;
  public int JJTSYNCHRONIZEDSTATEMENT = 84;
  public int JJTTRYSTATEMENT = 85;
  public int JJTASSERTSTATEMENT = 86;


  public String[] jjtNodeName = {
    "CompilationUnit",
    "PackageDeclaration",
    "ImportDeclaration",
    "TypeDeclaration",
    "ClassDeclaration",
    "UnmodifiedClassDeclaration",
    "ClassBody",
    "NestedClassDeclaration",
    "ClassBodyDeclaration",
    "EnumDeclaration",
    "EnumElement",
    "MethodDeclarationLookahead",
    "InterfaceDeclaration",
    "NestedInterfaceDeclaration",
    "UnmodifiedInterfaceDeclaration",
    "InterfaceMemberDeclaration",
    "FieldDeclaration",
    "VariableDeclarator",
    "VariableDeclaratorId",
    "VariableInitializer",
    "ArrayInitializer",
    "MethodDeclaration",
    "MethodDeclarator",
    "FormalParameters",
    "FormalParameter",
    "ConstructorDeclaration",
    "ExplicitConstructorInvocation",
    "Initializer",
    "Type",
    "PrimitiveType",
    "ResultType",
    "Name",
    "NameList",
    "Expression",
    "AssignmentOperator",
    "ConditionalExpression",
    "ConditionalOrExpression",
    "ConditionalAndExpression",
    "InclusiveOrExpression",
    "ExclusiveOrExpression",
    "AndExpression",
    "EqualityExpression",
    "InstanceOfExpression",
    "RelationalExpression",
    "ShiftExpression",
    "AdditiveExpression",
    "MultiplicativeExpression",
    "UnaryExpression",
    "PreIncrementExpression",
    "PreDecrementExpression",
    "UnaryExpressionNotPlusMinus",
    "CastLookahead",
    "PostfixExpression",
    "CastExpression",
    "PrimaryExpression",
    "PrimaryPrefix",
    "PrimarySuffix",
    "Literal",
    "BooleanLiteral",
    "NullLiteral",
    "Arguments",
    "ArgumentList",
    "AllocationExpression",
    "ArrayDimsAndInits",
    "Statement",
    "LabeledStatement",
    "Block",
    "BlockStatement",
    "LocalVariableDeclaration",
    "EmptyStatement",
    "StatementExpression",
    "SwitchStatement",
    "SwitchLabel",
    "IfStatement",
    "WhileStatement",
    "DoStatement",
    "ForStatement",
    "ForInit",
    "StatementExpressionList",
    "ForUpdate",
    "BreakStatement",
    "ContinueStatement",
    "ReturnStatement",
    "ThrowStatement",
    "SynchronizedStatement",
    "TryStatement",
    "AssertStatement",
  };
}
```

File: net.sourceforge.pmd.ast.ASTSwitchStatement
```java

package net.sourceforge.pmd.ast;

public class ASTSwitchStatement extends SimpleNode {
    public ASTSwitchStatement(int id) {
        super(id);
    }

    public ASTSwitchStatement(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.JavaParser
```java
package net.sourceforge.pmd.ast;
  protected JJTJavaParserState jjtree = new JJTJavaParserState();
  private boolean usingAssertAsIdentifier;
  private boolean isJDK15;

  public void setAssertAsIdentifier() {
   this.usingAssertAsIdentifier = true;
  }

  public void setJDK15() {
   this.isJDK15 = true;
  }

  private void checkForBadAssertUsage(String in, String usage) {
    if (!usingAssertAsIdentifier && in.equals("assert")) {
      throw new ParseException("Can't use 'assert' as " + usage + " when running in JDK 1.4 mode!");
    }
  }

  private void checkForBadEnumUsage(String in, String usage) {
    if (isJDK15 && in.equals("enum")) {
      throw new ParseException("Can't use 'enum' as " + usage + " when running in JDK 1.5 mode!");
    }
  }

  private boolean isNextTokenAnAssert() {
    return getToken(1).image.equals("assert");
  }

  private boolean enumLookahead() {
    int x = 1;
    Token tok = null;
    while (true) {
      tok = getToken(x);
      if (tok.image.equals("static") ||
          tok.image.equals("final") ||
          tok.image.equals("public") ||
          tok.image.equals("protected") ||
          tok.image.equals("private") ) {
        x++;
      } else {
        break;
      }
    }
    return tok.image.equals("enum");
  }

  private void checkForDiscard(SimpleNode node) {
    if (node.getImage() == null) {
        node.setDiscardable();
    }
  }

  private void discardNodes(ASTCompilationUnit node) {
      DiscardableNodeCleaner c = new DiscardableNodeCleaner();
      c.clean(node);
  }


  final public ASTCompilationUnit CompilationUnit() throws ParseException {
  ASTCompilationUnit jjtn000 = new ASTCompilationUnit(this, JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PACKAGE:
        PackageDeclaration();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        ImportDeclaration();
      }
      label_2:
      while (true) {
        if (jj_2_1(1)) {
          ;
        } else {
          break label_2;
        }
        TypeDeclaration();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 120:
        jj_consume_token(120);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 121:
        jj_consume_token(121);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          discardNodes(jjtn000);
                  {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new RuntimeException("Missing return statement in function");
  }

  final public void PackageDeclaration() throws ParseException {
  ASTPackageDeclaration jjtn000 = new ASTPackageDeclaration(this, JJTPACKAGEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PACKAGE);
      Name();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ImportDeclaration() throws ParseException {
  ASTImportDeclaration jjtn000 = new ASTImportDeclaration(this, JJTIMPORTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IMPORT);
      Name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(STAR);
                             jjtn000.setImportOnDemand();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TypeDeclaration() throws ParseException {
  ASTTypeDeclaration jjtn000 = new ASTTypeDeclaration(this, JJTTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(2147483647)) {
        ClassDeclaration();
      } else if (enumLookahead()) {
        EnumDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case INTERFACE:
        case PUBLIC:
        case STRICTFP:
          InterfaceDeclaration();
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ClassDeclaration() throws ParseException {
  ASTClassDeclaration jjtn000 = new ASTClassDeclaration(this, JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case FINAL:
        case PUBLIC:
        case STRICTFP:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
          jj_consume_token(ABSTRACT);
                  jjtn000.setAbstract();
          break;
        case FINAL:
          jj_consume_token(FINAL);
                  jjtn000.setFinal();
          break;
        case PUBLIC:
          jj_consume_token(PUBLIC);
                  jjtn000.setPublic();
          break;
        case STRICTFP:
          jj_consume_token(STRICTFP);
                  jjtn000.setStrict();
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      UnmodifiedClassDeclaration();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void UnmodifiedClassDeclaration() throws ParseException {
  ASTUnmodifiedClassDeclaration jjtn000 = new ASTUnmodifiedClassDeclaration(this, JJTUNMODIFIEDCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      jj_consume_token(CLASS);
      t = jj_consume_token(IDENTIFIER);
    jjtn000.setImage( t.image );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
                jjtn000.setHasExplicitExtends();
        Name();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
                   jjtn000.setHasExplicitImplements();
        NameList();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      ClassBody();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ClassBody() throws ParseException {
  ASTClassBody jjtn000 = new ASTClassBody(this, JJTCLASSBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_4:
      while (true) {
        if (jj_2_3(1)) {
          ;
        } else {
          break label_4;
        }
        ClassBodyDeclaration();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NestedClassDeclaration() throws ParseException {
  ASTNestedClassDeclaration jjtn000 = new ASTNestedClassDeclaration(this, JJTNESTEDCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case FINAL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case STRICTFP:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC:
          jj_consume_token(STATIC);
                     jjtn000.setStatic();
          break;
        case ABSTRACT:
          jj_consume_token(ABSTRACT);
                    jjtn000.setAbstract();
          break;
        case FINAL:
          jj_consume_token(FINAL);
                    jjtn000.setFinal();
          break;
        case PUBLIC:
          jj_consume_token(PUBLIC);
                    jjtn000.setPublic();
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
                    jjtn000.setProtected();
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
                    jjtn000.setPrivate();
          break;
        case STRICTFP:
          jj_consume_token(STRICTFP);
                    jjtn000.setStrict();
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      UnmodifiedClassDeclaration();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ClassBodyDeclaration() throws ParseException {
  ASTClassBodyDeclaration jjtn000 = new ASTClassBodyDeclaration(this, JJTCLASSBODYDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_4(2)) {
        Initializer();
      } else if (jj_2_5(2147483647)) {
        NestedClassDeclaration();
      } else if (jj_2_6(2147483647)) {
        NestedInterfaceDeclaration();
      } else if (jj_2_7(2147483647)) {
        ConstructorDeclaration();
      } else if (jj_2_8(2147483647)) {
        MethodDeclaration();
      } else if (enumLookahead()) {
        EnumDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case TRANSIENT:
        case VOLATILE:
        case IDENTIFIER:
          FieldDeclaration();
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EnumDeclaration() throws ParseException {
 ASTEnumDeclaration jjtn000 = new ASTEnumDeclaration(this, JJTENUMDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
                          jjtn000.setPublic();
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
                          jjtn000.setProtected();
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
                          jjtn000.setPrivate();
          break;
        case STATIC:
          jj_consume_token(STATIC);
                          jjtn000.setStatic();
          break;
        case FINAL:
          jj_consume_token(FINAL);
                          jjtn000.setFinal();
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      t = jj_consume_token(IDENTIFIER);
    if (!t.image.equals("enum")) {
      {if (true) throw new ParseException("ERROR: expecting enum");}
    }
    if (!this.isJDK15) {
      {if (true) throw new ParseException("ERROR: Can't use enum as a keyword in pre-JDK 1.5 target");}
    }
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        NameList();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      EnumElement();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        EnumElement();
      }
      jj_consume_token(RBRACE);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EnumElement() throws ParseException {
 ASTEnumElement jjtn000 = new ASTEnumElement(this, JJTENUMELEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(IDENTIFIER);
                      jjtn000.setImage(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        Arguments();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ClassBody();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (RuntimeException)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MethodDeclarationLookahead() throws ParseException {
  ASTMethodDeclarationLookahead jjtn000 = new ASTMethodDeclarationLookahead(this, JJTMETHODDECLARATIONLOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case FINAL:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case SYNCHRONIZED:
        case STRICTFP:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
          break;
        case STATIC:
          jj_consume_token(STATIC);
          break;
        case ABSTRACT:
          jj_consume_token(ABSTRACT);
          break;
        case FINAL:
          jj_consume_token(FINAL);
          break;
        case NATIVE:
          jj_consume_token(NATIVE);
          break;
        case SYNCHRONIZED:
          jj_consume_token(SYNCHRONIZED);
          break;
        case STRICTFP:
          jj_consume_token(STRICTFP);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      ResultType();
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void InterfaceDeclaration() throws ParseException {
  ASTInterfaceDeclaration jjtn000 = new ASTInterfaceDeclaration(this, JJTINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case PUBLIC:
        case STRICTFP:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
          jj_consume_token(ABSTRACT);
                  jjtn000.setAbstract();
          break;
        case PUBLIC:
          jj_consume_token(PUBLIC);
                  jjtn000.setPublic();
          break;
        case STRICTFP:
          jj_consume_token(STRICTFP);
                  jjtn000.setStrict();
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      UnmodifiedInterfaceDeclaration();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NestedInterfaceDeclaration() throws ParseException {
  ASTNestedInterfaceDeclaration jjtn000 = new ASTNestedInterfaceDeclaration(this, JJTNESTEDINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case FINAL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case STRICTFP:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC:
          jj_consume_token(STATIC);
                     jjtn000.setStatic();
          break;
        case ABSTRACT:
          jj_consume_token(ABSTRACT);
                    jjtn000.setAbstract();
          break;
        case FINAL:
          jj_consume_token(FINAL);
                    jjtn000.setFinal();
          break;
        case PUBLIC:
          jj_consume_token(PUBLIC);
                    jjtn000.setPublic();
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
                    jjtn000.setProtected();
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
                    jjtn000.setPrivate();
          break;
        case STRICTFP:
          jj_consume_token(STRICTFP);
                    jjtn000.setStrict();
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      UnmodifiedInterfaceDeclaration();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void UnmodifiedInterfaceDeclaration() throws ParseException {
 ASTUnmodifiedInterfaceDeclaration jjtn000 = new ASTUnmodifiedInterfaceDeclaration(this, JJTUNMODIFIEDINTERFACEDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      jj_consume_token(INTERFACE);
      t = jj_consume_token(IDENTIFIER);
     jjtn000.setImage( t.image );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        NameList();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case STRICTFP:
        case IDENTIFIER:
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_11;
        }
        InterfaceMemberDeclaration();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void InterfaceMemberDeclaration() throws ParseException {
  ASTInterfaceMemberDeclaration jjtn000 = new ASTInterfaceMemberDeclaration(this, JJTINTERFACEMEMBERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_9(2147483647)) {
        NestedClassDeclaration();
      } else if (jj_2_10(2147483647)) {
        NestedInterfaceDeclaration();
      } else if (jj_2_11(2147483647)) {
        MethodDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case TRANSIENT:
        case VOLATILE:
        case IDENTIFIER:
          FieldDeclaration();
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FieldDeclaration() throws ParseException {
  ASTFieldDeclaration jjtn000 = new ASTFieldDeclaration(this, JJTFIELDDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case TRANSIENT:
        case VOLATILE:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
                          jjtn000.setPublic();
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
                          jjtn000.setProtected();
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
                          jjtn000.setPrivate();
          break;
        case STATIC:
          jj_consume_token(STATIC);
                          jjtn000.setStatic();
          break;
        case FINAL:
          jj_consume_token(FINAL);
                          jjtn000.setFinal();
          break;
        case TRANSIENT:
          jj_consume_token(TRANSIENT);
                          jjtn000.setTransient();
          break;
        case VOLATILE:
          jj_consume_token(VOLATILE);
                          jjtn000.setVolatile();
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      Type();
      VariableDeclarator();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VariableDeclarator() throws ParseException {
  ASTVariableDeclarator jjtn000 = new ASTVariableDeclarator(this, JJTVARIABLEDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      VariableDeclaratorId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        VariableInitializer();
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VariableDeclaratorId() throws ParseException {
  ASTVariableDeclaratorId jjtn000 = new ASTVariableDeclaratorId(this, JJTVARIABLEDECLARATORID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s = null;
  Token t = null;
    try {
      t = jj_consume_token(IDENTIFIER);
    s = t.image;
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_14;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    checkForBadAssertUsage(t.image, "a variable name");
    checkForBadEnumUsage(t.image, "a variable name");
    jjtn000.setImage( s );
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VariableInitializer() throws ParseException {
  ASTVariableInitializer jjtn000 = new ASTVariableInitializer(this, JJTVARIABLEINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ArrayInitializer();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        Expression();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ArrayInitializer() throws ParseException {
  ASTArrayInitializer jjtn000 = new ASTArrayInitializer(this, JJTARRAYINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        VariableInitializer();
        label_15:
        while (true) {
          if (jj_2_12(2)) {
            ;
          } else {
            break label_15;
          }
          jj_consume_token(COMMA);
          VariableInitializer();
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MethodDeclaration() throws ParseException {
  ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(this, JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case FINAL:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case SYNCHRONIZED:
        case STRICTFP:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_16;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
                          jjtn000.setPublic();
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
                          jjtn000.setProtected();
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
                          jjtn000.setPrivate();
          break;
        case STATIC:
          jj_consume_token(STATIC);
                          jjtn000.setStatic();
          break;
        case ABSTRACT:
          jj_consume_token(ABSTRACT);
                          jjtn000.setAbstract();
          break;
        case FINAL:
          jj_consume_token(FINAL);
                          jjtn000.setFinal();
          break;
        case NATIVE:
          jj_consume_token(NATIVE);
                          jjtn000.setNative();
          break;
        case SYNCHRONIZED:
          jj_consume_token(SYNCHRONIZED);
                          jjtn000.setSynchronized();
          break;
        case STRICTFP:
          jj_consume_token(STRICTFP);
                          jjtn000.setStrict();
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      ResultType();
      MethodDeclarator();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THROWS:
        jj_consume_token(THROWS);
        NameList();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MethodDeclarator() throws ParseException {
  ASTMethodDeclarator jjtn000 = new ASTMethodDeclarator(this, JJTMETHODDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(IDENTIFIER);
    checkForBadAssertUsage(t.image, "a method name");
    checkForBadEnumUsage(t.image, "a method name");
    jjtn000.setImage( t.image );
      FormalParameters();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_17;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FormalParameters() throws ParseException {
  ASTFormalParameters jjtn000 = new ASTFormalParameters(this, JJTFORMALPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:
        FormalParameter();
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[41] = jj_gen;
            break label_18;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FormalParameter() throws ParseException {
  ASTFormalParameter jjtn000 = new ASTFormalParameter(this, JJTFORMALPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        jj_consume_token(FINAL);
             jjtn000.setFinal();
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      Type();
      VariableDeclaratorId();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ConstructorDeclaration() throws ParseException {
  ASTConstructorDeclaration jjtn000 = new ASTConstructorDeclaration(this, JJTCONSTRUCTORDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
             jjtn000.setPublic();
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
                  jjtn000.setProtected();
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
                 jjtn000.setPrivate();
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      jj_consume_token(IDENTIFIER);
      FormalParameters();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THROWS:
        jj_consume_token(THROWS);
        NameList();
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      if (jj_2_13(2147483647)) {
        ExplicitConstructorInvocation();
      } else {
        ;
      }
      label_19:
      while (true) {
        if (jj_2_14(1)) {
          ;
        } else {
          break label_19;
        }
        BlockStatement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExplicitConstructorInvocation() throws ParseException {
  ASTExplicitConstructorInvocation jjtn000 = new ASTExplicitConstructorInvocation(this, JJTEXPLICITCONSTRUCTORINVOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_16(2147483647)) {
        jj_consume_token(THIS);
                                             ((ASTExplicitConstructorInvocation)jjtn000).setIsThis();
        Arguments();
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          if (jj_2_15(2)) {
            PrimaryExpression();
            jj_consume_token(DOT);
          } else {
            ;
          }
          jj_consume_token(SUPER);
                                                     ((ASTExplicitConstructorInvocation)jjtn000).setIsSuper();
          Arguments();
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Initializer() throws ParseException {
  ASTInitializer jjtn000 = new ASTInitializer(this, JJTINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
              jjtn000.setStatic();
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      Block();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Type() throws ParseException {
  ASTType jjtn000 = new ASTType(this, JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        PrimitiveType();
        break;
      case IDENTIFIER:
        Name();
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[50] = jj_gen;
          break label_20;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
    jjtn000.addDimension();
    jjtn000.setIsArray();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PrimitiveType() throws ParseException {
  ASTPrimitiveType jjtn000 = new ASTPrimitiveType(this, JJTPRIMITIVETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
             jjtn000.setImage("boolean");
        break;
      case CHAR:
        jj_consume_token(CHAR);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
          jjtn000.setImage("char");
        break;
      case BYTE:
        jj_consume_token(BYTE);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
          jjtn000.setImage("byte");
        break;
      case SHORT:
        jj_consume_token(SHORT);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
           jjtn000.setImage("short");
        break;
      case INT:
        jj_consume_token(INT);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.setImage("int");
        break;
      case LONG:
        jj_consume_token(LONG);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
          jjtn000.setImage("long");
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
           jjtn000.setImage("float");
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
            jjtn000.setImage("double");
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ResultType() throws ParseException {
  ASTResultType jjtn000 = new ASTResultType(this, JJTRESULTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        jj_consume_token(VOID);
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:
        Type();
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Name() throws ParseException {
  ASTName jjtn000 = new ASTName(this, JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);StringBuffer s = new StringBuffer();
  Token t = null;
    try {
      t = jj_consume_token(IDENTIFIER);
    jjtn000.testingOnly__setBeginLine( t.beginLine);
    jjtn000.testingOnly__setBeginColumn( t.beginColumn);
    s.append(t.image);
      label_21:
      while (true) {
        if (jj_2_17(2)) {
          ;
        } else {
          break label_21;
        }
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
        s.append(".");
        s.append(t.image);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setImage( s.toString() );
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NameList() throws ParseException {
  ASTNameList jjtn000 = new ASTNameList(this, JJTNAMELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Name();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_22;
        }
        jj_consume_token(COMMA);
        Name();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Expression() throws ParseException {
  ASTExpression jjtn000 = new ASTExpression(this, JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        AssignmentOperator();
        Expression();
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AssignmentOperator() throws ParseException {
  ASTAssignmentOperator jjtn000 = new ASTAssignmentOperator(this, JJTASSIGNMENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setImage("=");
        break;
      case STARASSIGN:
        jj_consume_token(STARASSIGN);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setImage("*=");
        break;
      case SLASHASSIGN:
        jj_consume_token(SLASHASSIGN);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setImage("/=");
        break;
      case REMASSIGN:
        jj_consume_token(REMASSIGN);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setImage("%=");
        break;
      case PLUSASSIGN:
        jj_consume_token(PLUSASSIGN);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setImage("+=");
        break;
      case MINUSASSIGN:
        jj_consume_token(MINUSASSIGN);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setImage("-=");
        break;
      case LSHIFTASSIGN:
        jj_consume_token(LSHIFTASSIGN);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setImage("<<=");
        break;
      case RSIGNEDSHIFTASSIGN:
        jj_consume_token(RSIGNEDSHIFTASSIGN);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setImage(">>=");
        break;
      case RUNSIGNEDSHIFTASSIGN:
        jj_consume_token(RUNSIGNEDSHIFTASSIGN);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setImage(">>>=");
        break;
      case ANDASSIGN:
        jj_consume_token(ANDASSIGN);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setImage("&=");
        break;
      case XORASSIGN:
        jj_consume_token(XORASSIGN);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setImage("^=");
        break;
      case ORASSIGN:
        jj_consume_token(ORASSIGN);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setImage("|=");
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
  }

  final public void ConditionalExpression() throws ParseException {
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(this, JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalOrExpression();
                             checkForDiscard(jjtn000);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HOOK:
        jj_consume_token(HOOK);
                                                               jjtn000.setUnDiscardable();
        Expression();
        jj_consume_token(COLON);
        ConditionalExpression();
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
  ASTConditionalOrExpression jjtn000 = new ASTConditionalOrExpression(this, JJTCONDITIONALOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalAndExpression();
                              checkForDiscard(jjtn000);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SC_OR:
          ;
          break;
        default:
          jj_la1[57] = jj_gen;
          break label_23;
        }
        jj_consume_token(SC_OR);
                                                                 jjtn000.setUnDiscardable();
        ConditionalAndExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
  ASTConditionalAndExpression jjtn000 = new ASTConditionalAndExpression(this, JJTCONDITIONALANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      InclusiveOrExpression();
                           checkForDiscard(jjtn000);
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SC_AND:
          ;
          break;
        default:
          jj_la1[58] = jj_gen;
          break label_24;
        }
        jj_consume_token(SC_AND);
                                                               jjtn000.setUnDiscardable();
        InclusiveOrExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void InclusiveOrExpression() throws ParseException {
  ASTInclusiveOrExpression jjtn000 = new ASTInclusiveOrExpression(this, JJTINCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExclusiveOrExpression();
                           checkForDiscard(jjtn000);
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BIT_OR:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_25;
        }
        jj_consume_token(BIT_OR);
                                                             jjtn000.setUnDiscardable();
        ExclusiveOrExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExclusiveOrExpression() throws ParseException {
  ASTExclusiveOrExpression jjtn000 = new ASTExclusiveOrExpression(this, JJTEXCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AndExpression();
                   checkForDiscard(jjtn000);
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XOR:
          ;
          break;
        default:
          jj_la1[60] = jj_gen;
          break label_26;
        }
        jj_consume_token(XOR);
                                                     jjtn000.setUnDiscardable();
        AndExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AndExpression() throws ParseException {
  ASTAndExpression jjtn000 = new ASTAndExpression(this, JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EqualityExpression();
                        checkForDiscard(jjtn000);
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BIT_AND:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_27;
        }
        jj_consume_token(BIT_AND);
                                                          jjtn000.setUnDiscardable();
        EqualityExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EqualityExpression() throws ParseException {
  ASTEqualityExpression jjtn000 = new ASTEqualityExpression(this, JJTEQUALITYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      InstanceOfExpression();
                          checkForDiscard(jjtn000);
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case NE:
          ;
          break;
        default:
          jj_la1[62] = jj_gen;
          break label_28;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          jj_consume_token(EQ);
                                                               jjtn000.setImage("==");jjtn000.setUnDiscardable();
          break;
        case NE:
          jj_consume_token(NE);
                                                                                                                            jjtn000.setImage("!=");jjtn000.setUnDiscardable();
          break;
        default:
          jj_la1[63] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        InstanceOfExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void InstanceOfExpression() throws ParseException {
  ASTInstanceOfExpression jjtn000 = new ASTInstanceOfExpression(this, JJTINSTANCEOFEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      RelationalExpression();
                          checkForDiscard(jjtn000);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTANCEOF:
        jj_consume_token(INSTANCEOF);
                                                                     jjtn000.setUnDiscardable();
        Type();
        break;
      default:
        jj_la1[64] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void RelationalExpression() throws ParseException {
  ASTRelationalExpression jjtn000 = new ASTRelationalExpression(this, JJTRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ShiftExpression();
                     checkForDiscard(jjtn000);
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GT:
        case LT:
        case LE:
        case GE:
          ;
          break;
        default:
          jj_la1[65] = jj_gen;
          break label_29;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          jj_consume_token(LT);
                                                         jjtn000.setImage("<");jjtn000.setUnDiscardable();
          break;
        case GT:
          jj_consume_token(GT);
                                                                                                                   jjtn000.setImage(">");jjtn000.setUnDiscardable();
          break;
        case LE:
          jj_consume_token(LE);
                                                                                                                                                                              jjtn000.setImage("<=");jjtn000.setUnDiscardable();
          break;
        case GE:
          jj_consume_token(GE);
                                                                                                                                                                                                                                          jjtn000.setImage(">=");jjtn000.setUnDiscardable();
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ShiftExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ShiftExpression() throws ParseException {
  ASTShiftExpression jjtn000 = new ASTShiftExpression(this, JJTSHIFTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AdditiveExpression();
                        checkForDiscard(jjtn000);
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSHIFT:
        case RSIGNEDSHIFT:
        case RUNSIGNEDSHIFT:
          ;
          break;
        default:
          jj_la1[67] = jj_gen;
          break label_30;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSHIFT:
          jj_consume_token(LSHIFT);
                                                             jjtn000.setImage("<<");jjtn000.setUnDiscardable();
          break;
        case RSIGNEDSHIFT:
          jj_consume_token(RSIGNEDSHIFT);
                                                                                                                         jjtn000.setImage(">>");jjtn000.setUnDiscardable();
          break;
        case RUNSIGNEDSHIFT:
          jj_consume_token(RUNSIGNEDSHIFT);
                                                                                                                                                                                      jjtn000.setImage(">>>");jjtn000.setUnDiscardable();
          break;
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        AdditiveExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AdditiveExpression() throws ParseException {
  ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(this, JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultiplicativeExpression();
                              checkForDiscard(jjtn000);
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_31;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
                                                                  jjtn000.setImage("+");jjtn000.setUnDiscardable();
          break;
        case MINUS:
          jj_consume_token(MINUS);
                                                                                                                            jjtn000.setImage("-");jjtn000.setUnDiscardable();
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        MultiplicativeExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
  ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(this, JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UnaryExpression();
                     checkForDiscard(jjtn000);
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case SLASH:
        case REM:
          ;
          break;
        default:
          jj_la1[71] = jj_gen;
          break label_32;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(STAR);
                                                         jjtn000.setImage("*");jjtn000.setUnDiscardable();
          break;
        case SLASH:
          jj_consume_token(SLASH);
                                                                                                                   jjtn000.setImage("/");jjtn000.setUnDiscardable();
          break;
        case REM:
          jj_consume_token(REM);
                                                                                                                                                                             jjtn000.setImage("%");jjtn000.setUnDiscardable();
          break;
        default:
          jj_la1[72] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void UnaryExpression() throws ParseException {
  ASTUnaryExpression jjtn000 = new ASTUnaryExpression(this, JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
         jjtn000.setImage("+");jjtn000.setUnDiscardable();
          break;
        case MINUS:
          jj_consume_token(MINUS);
                                                                   jjtn000.setImage("-");jjtn000.setUnDiscardable();
          break;
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
        break;
      case INCR:
        PreIncrementExpression();
        break;
      case DECR:
        PreDecrementExpression();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
        UnaryExpressionNotPlusMinus();
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PreIncrementExpression() throws ParseException {
  ASTPreIncrementExpression jjtn000 = new ASTPreIncrementExpression(this, JJTPREINCREMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INCR);
      PrimaryExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PreDecrementExpression() throws ParseException {
  ASTPreDecrementExpression jjtn000 = new ASTPreDecrementExpression(this, JJTPREDECREMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DECR);
      PrimaryExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void UnaryExpressionNotPlusMinus() throws ParseException {
  ASTUnaryExpressionNotPlusMinus jjtn000 = new ASTUnaryExpressionNotPlusMinus(this, JJTUNARYEXPRESSIONNOTPLUSMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
      case TILDE:
  checkForDiscard(jjtn000);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          jj_consume_token(TILDE);
        jjtn000.setImage("~");
          break;
        case BANG:
          jj_consume_token(BANG);
                                       jjtn000.setImage("!");
          break;
        default:
          jj_la1[75] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
        break;
      default:
        jj_la1[76] = jj_gen;
        if (jj_2_18(2147483647)) {
          CastExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
            PostfixExpression();
            break;
          default:
            jj_la1[77] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (RuntimeException)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void CastLookahead() throws ParseException {
  ASTCastLookahead jjtn000 = new ASTCastLookahead(this, JJTCASTLOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_19(2)) {
        jj_consume_token(LPAREN);
        PrimitiveType();
      } else if (jj_2_20(2147483647)) {
        jj_consume_token(LPAREN);
        Name();
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          Name();
          jj_consume_token(RPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TILDE:
            jj_consume_token(TILDE);
            break;
          case BANG:
            jj_consume_token(BANG);
            break;
          case LPAREN:
            jj_consume_token(LPAREN);
            break;
          case IDENTIFIER:
            jj_consume_token(IDENTIFIER);
            break;
          case THIS:
            jj_consume_token(THIS);
            break;
          case SUPER:
            jj_consume_token(SUPER);
            break;
          case NEW:
            jj_consume_token(NEW);
            break;
          case FALSE:
          case NULL:
          case TRUE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
            Literal();
            break;
          default:
            jj_la1[78] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[79] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PostfixExpression() throws ParseException {
  ASTPostfixExpression jjtn000 = new ASTPostfixExpression(this, JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
      case DECR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          jj_consume_token(INCR);
                              jjtn000.setImage("++");jjtn000.setUnDiscardable();
          break;
        case DECR:
          jj_consume_token(DECR);
                                                                                          jjtn000.setImage("--");jjtn000.setUnDiscardable();
          break;
        default:
          jj_la1[80] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[81] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CastExpression() throws ParseException {
  ASTCastExpression jjtn000 = new ASTCastExpression(this, JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_21(2147483647)) {
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(RPAREN);
        UnaryExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          Type();
          jj_consume_token(RPAREN);
          UnaryExpressionNotPlusMinus();
          break;
        default:
          jj_la1[82] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PrimaryExpression() throws ParseException {
  ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(this, JJTPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimaryPrefix();
      label_33:
      while (true) {
        if (jj_2_22(2)) {
          ;
        } else {
          break label_33;
        }
        PrimarySuffix();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PrimaryPrefix() throws ParseException {
  ASTPrimaryPrefix jjtn000 = new ASTPrimaryPrefix(this, JJTPRIMARYPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case NULL:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        Literal();
        break;
      case THIS:
        jj_consume_token(THIS);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
          jjtn000.setUsesThisModifier();
        break;
      case SUPER:
        jj_consume_token(SUPER);
            jjtn000.setUsesSuperModifier();
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
                                                                 jjtn000.setImage(t.image);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        break;
      case NEW:
        AllocationExpression();
        break;
      default:
        jj_la1[83] = jj_gen;
        if (jj_2_23(2147483647)) {
          ResultType();
          jj_consume_token(DOT);
          jj_consume_token(CLASS);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            Name();
            break;
          default:
            jj_la1[84] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PrimarySuffix() throws ParseException {
  ASTPrimarySuffix jjtn000 = new ASTPrimarySuffix(this, JJTPRIMARYSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s = null;
  Token t = null;
    try {
      if (jj_2_24(2)) {
        jj_consume_token(DOT);
        jj_consume_token(THIS);
      } else if (jj_2_25(2)) {
        jj_consume_token(DOT);
        jj_consume_token(SUPER);
      } else if (jj_2_26(2)) {
        jj_consume_token(DOT);
        AllocationExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          jj_consume_token(LBRACKET);
          Expression();
          jj_consume_token(RBRACKET);
          break;
        case DOT:
          jj_consume_token(DOT);
          t = jj_consume_token(IDENTIFIER);
                      s = t.image;
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                     jjtn000.setImage(s);
          break;
        case LPAREN:
          Arguments();
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setIsArguments();
          break;
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Literal() throws ParseException {
  ASTLiteral jjtn000 = new ASTLiteral(this, JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
  Token t = null;
        t = jj_consume_token(INTEGER_LITERAL);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.setImage(t.image);
        break;
      case FLOATING_POINT_LITERAL:
        t = jj_consume_token(FLOATING_POINT_LITERAL);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.setImage(t.image);
        break;
      case CHARACTER_LITERAL:
        t = jj_consume_token(CHARACTER_LITERAL);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.setImage(t.image);
        break;
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.setImage(t.image);
        break;
      case FALSE:
      case TRUE:
        BooleanLiteral();
        break;
      case NULL:
        NullLiteral();
        break;
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (RuntimeException)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void BooleanLiteral() throws ParseException {
  ASTBooleanLiteral jjtn000 = new ASTBooleanLiteral(this, JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        jj_consume_token(TRUE);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.setTrue();
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NullLiteral() throws ParseException {
  ASTNullLiteral jjtn000 = new ASTNullLiteral(this, JJTNULLLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NULL);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Arguments() throws ParseException {
  ASTArguments jjtn000 = new ASTArguments(this, JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ArgumentList();
        break;
      default:
        jj_la1[88] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ArgumentList() throws ParseException {
  ASTArgumentList jjtn000 = new ASTArgumentList(this, JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[89] = jj_gen;
          break label_34;
        }
        jj_consume_token(COMMA);
        Expression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AllocationExpression() throws ParseException {
  ASTAllocationExpression jjtn000 = new ASTAllocationExpression(this, JJTALLOCATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_27(2)) {
        jj_consume_token(NEW);
        PrimitiveType();
        ArrayDimsAndInits();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          jj_consume_token(NEW);
          Name();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ArrayDimsAndInits();
            break;
          case LPAREN:
            Arguments();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
              ClassBody();
              break;
            default:
              jj_la1[90] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[91] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[92] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ArrayDimsAndInits() throws ParseException {
  ASTArrayDimsAndInits jjtn000 = new ASTArrayDimsAndInits(this, JJTARRAYDIMSANDINITS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_30(2)) {
        label_35:
        while (true) {
          jj_consume_token(LBRACKET);
          Expression();
          jj_consume_token(RBRACKET);
          if (jj_2_28(2)) {
            ;
          } else {
            break label_35;
          }
        }
        label_36:
        while (true) {
          if (jj_2_29(2)) {
            ;
          } else {
            break label_36;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          label_37:
          while (true) {
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[93] = jj_gen;
              break label_37;
            }
          }
          ArrayInitializer();
          break;
        default:
          jj_la1[94] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Statement() throws ParseException {
  ASTStatement jjtn000 = new ASTStatement(this, JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (isNextTokenAnAssert()) {
        AssertStatement();
      } else if (jj_2_31(2)) {
        LabeledStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          Block();
          break;
        case SEMICOLON:
          EmptyStatement();
          break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          StatementExpression();
          jj_consume_token(SEMICOLON);
          break;
        case SWITCH:
          SwitchStatement();
          break;
        case IF:
          IfStatement();
          break;
        case WHILE:
          WhileStatement();
          break;
        case DO:
          DoStatement();
          break;
        case FOR:
          ForStatement();
          break;
        case BREAK:
          BreakStatement();
          break;
        case CONTINUE:
          ContinueStatement();
          break;
        case RETURN:
          ReturnStatement();
          break;
        case THROW:
          ThrowStatement();
          break;
        case SYNCHRONIZED:
          SynchronizedStatement();
          break;
        case TRY:
          TryStatement();
          break;
        default:
          jj_la1[95] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void LabeledStatement() throws ParseException {
  ASTLabeledStatement jjtn000 = new ASTLabeledStatement(this, JJTLABELEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Block() throws ParseException {
  ASTBlock jjtn000 = new ASTBlock(this, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_38:
      while (true) {
        if (jj_2_32(1)) {
          ;
        } else {
          break label_38;
        }
        BlockStatement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BlockStatement() throws ParseException {
  ASTBlockStatement jjtn000 = new ASTBlockStatement(this, JJTBLOCKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (isNextTokenAnAssert()) {
        Statement();
      } else if (jj_2_33(2147483647)) {
        LocalVariableDeclaration();
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL:
          jj_consume_token(FINAL);
          TypeDeclaration();
          break;
        default:
          jj_la1[96] = jj_gen;
          if (jj_2_34(1)) {
            Statement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CLASS:
              UnmodifiedClassDeclaration();
              break;
            case INTERFACE:
              UnmodifiedInterfaceDeclaration();
              break;
            default:
              jj_la1[97] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void LocalVariableDeclaration() throws ParseException {
  ASTLocalVariableDeclaration jjtn000 = new ASTLocalVariableDeclaration(this, JJTLOCALVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        jj_consume_token(FINAL);
             jjtn000.setFinal();
        break;
      default:
        jj_la1[98] = jj_gen;
        ;
      }
      Type();
      VariableDeclarator();
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[99] = jj_gen;
          break label_39;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EmptyStatement() throws ParseException {
  ASTEmptyStatement jjtn000 = new ASTEmptyStatement(this, JJTEMPTYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SEMICOLON);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void StatementExpression() throws ParseException {
  ASTStatementExpression jjtn000 = new ASTStatementExpression(this, JJTSTATEMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        PreIncrementExpression();
        break;
      case DECR:
        PreDecrementExpression();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        PrimaryExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
        case INCR:
        case DECR:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INCR:
            jj_consume_token(INCR);
            break;
          case DECR:
            jj_consume_token(DECR);
            break;
          case ASSIGN:
          case PLUSASSIGN:
          case MINUSASSIGN:
          case STARASSIGN:
          case SLASHASSIGN:
          case ANDASSIGN:
          case ORASSIGN:
          case XORASSIGN:
          case REMASSIGN:
          case LSHIFTASSIGN:
          case RSIGNEDSHIFTASSIGN:
          case RUNSIGNEDSHIFTASSIGN:
            AssignmentOperator();
            Expression();
            break;
          default:
            jj_la1[100] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[101] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SwitchStatement() throws ParseException {
  ASTSwitchStatement jjtn000 = new ASTSwitchStatement(this, JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
        case _DEFAULT:
          ;
          break;
        default:
          jj_la1[103] = jj_gen;
          break label_40;
        }
        SwitchLabel();
        label_41:
        while (true) {
          if (jj_2_35(1)) {
            ;
          } else {
            break label_41;
          }
          BlockStatement();
        }
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SwitchLabel() throws ParseException {
  ASTSwitchLabel jjtn000 = new ASTSwitchLabel(this, JJTSWITCHLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        jj_consume_token(CASE);
        Expression();
        jj_consume_token(COLON);
        break;
      case _DEFAULT:
        jj_consume_token(_DEFAULT);
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[104] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IfStatement() throws ParseException {
ASTIfStatement jjtn000 = new ASTIfStatement(this, JJTIFSTATEMENT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);boolean hasElse = false;
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
                                                               hasElse = true;
        Statement();
        break;
      default:
        jj_la1[105] = jj_gen;
        ;
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
    if (hasElse) {
        jjtn000.setHasElse();
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void WhileStatement() throws ParseException {
  ASTWhileStatement jjtn000 = new ASTWhileStatement(this, JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DoStatement() throws ParseException {
  ASTDoStatement jjtn000 = new ASTDoStatement(this, JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
      Statement();
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForStatement() throws ParseException {
  ASTForStatement jjtn000 = new ASTForStatement(this, JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        ForInit();
        break;
      default:
        jj_la1[106] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        Expression();
        break;
      default:
        jj_la1[107] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        ForUpdate();
        break;
      default:
        jj_la1[108] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForInit() throws ParseException {
  ASTForInit jjtn000 = new ASTForInit(this, JJTFORINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_36(2147483647)) {
        LocalVariableDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          StatementExpressionList();
          break;
        default:
          jj_la1[109] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void StatementExpressionList() throws ParseException {
  ASTStatementExpressionList jjtn000 = new ASTStatementExpressionList(this, JJTSTATEMENTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      StatementExpression();
      label_42:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[110] = jj_gen;
          break label_42;
        }
        jj_consume_token(COMMA);
        StatementExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForUpdate() throws ParseException {
  ASTForUpdate jjtn000 = new ASTForUpdate(this, JJTFORUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      StatementExpressionList();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BreakStatement() throws ParseException {
  ASTBreakStatement jjtn000 = new ASTBreakStatement(this, JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[111] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ContinueStatement() throws ParseException {
  ASTContinueStatement jjtn000 = new ASTContinueStatement(this, JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONTINUE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[112] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ReturnStatement() throws ParseException {
  ASTReturnStatement jjtn000 = new ASTReturnStatement(this, JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        Expression();
        break;
      default:
        jj_la1[113] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ThrowStatement() throws ParseException {
  ASTThrowStatement jjtn000 = new ASTThrowStatement(this, JJTTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(THROW);
      Expression();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SynchronizedStatement() throws ParseException {
  ASTSynchronizedStatement jjtn000 = new ASTSynchronizedStatement(this, JJTSYNCHRONIZEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SYNCHRONIZED);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Block();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TryStatement() throws ParseException {
  ASTTryStatement jjtn000 = new ASTTryStatement(this, JJTTRYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TRY);
      Block();
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          ;
          break;
        default:
          jj_la1[114] = jj_gen;
          break label_43;
        }
        jj_consume_token(CATCH);
             jjtn000.setHasCatch();
        jj_consume_token(LPAREN);
        FormalParameter();
        jj_consume_token(RPAREN);
        Block();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        jj_consume_token(FINALLY);
               jjtn000.setHasFinally();
        Block();
        break;
      default:
        jj_la1[115] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AssertStatement() throws ParseException {
    ASTAssertStatement jjtn000 = new ASTAssertStatement(this, JJTASSERTSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);if (usingAssertAsIdentifier) {
     throw new ParseException("Can't use 'assert' as a keyword when running in JDK 1.3 mode!");
    }
    Token tok;
    try {
      tok = jj_consume_token(IDENTIFIER);

      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        Expression();
        break;
      default:
        jj_la1[116] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (RuntimeException)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_286() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_308()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_110()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    return false;
  }

  final private boolean jj_3R_322() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_321()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_287() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_309() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_285()) return true;
    xsp = jj_scanpos;
    if (jj_3R_286()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_287()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_289() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_308()) return true;
    return false;
  }

  final private boolean jj_3R_336() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_321() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_336()) jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    if (jj_3R_312()) return true;
    return false;
  }

  final private boolean jj_3R_307() {
    if (jj_3R_321()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_322()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_285() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_307()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_288() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_285()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_309()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_290() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_168()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_63()) return true;
    if (jj_3R_288()) return true;
    xsp = jj_scanpos;
    if (jj_3R_289()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    return false;
  }

  final private boolean jj_3R_267() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_267()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(81)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_313() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_295() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_294()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    return false;
  }

  final private boolean jj_3R_324() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_312() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_324()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_294() {
    if (jj_3R_312()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_313()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_169()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_67()) return true;
    if (jj_3R_294()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_295()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_10() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_9() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_53()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_335() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_334() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_333() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_332() {
    if (jj_3R_129()) return true;
    return false;
  }

  final private boolean jj_3R_320() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_332()) {
    jj_scanpos = xsp;
    if (jj_3R_333()) {
    jj_scanpos = xsp;
    if (jj_3R_334()) {
    jj_scanpos = xsp;
    if (jj_3R_335()) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_306() {
    if (jj_3R_320()) return true;
    return false;
  }

  final private boolean jj_3R_305() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_308()) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_305()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_306()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_166()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3R_311() {
    if (jj_3R_264()) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_164()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_52() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_63()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_310() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_292() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_310()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_311()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_293() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_292()) return true;
    return false;
  }

  final private boolean jj_3R_291() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_308()) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_340() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_163()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_291()) jj_scanpos = xsp;
    if (jj_3R_292()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_293()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_49()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_340()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_129()) return true;
    return false;
  }

  final private boolean jj_3R_348() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_347() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_321()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = enumLookahead();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_79()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_347()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_348()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_345() {
    if (jj_3R_353()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_346() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_165()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_264() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_362() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_150()) return true;
    return false;
  }

  final private boolean jj_3R_304() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_308()) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_346()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_303() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_303()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_304()) jj_scanpos = xsp;
    if (jj_3R_264()) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_344() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_162()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_353() {
    if (jj_3R_361()) return true;
    return false;
  }

  final private boolean jj_3R_342() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_361() {
    if (jj_3R_150()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_362()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_2() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_343() {
    if (jj_3R_352()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_360() {
    if (jj_3R_361()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_359() {
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_352() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_359()) {
    jj_scanpos = xsp;
    if (jj_3R_360()) return true;
    }
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = enumLookahead();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_343()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_344()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_345()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_339() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_294()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_342()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_358() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_357() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_351() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_357()) {
    jj_scanpos = xsp;
    if (jj_3R_358()) return true;
    }
    return false;
  }

  final private boolean jj_3R_341() {
    if (jj_3R_351()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_341()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_356() {
    if (jj_3R_235()) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_350() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_3R_356()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_350()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_3R_231()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_3R_230()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_280() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    if (jj_3R_294()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_339()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_284() {
    if (jj_3R_302()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(FINAL)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_135()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = isNextTokenAnAssert();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_161()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_160()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3R_283() {
    if (jj_3R_231()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_158()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_157()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_156()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_327() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_154()) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_152()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_151()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_150()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_299() {
    if (jj_scan_token(RUNSIGNEDSHIFT)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_149()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_148()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = isNextTokenAnAssert();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_260() {
    if (jj_3R_264()) return true;
    return false;
  }

  final private boolean jj_3R_263() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_279() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_259() {
    Token xsp;
    if (jj_3R_263()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_263()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3_30() {
    Token xsp;
    if (jj_3_28()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_254() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) return true;
    }
    return false;
  }

  final private boolean jj_3R_282() {
    if (jj_3R_230()) return true;
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_3R_59()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_260()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_3R_254()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) return true;
    }
    return false;
  }

  final private boolean jj_3R_355() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_61()) return true;
    if (jj_3R_254()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_172()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_145()) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_3R_171()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_316() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_326() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_298() {
    if (jj_scan_token(RSIGNEDSHIFT)) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_3R_233()) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_3R_232()) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_278() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_272() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_63()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_63()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_354() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  final private boolean jj_3R_349() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_354()) {
    jj_scanpos = xsp;
    if (jj_3R_355()) return true;
    }
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_301() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_3R_171()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_329() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_315() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_338() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_67()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_302()) return true;
    return false;
  }

  final private boolean jj_3R_330() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_337()) {
    jj_scanpos = xsp;
    if (jj_3R_338()) return true;
    }
    return false;
  }

  final private boolean jj_3R_296() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_315()) {
    jj_scanpos = xsp;
    if (jj_3R_316()) return true;
    }
    if (jj_3R_273()) return true;
    return false;
  }

  final private boolean jj_3R_337() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_67()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_275()) return true;
    return false;
  }

  final private boolean jj_3R_325() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_314() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_325()) {
    jj_scanpos = xsp;
    if (jj_3R_326()) {
    jj_scanpos = xsp;
    if (jj_3R_327()) return true;
    }
    }
    if (jj_3R_275()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_331() {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_349()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_297() {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_276() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_297()) {
    jj_scanpos = xsp;
    if (jj_3R_298()) {
    jj_scanpos = xsp;
    if (jj_3R_299()) return true;
    }
    }
    if (jj_3R_269()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_277() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_274() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) {
    jj_scanpos = xsp;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) return true;
    }
    }
    }
    if (jj_3R_266()) return true;
    return false;
  }

  final private boolean jj_3R_270() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_319() {
    if (jj_3R_331()) return true;
    return false;
  }

  final private boolean jj_3R_328() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3R_318() {
    if (jj_3R_330()) return true;
    return false;
  }

  final private boolean jj_3R_271() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_317() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_328()) {
    jj_scanpos = xsp;
    if (jj_3R_329()) return true;
    }
    if (jj_3R_275()) return true;
    return false;
  }

  final private boolean jj_3R_302() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_317()) {
    jj_scanpos = xsp;
    if (jj_3R_318()) {
    jj_scanpos = xsp;
    if (jj_3R_319()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_268() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_271()) {
    jj_scanpos = xsp;
    if (jj_3R_272()) return true;
    }
    if (jj_3R_258()) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_265() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_253()) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_300() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_257() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_236()) return true;
    return false;
  }

  final private boolean jj_3R_275() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_281()) {
    jj_scanpos = xsp;
    if (jj_3R_282()) {
    jj_scanpos = xsp;
    if (jj_3R_283()) {
    jj_scanpos = xsp;
    if (jj_3R_284()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_281() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_300()) {
    jj_scanpos = xsp;
    if (jj_3R_301()) return true;
    }
    if (jj_3R_275()) return true;
    return false;
  }

  final private boolean jj_3R_261() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_251()) return true;
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_229()) return true;
    return false;
  }

  final private boolean jj_3R_273() {
    if (jj_3R_275()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_314()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_173()) return true;
    return false;
  }

  final private boolean jj_3R_269() {
    if (jj_3R_273()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_296()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_266() {
    if (jj_3R_269()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_276()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_262() {
    if (jj_3R_266()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_274()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_3R_262()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_270()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_3R_258()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_268()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_251() {
    if (jj_3R_253()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_265()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_3R_251()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_261()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_3R_236()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_257()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_3R_229()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_252()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_173()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_238()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_147()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_scan_token(ORASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_scan_token(XORASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_scan_token(ANDASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_scan_token(RUNSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_scan_token(RSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(REMASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_3R_235()) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_107()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_323() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_308() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_323()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  public JavaParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[117];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x1000,0x10001000,0x10001000,0x4000000,0x0,0x10001000,0x10001000,0x5104a000,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x10001000,0x10001000,0x1000,0x1000,0x10001000,0x10001000,0x4000000,0x510cb000,0x5104a000,0x10000000,0x10000000,0x0,0x0,0x0,0x4904a000,0x4904a000,0x0,0x10001000,0x10001000,0x0,0x0,0x0,0x0,0x5104a000,0x10000000,0x0,0x0,0x0,0x4904a000,0x0,0x4104a000,0x0,0x4104a000,0x4104a000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4904a000,0x0,0x0,0x4904a000,0x8000000,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x8000000,0x8000000,0x4904a000,0x0,0x0,0x0,0x0,0x0,0x0,0xc9a4e000,0x10000000,0x80000,0x10000000,0x0,0x0,0x0,0x4904a000,0x410000,0x410000,0x2000000,0x5904a000,0x4904a000,0x4904a000,0x4904a000,0x0,0x0,0x0,0x4904a000,0x20000,0x20000000,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x800,0x8,0x0,0x0,0x0,0x40004040,0x40004000,0x40004000,0x0,0x4,0x40027000,0x40027000,0x110370a0,0x27000,0x27000,0x4,0x0,0x0,0x0,0x40127100,0x40127100,0x40004000,0x40004000,0x40027000,0x40027000,0x0,0x591371e0,0x110370a0,0x11027000,0x11027000,0x0,0x0,0x0,0x8a2506a0,0x8a2506a0,0x0,0x40127100,0x40127100,0x800000,0x0,0x0,0x0,0x100a0,0x0,0x7000,0x7000,0x800000,0x8a2506a0,0x20000,0x100a0,0x0,0x100a0,0x80100a0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8a2506a0,0x0,0x0,0x8a2506a0,0x82240600,0x0,0x0,0x0,0x0,0x82240600,0x0,0x0,0x82000400,0x2000000,0x8a2506a0,0x0,0x0,0x0,0x200,0x0,0x0,0xae7d86a2,0x0,0x40,0x0,0x0,0x0,0x0,0x8a2506a0,0x0,0x0,0x0,0x8a2506a0,0x8a2506a0,0x8a2506a0,0x8a2506a0,0x0,0x0,0x0,0x8a2506a0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x40000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x10080,0x0,0x0,0x0,0x20000,0x400,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10080,0x10080,0x0,0x0,0x20000,0x80000,0x4000,0xc014e8,0xc014e8,0x20000,0x0,0x0,0x0,0x11000,0x4000,0x20000,0x80,0x0,0x0,0x0,0x0,0x4e8,0x0,0x80,0x4000,0x0,0x80,0x20000,0x80000,0x80000,0x1000000,0x40000000,0x80000000,0x0,0x0,0x0,0x24000000,0x24000000,0x0,0x18300000,0x18300000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc004e8,0xc00000,0xc00000,0x4e8,0xc004e8,0x400,0x0,0x0,0x400,0x468,0x80,0x44400,0x68,0x0,0xc004e8,0x20000,0x1000,0x4400,0x0,0x4000,0x4000,0x114e8,0x0,0x0,0x0,0x20000,0x80000,0x80000,0x4e8,0x0,0x0,0x0,0x4e8,0xc004e8,0x4e8,0x4e8,0x20000,0x80,0x80,0xc004e8,0x0,0x0,0x2000000,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x1000000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffe000,0xffe000,0x0,0x0,0x0,0x80,0x100,0x40,0x0,0x0,0x0,0x0,0x0,0x1c00,0x1c00,0xc,0xc,0x230,0x230,0xc,0xf,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0xffe003,0xffe003,0x3,0x0,0x0,0x0,0x3,0xf,0x3,0x3,0x0,0x0,0x0,0xf,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[36];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public JavaParser(CharStream stream) {
    token_source = new JavaParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 117; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 117; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JavaParser(JavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 117; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(JavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 117; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[122];
    for (int i = 0; i < 122; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 117; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 122; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 36; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
```

File: net.sourceforge.pmd.ast.ASTPrimitiveType
```java

package net.sourceforge.pmd.ast;

public class ASTPrimitiveType extends SimpleNode {
    public ASTPrimitiveType(int id) {
        super(id);
    }

    public ASTPrimitiveType(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTMethodDeclarator
```java

package net.sourceforge.pmd.ast;

public class ASTMethodDeclarator extends SimpleNode {
    public ASTMethodDeclarator(int id) {
        super(id);
    }

    public ASTMethodDeclarator(JavaParser p, int id) {
        super(p, id);
    }

    public int getParameterCount() {
        return this.jjtGetChild(0).jjtGetNumChildren();
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void dump(String prefix) {
        System.out.println(toString(prefix) + ":" + getImage());
        dumpChildren(prefix);
    }
}
```

File: net.sourceforge.pmd.ast.JavaParserConstants
```java
package net.sourceforge.pmd.ast;

public interface JavaParserConstants {

  int EOF = 0;
  int SINGLE_LINE_COMMENT = 6;
  int FORMAL_COMMENT = 9;
  int MULTI_LINE_COMMENT = 10;
  int ABSTRACT = 12;
  int BOOLEAN = 13;
  int BREAK = 14;
  int BYTE = 15;
  int CASE = 16;
  int CATCH = 17;
  int CHAR = 18;
  int CLASS = 19;
  int CONST = 20;
  int CONTINUE = 21;
  int _DEFAULT = 22;
  int DO = 23;
  int DOUBLE = 24;
  int ELSE = 25;
  int EXTENDS = 26;
  int FALSE = 27;
  int FINAL = 28;
  int FINALLY = 29;
  int FLOAT = 30;
  int FOR = 31;
  int GOTO = 32;
  int IF = 33;
  int IMPLEMENTS = 34;
  int IMPORT = 35;
  int INSTANCEOF = 36;
  int INT = 37;
  int INTERFACE = 38;
  int LONG = 39;
  int NATIVE = 40;
  int NEW = 41;
  int NULL = 42;
  int PACKAGE = 43;
  int PRIVATE = 44;
  int PROTECTED = 45;
  int PUBLIC = 46;
  int RETURN = 47;
  int SHORT = 48;
  int STATIC = 49;
  int SUPER = 50;
  int SWITCH = 51;
  int SYNCHRONIZED = 52;
  int THIS = 53;
  int THROW = 54;
  int THROWS = 55;
  int TRANSIENT = 56;
  int TRUE = 57;
  int TRY = 58;
  int VOID = 59;
  int VOLATILE = 60;
  int WHILE = 61;
  int STRICTFP = 62;
  int INTEGER_LITERAL = 63;
  int DECIMAL_LITERAL = 64;
  int HEX_LITERAL = 65;
  int OCTAL_LITERAL = 66;
  int FLOATING_POINT_LITERAL = 67;
  int EXPONENT = 68;
  int CHARACTER_LITERAL = 69;
  int STRING_LITERAL = 70;
  int IDENTIFIER = 71;
  int LETTER = 72;
  int DIGIT = 73;
  int LPAREN = 74;
  int RPAREN = 75;
  int LBRACE = 76;
  int RBRACE = 77;
  int LBRACKET = 78;
  int RBRACKET = 79;
  int SEMICOLON = 80;
  int COMMA = 81;
  int DOT = 82;
  int ASSIGN = 83;
  int GT = 84;
  int LT = 85;
  int BANG = 86;
  int TILDE = 87;
  int HOOK = 88;
  int COLON = 89;
  int EQ = 90;
  int LE = 91;
  int GE = 92;
  int NE = 93;
  int SC_OR = 94;
  int SC_AND = 95;
  int INCR = 96;
  int DECR = 97;
  int PLUS = 98;
  int MINUS = 99;
  int STAR = 100;
  int SLASH = 101;
  int BIT_AND = 102;
  int BIT_OR = 103;
  int XOR = 104;
  int REM = 105;
  int LSHIFT = 106;
  int RSIGNEDSHIFT = 107;
  int RUNSIGNEDSHIFT = 108;
  int PLUSASSIGN = 109;
  int MINUSASSIGN = 110;
  int STARASSIGN = 111;
  int SLASHASSIGN = 112;
  int ANDASSIGN = 113;
  int ORASSIGN = 114;
  int XORASSIGN = 115;
  int REMASSIGN = 116;
  int LSHIFTASSIGN = 117;
  int RSIGNEDSHIFTASSIGN = 118;
  int RUNSIGNEDSHIFTASSIGN = 119;

  int DEFAULT = 0;
  int IN_FORMAL_COMMENT = 1;
  int IN_MULTI_LINE_COMMENT = 2;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<token of kind 7>",
    "<token of kind 11>",
    "\"abstract\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"strictfp\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"\\u001a\"",
    "\"~[]\"",
  };

}
```

File: net.sourceforge.pmd.ast.ASTArrayInitializer
```java

package net.sourceforge.pmd.ast;

public class ASTArrayInitializer extends SimpleNode {
    public ASTArrayInitializer(int id) {
        super(id);
    }

    public ASTArrayInitializer(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTPrimaryPrefix
```java

package net.sourceforge.pmd.ast;

public class ASTPrimaryPrefix extends SimpleNode {
    public ASTPrimaryPrefix(int id) {
        super(id);
    }

    public ASTPrimaryPrefix(JavaParser p, int id) {
        super(p, id);
    }

    private boolean usesThisModifier;
    private boolean usesSuperModifier;

    public void setUsesThisModifier() {
        usesThisModifier = true;
    }

    public boolean usesThisModifier() {
        return this.usesThisModifier;
    }

    public void setUsesSuperModifier() {
        usesSuperModifier = true;
    }

    public boolean usesSuperModifier() {
        return this.usesSuperModifier;
    }

    public void dump(String prefix) {
        String out = getImage();
        if (usesSuperModifier) {
            out = "super." + out;
        } else if (usesThisModifier) {
            if (getImage() == null) {
                out = "this";
            } else {
                out = "this." + out;
            }
        }

        if (out == null) {
            System.out.println(toString(prefix));
        } else {
            System.out.println(toString(prefix) + ":" + out);
        }
        dumpChildren(prefix);
    }

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTBlockStatement
```java

package net.sourceforge.pmd.ast;

public class ASTBlockStatement extends SimpleNode {
    public ASTBlockStatement(int id) {
        super(id);
    }

    public ASTBlockStatement(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTStatementExpressionList
```java

package net.sourceforge.pmd.ast;

public class ASTStatementExpressionList extends SimpleNode {
    public ASTStatementExpressionList(int id) {
        super(id);
    }

    public ASTStatementExpressionList(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTAllocationExpression
```java

package net.sourceforge.pmd.ast;

public class ASTAllocationExpression extends SimpleNode {
    public ASTAllocationExpression(int id) {
        super(id);
    }

    public ASTAllocationExpression(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTVariableDeclarator
```java

package net.sourceforge.pmd.ast;

public class ASTVariableDeclarator extends SimpleNode {
    public ASTVariableDeclarator(int id) {
        super(id);
    }

    public ASTVariableDeclarator(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.SimpleCharStream
```java
package net.sourceforge.pmd.ast;


public class SimpleCharStream
{
  public static final boolean staticFlag = false;
  int bufsize;
  int available;
  int tokenBegin;
  public int bufpos = -1;
  protected int bufline[];
  protected int bufcolumn[];

  protected int column = 0;
  protected int line = 1;

  protected boolean prevCharIsCR = false;
  protected boolean prevCharIsLF = false;

  protected java.io.Reader inputStream;

  protected char[] buffer;
  protected int maxNextCharInd = 0;
  protected int inBuf = 0;

  protected void ExpandBuff(boolean wrapAround)
  {
     char[] newbuffer = new char[bufsize + 2048];
     int newbufline[] = new int[bufsize + 2048];
     int newbufcolumn[] = new int[bufsize + 2048];

     try
     {
        if (wrapAround)
        {
           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
           System.arraycopy(buffer, 0, newbuffer,
                                             bufsize - tokenBegin, bufpos);
           buffer = newbuffer;

           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
           System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
           bufline = newbufline;

           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
           System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
           bufcolumn = newbufcolumn;

           maxNextCharInd = (bufpos += (bufsize - tokenBegin));
        }
        else
        {
           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
           buffer = newbuffer;

           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
           bufline = newbufline;

           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
           bufcolumn = newbufcolumn;

           maxNextCharInd = (bufpos -= tokenBegin);
        }
     }
     catch (Throwable t)
     {
        throw new Error(t.getMessage());
     }


     bufsize += 2048;
     available = bufsize;
     tokenBegin = 0;
  }

  protected void FillBuff() throws java.io.IOException
  {
     if (maxNextCharInd == available)
     {
        if (available == bufsize)
        {
           if (tokenBegin > 2048)
           {
              bufpos = maxNextCharInd = 0;
              available = tokenBegin;
           }
           else if (tokenBegin < 0)
              bufpos = maxNextCharInd = 0;
           else
              ExpandBuff(false);
        }
        else if (available > tokenBegin)
           available = bufsize;
        else if ((tokenBegin - available) < 2048)
           ExpandBuff(true);
        else
           available = tokenBegin;
     }

     int i;
     try {
        if ((i = inputStream.read(buffer, maxNextCharInd,
                                    available - maxNextCharInd)) == -1)
        {
           inputStream.close();
           throw new java.io.IOException();
        }
        else
           maxNextCharInd += i;
        return;
     }
     catch(java.io.IOException e) {
        --bufpos;
        backup(0);
        if (tokenBegin == -1)
           tokenBegin = bufpos;
        throw e;
     }
  }

  public char BeginToken() throws java.io.IOException
  {
     tokenBegin = -1;
     char c = readChar();
     tokenBegin = bufpos;

     return c;
  }

  protected void UpdateLineColumn(char c)
  {
     column++;

     if (prevCharIsLF)
     {
        prevCharIsLF = false;
        line += (column = 1);
     }
     else if (prevCharIsCR)
     {
        prevCharIsCR = false;
        if (c == '\n')
        {
           prevCharIsLF = true;
        }
        else
           line += (column = 1);
     }

     switch (c)
     {
        case '\r' :
           prevCharIsCR = true;
           break;
        case '\n' :
           prevCharIsLF = true;
           break;
        case '\t' :
           column--;
           column += (8 - (column & 07));
           break;
        default :
           break;
     }

     bufline[bufpos] = line;
     bufcolumn[bufpos] = column;
  }

  public char readChar() throws java.io.IOException
  {
     if (inBuf > 0)
     {
        --inBuf;

        if (++bufpos == bufsize)
           bufpos = 0;

        return buffer[bufpos];
     }

     if (++bufpos >= maxNextCharInd)
        FillBuff();

     char c = buffer[bufpos];

     UpdateLineColumn(c);
     return (c);
  }


  public int getColumn() {
     return bufcolumn[bufpos];
  }


  public int getLine() {
     return bufline[bufpos];
  }

  public int getEndColumn() {
     return bufcolumn[bufpos];
  }

  public int getEndLine() {
     return bufline[bufpos];
  }

  public int getBeginColumn() {
     return bufcolumn[tokenBegin];
  }

  public int getBeginLine() {
     return bufline[tokenBegin];
  }

  public void backup(int amount) {

    inBuf += amount;
    if ((bufpos -= amount) < 0)
       bufpos += bufsize;
  }

  public SimpleCharStream(java.io.Reader dstream, int startline,
  int startcolumn, int buffersize)
  {
    inputStream = dstream;
    line = startline;
    column = startcolumn - 1;

    available = bufsize = buffersize;
    buffer = new char[buffersize];
    bufline = new int[buffersize];
    bufcolumn = new int[buffersize];
  }

  public SimpleCharStream(java.io.Reader dstream, int startline,
                                                           int startcolumn)
  {
     this(dstream, startline, startcolumn, 4096);
  }

  public SimpleCharStream(java.io.Reader dstream)
  {
     this(dstream, 1, 1, 4096);
  }
  public void ReInit(java.io.Reader dstream, int startline,
  int startcolumn, int buffersize)
  {
    inputStream = dstream;
    line = startline;
    column = startcolumn - 1;

    if (buffer == null || buffersize != buffer.length)
    {
      available = bufsize = buffersize;
      buffer = new char[buffersize];
      bufline = new int[buffersize];
      bufcolumn = new int[buffersize];
    }
    prevCharIsLF = prevCharIsCR = false;
    tokenBegin = inBuf = maxNextCharInd = 0;
    bufpos = -1;
  }

  public void ReInit(java.io.Reader dstream, int startline,
                                                           int startcolumn)
  {
     ReInit(dstream, startline, startcolumn, 4096);
  }

  public void ReInit(java.io.Reader dstream)
  {
     ReInit(dstream, 1, 1, 4096);
  }
  public SimpleCharStream(java.io.InputStream dstream, int startline,
  int startcolumn, int buffersize)
  {
     this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
  }

  public SimpleCharStream(java.io.InputStream dstream, int startline,
                                                           int startcolumn)
  {
     this(dstream, startline, startcolumn, 4096);
  }

  public SimpleCharStream(java.io.InputStream dstream)
  {
     this(dstream, 1, 1, 4096);
  }

  public void ReInit(java.io.InputStream dstream, int startline,
                          int startcolumn, int buffersize)
  {
     ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
  }

  public void ReInit(java.io.InputStream dstream)
  {
     ReInit(dstream, 1, 1, 4096);
  }
  public void ReInit(java.io.InputStream dstream, int startline,
                                                           int startcolumn)
  {
     ReInit(dstream, startline, startcolumn, 4096);
  }
  public String GetImage()
  {
     if (bufpos >= tokenBegin)
        return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
     else
        return new String(buffer, tokenBegin, bufsize - tokenBegin) +
                              new String(buffer, 0, bufpos + 1);
  }

  public char[] GetSuffix(int len)
  {
     char[] ret = new char[len];

     if ((bufpos + 1) >= len)
        System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
     else
     {
        System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,
                                                          len - bufpos - 1);
        System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
     }

     return ret;
  }

  public void Done()
  {
     buffer = null;
     bufline = null;
     bufcolumn = null;
  }

  public void adjustBeginLineColumn(int newLine, int newCol)
  {
     int start = tokenBegin;
     int len;

     if (bufpos >= tokenBegin)
     {
        len = bufpos - tokenBegin + inBuf + 1;
     }
     else
     {
        len = bufsize - tokenBegin + bufpos + 1 + inBuf;
     }

     int i = 0, j = 0, k = 0;
     int nextColDiff = 0, columnDiff = 0;

     while (i < len &&
            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])
     {
        bufline[j] = newLine;
        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
        bufcolumn[j] = newCol + columnDiff;
        columnDiff = nextColDiff;
        i++;
     } 

     if (i < len)
     {
        bufline[j] = newLine++;
        bufcolumn[j] = newCol + columnDiff;

        while (i++ < len)
        {
           if (bufline[j = start % bufsize] != bufline[++start % bufsize])
              bufline[j] = newLine++;
           else
              bufline[j] = newLine;
        }
     }

     line = bufline[j];
     column = bufcolumn[j];
  }

}
```

File: net.sourceforge.pmd.ast.ASTExclusiveOrExpression
```java

package net.sourceforge.pmd.ast;

public class ASTExclusiveOrExpression extends SimpleNode {
    public ASTExclusiveOrExpression(int id) {
        super(id);
    }

    public ASTExclusiveOrExpression(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTPackageDeclaration
```java

package net.sourceforge.pmd.ast;

public class ASTPackageDeclaration extends SimpleNode {
    public ASTPackageDeclaration(int id) {
        super(id);
    }

    public ASTPackageDeclaration(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTFormalParameter
```java

package net.sourceforge.pmd.ast;

public class ASTFormalParameter extends AccessNode {
    public ASTFormalParameter(int id) {
        super(id);
    }

    public ASTFormalParameter(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void dump(String prefix) {
        System.out.println(collectDumpedModifiers(prefix));
        dumpChildren(prefix);
    }

}
```

File: net.sourceforge.pmd.ast.ASTPreIncrementExpression
```java

package net.sourceforge.pmd.ast;

public class ASTPreIncrementExpression extends SimpleNode {
    public ASTPreIncrementExpression(int id) {
        super(id);
    }

    public ASTPreIncrementExpression(JavaParser p, int id) {
        super(p, id);
    }

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

}
```

File: net.sourceforge.pmd.ast.ASTVariableInitializer
```java

package net.sourceforge.pmd.ast;

public class ASTVariableInitializer extends SimpleNode {
    public ASTVariableInitializer(int id) {
        super(id);
    }

    public ASTVariableInitializer(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTMethodDeclaration
```java

package net.sourceforge.pmd.ast;

public class ASTMethodDeclaration extends AccessNode {
    public ASTMethodDeclaration(int id) {
        super(id);
    }

    public ASTMethodDeclaration(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void dump(String prefix) {
        System.out.println(collectDumpedModifiers(prefix));
        dumpChildren(prefix);
    }
}
```

File: net.sourceforge.pmd.ast.ASTEmptyStatement
```java

package net.sourceforge.pmd.ast;

public class ASTEmptyStatement extends SimpleNode {
    public ASTEmptyStatement(int id) {
        super(id);
    }

    public ASTEmptyStatement(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTMultiplicativeExpression
```java

package net.sourceforge.pmd.ast;

public class ASTMultiplicativeExpression extends SimpleNode {
    public ASTMultiplicativeExpression(int id) {
        super(id);
    }

    public ASTMultiplicativeExpression(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.Token
```java
package net.sourceforge.pmd.ast;


public class Token {

  public int kind;

  public int beginLine, beginColumn, endLine, endColumn;

  public String image;

  public Token next;

  public Token specialToken;

  public String toString()
  {
     return image;
  }

  public static final Token newToken(int ofKind)
  {
     switch(ofKind)
     {
       default : return new Token();
     }
  }

}
```

File: net.sourceforge.pmd.ast.ASTNullLiteral
```java

package net.sourceforge.pmd.ast;

public class ASTNullLiteral extends SimpleNode {
    public ASTNullLiteral(int id) {
        super(id);
    }

    public ASTNullLiteral(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTForUpdate
```java

package net.sourceforge.pmd.ast;

public class ASTForUpdate extends SimpleNode {
    public ASTForUpdate(int id) {
        super(id);
    }

    public ASTForUpdate(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.SimpleNode
```java
package net.sourceforge.pmd.ast;

import net.sourceforge.pmd.symboltable.Scope;

import java.util.ArrayList;
import java.util.List;

public class SimpleNode implements Node {

    protected Node parent;
    protected Node[] children;
    protected int id;
    protected JavaParser parser;
    private String image;
    private int beginLine = -1;
    private int endLine;
    private int beginColumn = -1;
    private int endColumn;
    private Scope scope;
    private boolean discardable;

    public void setDiscardable() {
        this.discardable = true;
    }

    public void setUnDiscardable() {
        this.discardable = false;
    }

    public boolean isDiscardable() {
        return this.discardable;
    }

    public SimpleNode(int i) {
        id = i;
    }

    public SimpleNode(JavaParser p, int i) {
        this(i);
        parser = p;
    }

    public void jjtOpen() {
        if (beginLine == -1 && parser.token.next != null) {
            beginLine = parser.token.next.beginLine;
            beginColumn = parser.token.next.beginColumn;
        }
    }

    public void jjtClose() {
        if (beginLine == -1 && (children == null || children.length == 0)) {
            beginColumn = parser.token.beginColumn;
        }
        if (beginLine == -1) {
            beginLine = parser.token.beginLine;
        }
        endLine = parser.token.endLine;
        endColumn = parser.token.endColumn;
    }

    public void setScope(Scope scope) {
        this.scope = scope;
    }

    public Scope getScope() {
        if (scope == null) {
            return ((SimpleNode) parent).getScope();
        }
        return scope;
    }

    public int getBeginLine() {
        return beginLine;
    }

    public void testingOnly__setBeginLine(int i) {
        this.beginLine = i;
    }

    public void testingOnly__setBeginColumn(int i) {
        this.beginColumn = i;
    }

    public int getBeginColumn() {
        if (beginColumn != -1) {
            return beginColumn;
        } else {
            if ((children != null) && (children.length > 0)) {
                return ((SimpleNode) children[0]).getBeginColumn();
            } else {
                throw new RuntimeException("Unable to determine begining line of Node.");
            }
        }
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public int getEndLine() {
        return endLine;
    }

    public int getEndColumn() {
        return endColumn;
    }

    public Node getFirstParentOfType(Class parentType) {
      Node parentNode = jjtGetParent();
      while (parentNode != null && parentNode.getClass() != parentType) {
        parentNode = parentNode.jjtGetParent();
      }
      return parentNode;
    }

    public List getParentsOfType(Class parentType) {
      List parents = new ArrayList();
      Node parentNode = jjtGetParent();
      while (parentNode != null) {
        if (parentNode.getClass() == parentType) {
          parents.add(parentNode);
        }
        parentNode = parentNode.jjtGetParent();
      }
      return parents;
    }

    public List findChildrenOfType(Class targetType) {
        List list = new ArrayList();
        findChildrenOfType(targetType, list);
        return list;
    }

    public void findChildrenOfType(Class targetType, List results) {
        findChildrenOfType(this, targetType, results, true);
    }

    public void findChildrenOfType(Class targetType, List results, boolean descendIntoNestedClasses) {
        this.findChildrenOfType(this, targetType, results, descendIntoNestedClasses);
    }

    private void findChildrenOfType(Node node, Class targetType, List results, boolean descendIntoNestedClasses) {
        if (node.getClass().equals(targetType)) {
            results.add(node);
        }
        if (node.getClass().equals(ASTNestedClassDeclaration.class) && !descendIntoNestedClasses) {
            return;
        }
        if (node.getClass().equals(ASTClassBodyDeclaration.class) && ((ASTClassBodyDeclaration)node).isAnonymousInnerClass() && !descendIntoNestedClasses) {
            return;
        }
        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
            Node child = node.jjtGetChild(i);
            if (child.jjtGetNumChildren() > 0) {
                findChildrenOfType(child, targetType, results, descendIntoNestedClasses);
            } else {
                if (child.getClass().equals(targetType)) {
                    results.add(child);
                }
            }
        }
    }

    public void jjtSetParent(Node n) {
        parent = n;
    }

    public Node jjtGetParent() {
        return parent;
    }

    public void jjtReplaceChild(Node old, Node newNode) {
        for (int i=0; i<children.length; i++) {
            if (children[i] == old) {
                children[i] = newNode;
                return;
            }
        }
        throw new RuntimeException("PMD INTERNAL ERROR: SimpleNode.jjtReplaceChild called to replace a node, but couldn't find the old node");
    }

    public void jjtAddChild(Node n, int i) {
        if (children == null) {
            children = new Node[i + 1];
        } else if (i >= children.length) {
            Node c[] = new Node[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = n;
    }

    public Node jjtGetChild(int i) {
        return children[i];
    }

    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public Object childrenAccept(JavaParserVisitor visitor, Object data) {
        if (children != null) {
            for (int i = 0; i < children.length; ++i) {
                children[i].jjtAccept(visitor, data);
            }
        }
        return data;
    }


    public String toString() {
        return JavaParserTreeConstants.jjtNodeName[id];
    }

    public String toString(String prefix) {
        return prefix + toString();
    }

    public void dump(String prefix) {
        System.out.println(toString(prefix));
        dumpChildren(prefix);
    }

    protected void dumpChildren(String prefix) {
        if (children != null) {
            for (int i = 0; i < children.length; ++i) {
                SimpleNode n = (SimpleNode) children[i];
                if (n != null) {
                    n.dump(prefix + " ");
                }
            }
        }
    }

}

```

File: net.sourceforge.pmd.ast.ASTPostfixExpression
```java

package net.sourceforge.pmd.ast;

public class ASTPostfixExpression extends SimpleNode {
    public ASTPostfixExpression(int id) {
        super(id);
        setDiscardable();
    }

    public ASTPostfixExpression(JavaParser p, int id) {
        super(p, id);
        setDiscardable();
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTArrayDimsAndInits
```java

package net.sourceforge.pmd.ast;

public class ASTArrayDimsAndInits extends SimpleNode {
    public ASTArrayDimsAndInits(int id) {
        super(id);
    }

    public ASTArrayDimsAndInits(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTStatementExpression
```java

package net.sourceforge.pmd.ast;

public class ASTStatementExpression extends SimpleNode {
    public ASTStatementExpression(int id) {
        super(id);
    }

    public ASTStatementExpression(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTAssertStatement
```java

package net.sourceforge.pmd.ast;

public class ASTAssertStatement extends SimpleNode {
    public ASTAssertStatement(int id) {
        super(id);
    }

    public ASTAssertStatement(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTEnumDeclaration
```java

package net.sourceforge.pmd.ast;

public class ASTEnumDeclaration extends AccessNode {
  public ASTEnumDeclaration(int id) {
    super(id);
  }

  public ASTEnumDeclaration(JavaParser p, int id) {
    super(p, id);
  }


  public Object jjtAccept(JavaParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
}
```

File: net.sourceforge.pmd.ast.ASTDoStatement
```java

package net.sourceforge.pmd.ast;

public class ASTDoStatement extends SimpleNode {
    public ASTDoStatement(int id) {
        super(id);
    }

    public ASTDoStatement(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTAssignmentOperator
```java

package net.sourceforge.pmd.ast;

public class ASTAssignmentOperator extends SimpleNode {
    public ASTAssignmentOperator(int id) {
        super(id);
    }

    public ASTAssignmentOperator(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void dump(String prefix) {
        System.out.println(toString(prefix) + ":" + getImage());
        dumpChildren(prefix);
    }
}
```

File: net.sourceforge.pmd.ast.ASTLocalVariableDeclaration
```java

package net.sourceforge.pmd.ast;

public class ASTLocalVariableDeclaration extends AccessNode {
    public ASTLocalVariableDeclaration(int id) {
        super(id);
    }

    public ASTLocalVariableDeclaration(JavaParser p, int id) {
        super(p, id);
    }

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void dump(String prefix) {
        System.out.println(collectDumpedModifiers(prefix));
        dumpChildren(prefix);
    }
}
```

File: net.sourceforge.pmd.ast.ASTFormalParameters
```java

package net.sourceforge.pmd.ast;

public class ASTFormalParameters extends SimpleNode {
    public ASTFormalParameters(int id) {
        super(id);
    }

    public ASTFormalParameters(JavaParser p, int id) {
        super(p, id);
    }

    public int getParameterCount() {
        return jjtGetNumChildren();
    }

    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTEnumElement
```java

package net.sourceforge.pmd.ast;

public class ASTEnumElement extends SimpleNode {
  public ASTEnumElement(int id) {
    super(id);
  }

  public ASTEnumElement(JavaParser p, int id) {
    super(p, id);
  }


  public Object jjtAccept(JavaParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
}
```

File: net.sourceforge.pmd.ast.ASTStatement
```java

package net.sourceforge.pmd.ast;

public class ASTStatement extends SimpleNode {
    public ASTStatement(int id) {
        super(id);
    }

    public ASTStatement(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTConditionalOrExpression
```java

package net.sourceforge.pmd.ast;

public class ASTConditionalOrExpression extends SimpleNode {
    public ASTConditionalOrExpression(int id) {
        super(id);
    }

    public ASTConditionalOrExpression(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTInclusiveOrExpression
```java

package net.sourceforge.pmd.ast;

public class ASTInclusiveOrExpression extends SimpleNode {
    public ASTInclusiveOrExpression(int id) {
        super(id);
    }

    public ASTInclusiveOrExpression(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTName
```java

package net.sourceforge.pmd.ast;

public class ASTName extends SimpleNode {
    public ASTName(int id) {
        super(id);
    }

    public ASTName(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void dump(String prefix) {
        System.out.println(toString(prefix) + ":" + getImage());
        dumpChildren(prefix);
    }
}
```

File: net.sourceforge.pmd.ast.ASTConstructorDeclaration
```java

package net.sourceforge.pmd.ast;

public class ASTConstructorDeclaration extends AccessNode {
    public ASTConstructorDeclaration(int id) {
        super(id);
    }

    public ASTConstructorDeclaration(JavaParser p, int id) {
        super(p, id);
    }

    public int getParameterCount() {
        return ((ASTFormalParameters) jjtGetChild(0)).getParameterCount();
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void dump(String prefix) {
        System.out.println(collectDumpedModifiers(prefix));
        dumpChildren(prefix);
    }

}
```

File: net.sourceforge.pmd.ast.ASTUnaryExpressionNotPlusMinus
```java

package net.sourceforge.pmd.ast;

public class ASTUnaryExpressionNotPlusMinus extends SimpleNode {
    public ASTUnaryExpressionNotPlusMinus(int id) {
        super(id);
        setDiscardable();
    }

    public ASTUnaryExpressionNotPlusMinus(JavaParser p, int id) {
        super(p, id);
        setDiscardable();
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: net.sourceforge.pmd.ast.ASTInitializer
```java

package net.sourceforge.pmd.ast;

public class ASTInitializer extends SimpleNode {
    public ASTInitializer(int id) {
        super(id);
    }

    public ASTInitializer(JavaParser p, int id) {
        super(p, id);
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    private boolean isStatic;

    public boolean isStatic() {
        return isStatic;
    }

    public void setStatic() {
        isStatic = true;
    }
}
```

File: net.sourceforge.pmd.ast.ASTIfStatement
```java

package net.sourceforge.pmd.ast;

public class ASTIfStatement extends SimpleNode {
    public ASTIfStatement(int id) {
        super(id);
    }

    public ASTIfStatement(JavaParser p, int id) {
        super(p, id);
    }

    private boolean hasElse;

    public void setHasElse() {
        this.hasElse = true;
    }

    public boolean hasElse() {
        return this.hasElse;
    }


    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
}
```

File: test.net.sourceforge.pmd.ast.ASTVariableDeclaratorIdTest
```java
package test.net.sourceforge.pmd.ast;

import junit.framework.TestCase;
import net.sourceforge.pmd.ast.ASTBlock;
import net.sourceforge.pmd.ast.ASTTryStatement;
import net.sourceforge.pmd.ast.ASTVariableDeclaratorId;

public class ASTVariableDeclaratorIdTest extends TestCase {

    public void testIsExceptionBlockParameter() {
        ASTTryStatement tryNode = new ASTTryStatement(1);
        ASTBlock block = new ASTBlock(2);
        ASTVariableDeclaratorId v = new ASTVariableDeclaratorId(3);
        v.jjtSetParent(block);
        block.jjtSetParent(tryNode);
        assertTrue(v.isExceptionBlockParameter());
    }
}
```

File: test.net.sourceforge.pmd.ast.JDKVersionTest
```java
package test.net.sourceforge.pmd.ast;

import junit.framework.TestCase;
import net.sourceforge.pmd.PMD;
import net.sourceforge.pmd.TargetJDK1_3;
import net.sourceforge.pmd.TargetJDK1_4;
import net.sourceforge.pmd.TargetJDK1_5;
import net.sourceforge.pmd.TargetJDKVersion;
import net.sourceforge.pmd.ast.JavaParser;
import net.sourceforge.pmd.ast.ParseException;

import java.io.StringReader;

public class JDKVersionTest extends TestCase  {

    public void testEnumAsKeywordShouldFailWith14() throws Throwable {
        try {
            JavaParser p = new TargetJDK1_4().createParser(new StringReader(JDK15_ENUM));
            p.CompilationUnit();
            throw new Error("JDK 1.4 parser should have failed to parse enum used as keyword");
        } catch (ParseException e) {}    // cool
    }

    public void testEnumAsIdentifierShouldPassWith14() throws Throwable {
        JavaParser p = new TargetJDK1_4().createParser(new StringReader(JDK14_ENUM));
        p.CompilationUnit();
    }

    public void testEnumAsKeywordShouldPassWith15() throws Throwable {
        JavaParser p = new TargetJDK1_5().createParser(new StringReader(JDK15_ENUM));
        p.CompilationUnit();
    }

    public void testEnumAsIdentifierShouldFailWith15() throws Throwable {
        try {
            TargetJDKVersion jdk = new TargetJDK1_5();
            JavaParser p = jdk.createParser(new StringReader(JDK14_ENUM));
            p.CompilationUnit();
            throw new Error("JDK 1.5 parser should have failed to parse enum used as identifier");
        } catch (ParseException e) {}    // cool
    }

    public void testAssertAsKeywordVariantsSucceedWith1_4() {
        (new TargetJDK1_4()).createParser(new StringReader(ASSERT_TEST1)).CompilationUnit();
        (new TargetJDK1_4()).createParser(new StringReader(ASSERT_TEST2)).CompilationUnit();
        (new TargetJDK1_4()).createParser(new StringReader(ASSERT_TEST3)).CompilationUnit();
        (new TargetJDK1_4()).createParser(new StringReader(ASSERT_TEST4)).CompilationUnit();
    }

    public void testAssertAsVariableDeclIdentifierFailsWith1_4() {
        try {
            (new TargetJDK1_4()).createParser(new StringReader(ASSERT_TEST5)).CompilationUnit();
            throw new RuntimeException("Usage of assert as identifier should have failed with 1.4");
        } catch (ParseException pe) {
        }
    }

    public void testAssertAsMethodNameIdentifierFailsWith1_4() {
        try {
            (new TargetJDK1_4()).createParser(new StringReader(ASSERT_TEST7)).CompilationUnit();
            throw new RuntimeException("Usage of assert as identifier should have failed with 1.4");
        } catch (ParseException pe) {
        }
    }

    public void testAssertAsIdentifierSucceedsWith1_3() {
        JavaParser jp = (new TargetJDK1_3()).createParser(new StringReader(ASSERT_TEST5));
        jp.CompilationUnit();
    }

    public void testAssertAsKeywordFailsWith1_3() {
        try {
            JavaParser jp = (new TargetJDK1_3()).createParser(new StringReader(ASSERT_TEST6));
            jp.CompilationUnit();
            throw new RuntimeException("Usage of assert as keyword should have failed with 1.3");
        } catch (ParseException pe) {
        }
    }

    private static final String ASSERT_TEST1 =
    "public class Foo {" + PMD.EOL +
    " void bar() {" + PMD.EOL +
    "  assert x>2;" + PMD.EOL +
    " }" + PMD.EOL +
    "}";

    private static final String ASSERT_TEST2 =
    "public class Foo {" + PMD.EOL +
    " void bar() {" + PMD.EOL +
    "  assert (x>2);" + PMD.EOL +
    " }" + PMD.EOL +
    "}";

    private static final String ASSERT_TEST3 =
    "public class Foo {" + PMD.EOL +
    " void bar() {" + PMD.EOL +
    "  assert x>2 : \"hi!\";" + PMD.EOL +
    " }" + PMD.EOL +
    "}";

    private static final String ASSERT_TEST4 =
    "public class Foo {" + PMD.EOL +
    " void bar() {" + PMD.EOL +
    "  assert (x>2) : \"hi!\";" + PMD.EOL +
    " }" + PMD.EOL +
    "}";

    private static final String ASSERT_TEST5 =
    "public class Foo {" + PMD.EOL +
    "  int assert = 2;" + PMD.EOL +
    "}";

    private static final String ASSERT_TEST6 =
    "public class Foo {" + PMD.EOL +
    " void foo() {" + PMD.EOL +
    "  assert (x>2) : \"hi!\";" + PMD.EOL +
    " }" + PMD.EOL +
    "}";

    private static final String ASSERT_TEST7 =
    "public class Foo {" + PMD.EOL +
    " void assert() {}" + PMD.EOL +
    "}";

    private static final String JDK15_ENUM =
    "public class Test {" + PMD.EOL +
    " enum Season { winter, spring, summer, fall };" + PMD.EOL +
    "}";

    private static final String JDK14_ENUM =
    "public class Test {" + PMD.EOL +
    " int enum;" + PMD.EOL +
    "}";
}
```

File: test.net.sourceforge.pmd.ast.EncodingTest
```java
package test.net.sourceforge.pmd.ast;

import junit.framework.TestCase;
import net.sourceforge.pmd.PMD;
import net.sourceforge.pmd.TargetJDK1_4;
import net.sourceforge.pmd.ast.ASTCompilationUnit;
import net.sourceforge.pmd.ast.ASTMethodDeclarator;
import net.sourceforge.pmd.ast.JavaParser;

import java.io.StringReader;
import java.util.List;

public class EncodingTest extends TestCase {

    public void testDecodingOfUTF8() throws Throwable {
        JavaParser parser = (new TargetJDK1_4()).createParser(new StringReader(TEST_UTF8));
        ASTCompilationUnit acu = parser.CompilationUnit();
        List kids = acu.findChildrenOfType(ASTMethodDeclarator.class);
        assertEquals("é", ((ASTMethodDeclarator)kids.get(0)).getImage());
    }

    private static final String TEST_UTF8 =
    "class Foo {" + PMD.EOL +
    " void é() {}" + PMD.EOL +
    " void fiddle() {}" + PMD.EOL +
    "}";
}
```

File: test.net.sourceforge.pmd.ast.MethodDeclTest
```java
package test.net.sourceforge.pmd.ast;

import net.sourceforge.pmd.ast.ASTMethodDeclaration;

import java.util.Iterator;
import java.util.Set;

public class MethodDeclTest extends ParserTst {
    public void testPublic() throws Throwable {
        String access[] = {"public"};
        ASTMethodDeclaration amd = getMethodDecl(access);
        assertTrue("Expecting method to be public.", amd.isPublic());
    }

    public void testPrivate() throws Throwable {
        String access[] = {"private"};
        ASTMethodDeclaration amd = getMethodDecl(access);
        assertTrue("Expecting method to be private.", amd.isPrivate());
    }

    public void testProtected() throws Throwable {
        String access[] = {"protected"};
        ASTMethodDeclaration amd = getMethodDecl(access);
        assertTrue("Expecting method to be protected.", amd.isProtected());
    }

    public void testFinal() throws Throwable {
        String access[] = {"public", "final"};
        ASTMethodDeclaration amd = getMethodDecl(access);
        assertTrue("Expecting method to be final.", amd.isFinal());
        assertTrue("Expecting method to be public.", amd.isPublic());
    }

    public void testSynchronized() throws Throwable {
        String access[] = {"public", "synchronized"};
        ASTMethodDeclaration amd = getMethodDecl(access);
        assertTrue("Expecting method to be synchronized.", amd.isSynchronized());
        assertTrue("Expecting method to be public.", amd.isPublic());
    }

    public void testAbstract() throws Throwable {
        String access[] = {"public", "abstract"};
        ASTMethodDeclaration amd = getMethodDecl(access);
        assertTrue("Expecting method to be abstract.", amd.isAbstract());
        assertTrue("Expecting method to be public.", amd.isPublic());
    }

    public void testNative() throws Throwable {
        String access[] = {"private", "native"};
        ASTMethodDeclaration amd = getMethodDecl(access);
        assertTrue("Expecting method to be native.", amd.isNative());
        assertTrue("Expecting method to be private.", amd.isPrivate());
    }

    public void testStrict() throws Throwable {
        String access[] = {"public", "strictfp"};
        ASTMethodDeclaration amd = getMethodDecl(access);
        assertTrue("Expecting method to be strict.", amd.isStrict());
        assertTrue("Expecting method to be public.", amd.isPublic());
    }

    public ASTMethodDeclaration getMethodDecl(String access[]) throws Throwable {
        String javaCode = "public class Test { ";
        for (int i = 0; i < access.length; i++) {
            javaCode += access[i] + " ";
        }

        javaCode += " void stuff() { } }";

        Set methods = getNodes(ASTMethodDeclaration.class, javaCode);

        assertEquals("Wrong number of methods", 1, methods.size());

        Iterator i = methods.iterator();
        return (ASTMethodDeclaration) i.next();
    }
}
```

File: test.net.sourceforge.pmd.ast.ASTBooleanLiteralTest
```java
package test.net.sourceforge.pmd.ast;

import junit.framework.TestCase;
import net.sourceforge.pmd.ast.ASTBooleanLiteral;

public class ASTBooleanLiteralTest extends TestCase {
    public void testTrue() {
        ASTBooleanLiteral b = new ASTBooleanLiteral(0);
        assertFalse(b.isTrue());
        b.setTrue();
        assertTrue(b.isTrue());
    }
}
```

File: test.net.sourceforge.pmd.ast.ParserTst
```java
package test.net.sourceforge.pmd.ast;

import junit.framework.TestCase;
import net.sourceforge.pmd.TargetJDK1_4;
import net.sourceforge.pmd.ast.ASTCompilationUnit;
import net.sourceforge.pmd.ast.JavaParser;
import net.sourceforge.pmd.ast.JavaParserVisitor;

import java.io.StringReader;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.HashSet;
import java.util.Set;

public class ParserTst extends TestCase {

    private class Collector implements InvocationHandler {
        private Class clazz = null;
        private Set collection = new HashSet();

        public Collector(Class clazz) {
            this.clazz = clazz;
        }

        public Set getCollection() {
            return collection;
        }

        public Object invoke(Object proxy, Method method, Object params[]) throws Throwable {
            if (method.getName().equals("visit")) {
                if (clazz.isInstance(params[0])) {
                    collection.add(params[0]);
                }
            }

            Method childrenAccept = params[0].getClass().getMethod("childrenAccept", new Class[]{JavaParserVisitor.class, Object.class});
            childrenAccept.invoke(params[0], new Object[]{proxy, null});
            return null;
        }
    }

    public Set getNodes(Class clazz, String javaCode) throws Throwable {
        Collector coll = new Collector(clazz);
        JavaParser parser = (new TargetJDK1_4()).createParser(new StringReader(javaCode));
        ASTCompilationUnit cu = parser.CompilationUnit();
        JavaParserVisitor jpv = (JavaParserVisitor) Proxy.newProxyInstance(JavaParserVisitor.class.getClassLoader(), new Class[]{JavaParserVisitor.class}, coll);
        jpv.visit(cu, null);
        return coll.getCollection();
    }
}
```

File: test.net.sourceforge.pmd.ast.SimpleNodeTest
```java
package test.net.sourceforge.pmd.ast;

import net.sourceforge.pmd.PMD;
import net.sourceforge.pmd.ast.ASTBlock;
import net.sourceforge.pmd.ast.ASTBlockStatement;
import net.sourceforge.pmd.ast.ASTEqualityExpression;
import net.sourceforge.pmd.ast.ASTExpression;
import net.sourceforge.pmd.ast.ASTInstanceOfExpression;
import net.sourceforge.pmd.ast.ASTMethodDeclaration;
import net.sourceforge.pmd.ast.ASTName;
import net.sourceforge.pmd.ast.ASTRelationalExpression;
import net.sourceforge.pmd.ast.ASTReturnStatement;
import net.sourceforge.pmd.ast.ASTUnmodifiedClassDeclaration;
import net.sourceforge.pmd.ast.ASTVariableInitializer;
import net.sourceforge.pmd.ast.SimpleNode;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public class SimpleNodeTest extends ParserTst {

    public void testMethodDiffLines() throws Throwable {
        Set methods = getNodes(ASTMethodDeclaration.class, METHOD_DIFF_LINES);
        Iterator iter = methods.iterator();
        verifyNode((SimpleNode) iter.next(), 2, 2, 4, 2);
    }

    public void testMethodSameLine() throws Throwable {
        Set methods = getNodes(ASTMethodDeclaration.class, METHOD_SAME_LINE);
        verifyNode((SimpleNode) methods.iterator().next(), 2, 2, 2, 21);
    }

    public void testNoLookahead() throws Throwable {
        String code = NO_LOOKAHEAD; // 1, 8 -> 1, 20
        Set uCD = getNodes(ASTUnmodifiedClassDeclaration.class, code);
        verifyNode((SimpleNode) uCD.iterator().next(), 1, 8, 1, 20);
    }

    public void testHasExplicitExtends() throws Throwable {
        String code = HAS_EXPLICIT_EXTENDS;
        ASTUnmodifiedClassDeclaration ucd = (ASTUnmodifiedClassDeclaration)(getNodes(ASTUnmodifiedClassDeclaration.class, code).iterator().next());
        assertTrue(ucd.hasExplicitExtends());
    }

    public void testNoExplicitExtends() throws Throwable {
        String code = NO_EXPLICIT_EXTENDS;
        ASTUnmodifiedClassDeclaration ucd = (ASTUnmodifiedClassDeclaration)(getNodes(ASTUnmodifiedClassDeclaration.class, code).iterator().next());
        assertTrue(!ucd.hasExplicitExtends());
    }

    public void testHasExplicitImplements() throws Throwable {
        String code = HAS_EXPLICIT_IMPLEMENTS;
        ASTUnmodifiedClassDeclaration ucd = (ASTUnmodifiedClassDeclaration)(getNodes(ASTUnmodifiedClassDeclaration.class, code).iterator().next());
        assertTrue(ucd.hasExplicitImplements());
    }

    public void testNoExplicitImplements() throws Throwable {
        String code = NO_EXPLICIT_IMPLEMENTS;
        ASTUnmodifiedClassDeclaration ucd = (ASTUnmodifiedClassDeclaration)(getNodes(ASTUnmodifiedClassDeclaration.class, code).iterator().next());
        assertTrue(!ucd.hasExplicitImplements());
    }

    public void testColumnsOnQualifiedName() throws Throwable {
        Set name = getNodes(ASTName.class, QUALIFIED_NAME);
        Iterator i = name.iterator();
        while (i.hasNext()) {
            SimpleNode node = (SimpleNode) i.next();
            if (node.getImage().equals("java.io.File")) {
                verifyNode(node, 1, 8, 1, 19);
            }
        }
    }

    public void testLineNumbersForNameSplitOverTwoLines() throws Throwable {
        Set name = getNodes(ASTName.class, BROKEN_LINE_IN_NAME);
        Iterator i = name.iterator();
        while (i.hasNext()) {
            SimpleNode node = (SimpleNode) i.next();
            if (node.getImage().equals("java.io.File")) {
                verifyNode(node, 1, 8, 2, 4);
            }
            if (node.getImage().equals("Foo")) {
                verifyNode(node, 2, 15, 2, 18);
            }
        }
    }

    public void testLineNumbersAreSetOnAllSiblings() throws Throwable {
        Set blocks = getNodes(ASTBlock.class, LINE_NUMBERS_ON_SIBLINGS);
        Iterator i = blocks.iterator();
        while (i.hasNext()) {
            ASTBlock b = (ASTBlock)i.next();
            assertTrue(b.getBeginLine() > 0);
        }
        blocks = getNodes(ASTVariableInitializer.class, LINE_NUMBERS_ON_SIBLINGS);
        i = blocks.iterator();
        while (i.hasNext()) {
            ASTVariableInitializer b = (ASTVariableInitializer)i.next();
            assertTrue(b.getBeginLine() > 0);
        }
        blocks = getNodes(ASTExpression.class, LINE_NUMBERS_ON_SIBLINGS);
        i = blocks.iterator();
        while (i.hasNext()) {
            ASTExpression b = (ASTExpression)i.next();
            assertTrue(b.getBeginLine() > 0);
        }
    }

    public void testFindChildrenOfType() {
        ASTBlock block = new ASTBlock(2);
        block.jjtAddChild(new ASTReturnStatement(1), 0);
        assertEquals(1, block.findChildrenOfType(ASTReturnStatement.class).size());
    }

    public void testFindChildrenOfTypeMultiple() {
        ASTBlock block = new ASTBlock(1);
        block.jjtAddChild(new ASTBlockStatement(2), 0);
        block.jjtAddChild(new ASTBlockStatement(3), 1);
        List nodes = new ArrayList();
        block.findChildrenOfType(ASTBlockStatement.class, nodes);
        assertEquals(2, nodes.size());
    }

    public void testFindChildrenOfTypeRecurse() {
        ASTBlock block = new ASTBlock(1);
        ASTBlock childBlock = new ASTBlock(2);
        block.jjtAddChild(childBlock, 0);
        childBlock.jjtAddChild(new ASTMethodDeclaration(3), 0);
        List nodes = new ArrayList();
        block.findChildrenOfType(ASTMethodDeclaration.class, nodes);
        assertEquals(1, nodes.size());
    }

    public void testReplaceChild() {
        ASTEqualityExpression ee = new ASTEqualityExpression(1);
        ASTInstanceOfExpression io1 = new ASTInstanceOfExpression(2);
        ASTRelationalExpression re = new ASTRelationalExpression(3);
        ASTInstanceOfExpression io2 = new ASTInstanceOfExpression(2);
        ee.jjtAddChild(io1, 0);
        ee.jjtAddChild(io2, 1);
        io1.jjtAddChild(re, 0);
        ee.jjtReplaceChild(io1, re);
        assertEquals(ee.jjtGetChild(0), re);
        assertEquals(ee.jjtGetChild(1), io2);
    }



    private void verifyNode(SimpleNode node, int beginLine, int beginCol, int endLine, int endCol) {
        assertEquals("Wrong beginning line: ", beginLine, node.getBeginLine());
        assertEquals("Wrong beginning column: ", beginCol, node.getBeginColumn());
        assertEquals("Wrong ending line:", endLine, node.getEndLine());
        assertEquals("Wrong ending column:", endCol, node.getEndColumn());
    }

    private static final String HAS_EXPLICIT_EXTENDS =
    "public class Test extends Foo {}";

    private static final String NO_EXPLICIT_EXTENDS =
    "public class Test {}";

    private static final String HAS_EXPLICIT_IMPLEMENTS =
    "public class Test implements Foo {}";

    private static final String NO_EXPLICIT_IMPLEMENTS =
    "public class Test {}";

    private static final String METHOD_DIFF_LINES =
    "public class Test {" + PMD.EOL +
    " public void foo() {" + PMD.EOL +
    "  int x;" + PMD.EOL +
    " }" + PMD.EOL +
    "}";

    private static final String METHOD_SAME_LINE =
    "public class Test {" + PMD.EOL +
    " public void foo() {}" + PMD.EOL +
    "}";

    private static final String QUALIFIED_NAME =
    "import java.io.File;" + PMD.EOL +
    "public class Foo{}";

    private static final String BROKEN_LINE_IN_NAME =
    "import java.io." + PMD.EOL +
    "File;" + PMD.EOL +
    "public class Foo{}";

    private static final String LINE_NUMBERS_ON_SIBLINGS =
    "public class Foo {" + PMD.EOL +
    " void bar() {" + PMD.EOL +
    "  try {" + PMD.EOL +
    "  } catch (Exception1 e) {" + PMD.EOL +
    "   int x =2;" + PMD.EOL +
    "  }" + PMD.EOL +
    " if (x != null) {}" + PMD.EOL +
    " }" + PMD.EOL +
    "}";

    private static final String NO_LOOKAHEAD = "public class Foo { }";
}
```

File: test.net.sourceforge.pmd.ast.ASTImportDeclarationTest
```java
package test.net.sourceforge.pmd.ast;

import junit.framework.TestCase;
import net.sourceforge.pmd.ast.ASTImportDeclaration;
import net.sourceforge.pmd.ast.ASTName;

public class ASTImportDeclarationTest extends TestCase {

    public void testBasic() {
        ASTImportDeclaration i = new ASTImportDeclaration(1);
        assertTrue(!i.isImportOnDemand());
        i.setImportOnDemand();
        assertTrue(i.isImportOnDemand());
    }

    public void testGetImportedNameNode() {
        ASTImportDeclaration i = new ASTImportDeclaration(1);
        ASTName name = new ASTName(2);
        i.jjtAddChild(name, 0);
        assertEquals(name, i.getImportedNameNode());
    }
}
```

File: test.net.sourceforge.pmd.ast.AccessNodeTest
```java
package test.net.sourceforge.pmd.ast;

import junit.framework.TestCase;
import net.sourceforge.pmd.ast.AccessNode;

public class AccessNodeTest extends TestCase {
    public void testStatic() {
        AccessNode node = new AccessNode(1);
        assertTrue("Node should default to not static.", !node.isStatic());
        node.setStatic();
        assertTrue("Node set to static, not static.", node.isStatic());
    }

    public void testPublic() {
        AccessNode node = new AccessNode(1);
        assertTrue("Node should default to not public.", !node.isPublic());
        node.setPublic();
        assertTrue("Node set to public, not public.", node.isPublic());
    }

    public void testProtected() {
        AccessNode node = new AccessNode(1);
        assertTrue("Node should default to not protected.", !node.isProtected());
        node.setProtected();
        assertTrue("Node set to protected, not protected.", node.isProtected());
    }

    public void testPrivate() {
        AccessNode node = new AccessNode(1);
        assertTrue("Node should default to not private.", !node.isPrivate());
        node.setPrivate();
        assertTrue("Node set to private, not private.", node.isPrivate());
    }

    public void testFinal() {
        AccessNode node = new AccessNode(1);
        assertTrue("Node should default to not final.", !node.isFinal());
        node.setFinal();
        assertTrue("Node set to final, not final.", node.isFinal());
    }

    public void testSynchronized() {
        AccessNode node = new AccessNode(1);
        assertTrue("Node should default to not synchronized.", !node.isSynchronized());
        node.setSynchronized();
        assertTrue("Node set to synchronized, not synchronized.", node.isSynchronized());
    }

    public void testVolatile() {
        AccessNode node = new AccessNode(1);
        assertTrue("Node should default to not volatile.", !node.isVolatile());
        node.setVolatile();
        assertTrue("Node set to volatile, not volatile.", node.isVolatile());
    }

    public void testTransient() {
        AccessNode node = new AccessNode(1);
        assertTrue("Node should default to not transient.", !node.isTransient());
        node.setTransient();
        assertTrue("Node set to transient, not transient.", node.isTransient());
    }

    public void testNative() {
        AccessNode node = new AccessNode(1);
        assertTrue("Node should default to not native.", !node.isNative());
        node.setNative();
        assertTrue("Node set to native, not native.", node.isNative());
    }

    public void testInterface() {
        AccessNode node = new AccessNode(1);
        assertTrue("Node should default to not interface.", !node.isInterface());
        node.setInterface();
        assertTrue("Node set to interface, not interface.", node.isInterface());
    }

    public void testAbstract() {
        AccessNode node = new AccessNode(1);
        assertTrue("Node should default to not abstract.", !node.isAbstract());
        node.setAbstract();
        assertTrue("Node set to abstract, not abstract.", node.isAbstract());
    }

    public void testStrict() {
        AccessNode node = new AccessNode(1);
        assertTrue("Node should default to not strict.", !node.isStrict());
        node.setStrict();
        assertTrue("Node set to strict, not strict.", node.isStrict());
    }

    public void testSuper() {
        AccessNode node = new AccessNode(1);
        assertTrue("Node should default to not super.", !node.isSuper());
        node.setSuper();
        assertTrue("Node set to super, not super.", node.isSuper());
    }
    public void testPackagePrivate() {
        AccessNode node = new AccessNode(1);
        assertTrue("Node should default to package private.", node.isPackagePrivate());
        node.setPrivate();
        assertTrue("Node set to private, still package private.", !node.isPackagePrivate());
        node = new AccessNode(1);
        node.setPublic();
        assertTrue("Node set to public, still package private.", !node.isPackagePrivate());
        node = new AccessNode(1);
        node.setProtected();
        assertTrue("Node set to protected, still package private.", !node.isPackagePrivate());
    }
}
```

File: test.net.sourceforge.pmd.ast.ASTTypeTest
```java
package test.net.sourceforge.pmd.ast;

import junit.framework.TestCase;
import net.sourceforge.pmd.PMD;
import net.sourceforge.pmd.TargetJDK1_4;
import net.sourceforge.pmd.ast.ASTCompilationUnit;
import net.sourceforge.pmd.ast.ASTType;
import net.sourceforge.pmd.ast.JavaParser;

import java.io.StringReader;

public class ASTTypeTest extends TestCase{

    public void testIsArray() {
        JavaParser parser = (new TargetJDK1_4()).createParser(new StringReader(TEST1));
        ASTCompilationUnit cu = parser.CompilationUnit();
        ASTType node = (ASTType)cu.findChildrenOfType(ASTType.class).get(0);
        assertTrue(node.isArray());
    }

    public void testOneDimensionArray() {
        JavaParser parser = (new TargetJDK1_4()).createParser(new StringReader(TEST2));
        ASTCompilationUnit cu = parser.CompilationUnit();
        ASTType node = (ASTType)cu.findChildrenOfType(ASTType.class).get(0);
        assertEquals(1, node.getDimensions());
    }

    public void testMultiDimensionalArray() {
        JavaParser parser = (new TargetJDK1_4()).createParser(new StringReader(TEST3));
        ASTCompilationUnit cu = parser.CompilationUnit();
        ASTType node = (ASTType)cu.findChildrenOfType(ASTType.class).get(0);
        assertEquals(3, node.getDimensions());
    }

    private static final String TEST1 =
    "class Foo {" + PMD.EOL +
    " String[] foo() {}" + PMD.EOL +
    "}";

    private static final String TEST2 =
    "class Foo {" + PMD.EOL +
    " String[] foo() {}" + PMD.EOL +
    "}";

    private static final String TEST3 =
    "class Foo {" + PMD.EOL +
    " String[][][] foo() {}" + PMD.EOL +
    "}";

}
```

File: test.net.sourceforge.pmd.ast.DiscardableNodeCleanerTest
```java
package test.net.sourceforge.pmd.ast;

import junit.framework.TestCase;
import net.sourceforge.pmd.ast.ASTCompilationUnit;
import net.sourceforge.pmd.ast.ASTEqualityExpression;
import net.sourceforge.pmd.ast.ASTInstanceOfExpression;
import net.sourceforge.pmd.ast.ASTRelationalExpression;
import net.sourceforge.pmd.ast.DiscardableNodeCleaner;

public class DiscardableNodeCleanerTest extends TestCase {

    public void testRemoveDiscardNodes() {
        ASTCompilationUnit cu = new ASTCompilationUnit(1);
        ASTEqualityExpression ee = new ASTEqualityExpression(2);
        ee.jjtSetParent(cu);
        cu.jjtAddChild(ee, 0);

        ASTInstanceOfExpression io1 = new ASTInstanceOfExpression(3);
        io1.setDiscardable();
        io1.jjtSetParent(ee);
        ASTRelationalExpression re = new ASTRelationalExpression(4);
        re.jjtSetParent(ee);
        ee.jjtAddChild(io1, 0);
        io1.jjtAddChild(re, 0);
        assertEquals(cu.findChildrenOfType(ASTInstanceOfExpression.class).size(), 1);
        DiscardableNodeCleaner c = new DiscardableNodeCleaner();
        c.clean(cu);
        assertEquals(cu.findChildrenOfType(ASTInstanceOfExpression.class).size(), 0);
    }
}
```

File: test.net.sourceforge.pmd.ast.ASTTests
```java
package test.net.sourceforge.pmd.ast;

import junit.framework.Test;
import junit.framework.TestSuite;

public class ASTTests
{
  public static Test suite(  )
  {
    TestSuite suite = new TestSuite( "Test for test.net.sourceforge.pmd.ast" );

    suite.addTestSuite( ASTImportDeclarationTest.class );
    suite.addTestSuite( ASTVariableDeclaratorIdTest.class );
    suite.addTestSuite( AccessNodeTest.class );
    suite.addTestSuite( ClassDeclTest.class );
    suite.addTestSuite( FieldDeclTest.class );
    suite.addTestSuite( MethodDeclTest.class );
    suite.addTestSuite( SimpleNodeTest.class );

    return suite;
  }
}


```

File: test.net.sourceforge.pmd.ast.ClassDeclTest
```java
package test.net.sourceforge.pmd.ast;

import net.sourceforge.pmd.ast.ASTClassDeclaration;

import java.util.Iterator;
import java.util.Set;

public class ClassDeclTest extends ParserTst {

    public void testPublic() throws Throwable {
        String access[] = {"public"};
        ASTClassDeclaration acd = getClassDecl(access);
        verifyFlags(acd, true, false, false, false);
    }

    public void testAbstract() throws Throwable {
        String access[] = {"abstract"};
        ASTClassDeclaration acd = getClassDecl(access);
        verifyFlags(acd, false, true, false, false);
    }

    public void testFinal() throws Throwable {
        String access[] = {"final"};
        ASTClassDeclaration acd = getClassDecl(access);
        verifyFlags(acd, false, false, true, false);
    }

    public void testStrict() throws Throwable {
        String access[] = {"strictfp"};
        ASTClassDeclaration acd = getClassDecl(access);
        verifyFlags(acd, false, false, false, true);
    }

    public void testPublicFinal() throws Throwable {
        String access[] = {"public", "final"};
        ASTClassDeclaration acd = getClassDecl(access);
        verifyFlags(acd, true, false, true, false);
    }

    public void verifyFlags(ASTClassDeclaration acd, boolean bPublic, boolean bAbstract, boolean bFinal, boolean bStrict) {
        assertEquals("Public: ", bPublic, acd.isPublic());
        assertEquals("Abstract: ", bAbstract, acd.isAbstract());
        assertEquals("Final: ", bFinal, acd.isFinal());
        assertEquals("Strict: ", bStrict, acd.isStrict());
    }

    public ASTClassDeclaration getClassDecl(String access[]) throws Throwable {
        String javaCode = "";

        for (int i = 0; i < access.length; i++) {
            javaCode += access[i] + " ";
        }

        javaCode += " class Test { } ";

        Set classes = getNodes(ASTClassDeclaration.class, javaCode);

        assertEquals("Wrong number of classes", 1, classes.size());
        Iterator i = classes.iterator();
        return (ASTClassDeclaration) i.next();
    }
}
```

File: test.net.sourceforge.pmd.ast.FieldDeclTest
```java
package test.net.sourceforge.pmd.ast;

import net.sourceforge.pmd.ast.ASTFieldDeclaration;

import java.util.Iterator;
import java.util.Set;

public class FieldDeclTest extends ParserTst {
    public String makeAccessJavaCode(String access[]) {
        String result = "public class Test { ";
        for (int i = 0; i < access.length; i++) {
            result += access[i] + " ";
        }
        return result + " int j;  }";
    }

    public ASTFieldDeclaration getFieldDecl(String access[]) throws Throwable {
        Set fields = getNodes(ASTFieldDeclaration.class, makeAccessJavaCode(access));

        assertEquals("Wrong number of fields", 1, fields.size());
        Iterator i = fields.iterator();
        return (ASTFieldDeclaration) i.next();
    }

    public void testPublic() throws Throwable {
        String access[] = {"public"};
        ASTFieldDeclaration afd = getFieldDecl(access);
        assertTrue("Expecting field to be public.", afd.isPublic());
    }

    public void testProtected() throws Throwable {
        String access[] = {"protected"};
        ASTFieldDeclaration afd = getFieldDecl(access);
        assertTrue("Expecting field to be protected.", afd.isProtected());
    }

    public void testPrivate() throws Throwable {
        String access[] = {"private"};
        ASTFieldDeclaration afd = getFieldDecl(access);
        assertTrue("Expecting field to be private.", afd.isPrivate());
    }

    public void testStatic() throws Throwable {
        String access[] = {"private", "static"};
        ASTFieldDeclaration afd = getFieldDecl(access);
        assertTrue("Expecting field to be static.", afd.isStatic());
        assertTrue("Expecting field to be private.", afd.isPrivate());
    }

    public void testFinal() throws Throwable {
        String access[] = {"public", "final"};
        ASTFieldDeclaration afd = getFieldDecl(access);
        assertTrue("Expecting field to be final.", afd.isFinal());
        assertTrue("Expecting field to be public.", afd.isPublic());
    }

    public void testTransient() throws Throwable {
        String access[] = {"private", "transient"};
        ASTFieldDeclaration afd = getFieldDecl(access);
        assertTrue("Expecting field to be private.", afd.isPrivate());
        assertTrue("Expecting field to be transient.", afd.isTransient());
    }

    public void testVolatile() throws Throwable {
        String access[] = {"private", "volatile"};
        ASTFieldDeclaration afd = getFieldDecl(access);
        assertTrue("Expecting field to be volatile.", afd.isVolatile());
        assertTrue("Expecting field to be private.", afd.isPrivate());
    }
}
```

